.include "/home/marik/Project/m32Adef.inc"
;.def     Flags=R5

.def     Flag=R5	;флаг
.def     Th0=R6		;Час выключения
.def     Tm0=R7		;Минута выключения
.def     Th1=R8		;Час включения
.def     Tm1=R9		;Минута включения
.def     ThC=R12	;Час Текущий (считанный)
.def     TmC=R11	;Минута Текущая (считанная)
.def     TmP=R19	;Минута При прошлом чтении времени

.def     Temp=R16
.def     OutByte=R17
.def     CNT=R18
.def     Temp2=R21
.def     OutByte2=R20


.equ	Light=PA7	; Управление светом на порте PA7
.equ	SEG7_DDR=DDRA
.equ	SEG7_PORT=PortA
.equ	DS=PA1
.equ	SHcp=PA2
.equ	STcp=PA3

.cseg
.org 0

rjmp	RESET		;
rjmp	EXT_INT0	;
rjmp	EXT_INT1	;
rjmp	EXT_INT2	;
rjmp	TIM2_COMP	;
rjmp	TIM2_OVF	;
rjmp	TIM1_CAPT	;
rjmp	TIM1_COMPA	;
rjmp	TIM1_COMPB	;
rjmp	TIM1_OVF	;
rjmp	TIM0_COMP	;
rjmp	TIM0_OVF	;
rjmp	SPI_STC		;
rjmp	USART_RXC	;
rjmp	USART_UDRE	;
rjmp	USART_TXC	;
rjmp	ADC		;
rjmp	EE_RDY		;
rjmp	ANA_COMP	;
rjmp	TWI		;
rjmp	SPM_RDY		;


;RESET:
EXT_INT0:
EXT_INT1:
EXT_INT2:
TIM2_COMP:
TIM2_OVF:
TIM1_CAPT:
TIM1_COMPA:
TIM1_COMPB:
TIM1_OVF:
TIM0_COMP:
TIM0_OVF:
SPI_STC:
USART_RXC:
USART_UDRE:
USART_TXC:
ADC:
EE_RDY:
ANA_COMP:
TWI:
SPM_RDY:
	reti



RESET:	
	ldi R16,low(RAMEND) ;инициализация стека
	out SPL,R16
	ldi R16,high(RAMEND)
	out SPH, R16

	WDR
	LDI Temp, 1<<WDE|1<<WDP2|1<<WDP1|1<<WDP0
	OUT WDTCR, Temp
	WDR

	SEI
 
	LDI R16, 1<<7
	OUT DDRD, R16

	ldi R16,1<<Light	;настройка порта A
	out DDRA,R16

	ldi Temp, 1<<DS|1<<SHcp|1<<STcp  ;настройка порта SEG7
	in Temp2, SEG7_DDR
	ANDI Temp2, ~(1<<STcp|1<<SHcp|1<<DS)
	OR Temp, Temp2
	out SEG7_DDR,Temp

	ldi R16,0b00000000	;Гасим свет
	out PORTA,R16

	LDI R16,0x23
	MOV Th0,R16		;Час выключения

	LDI R16,0x30
	MOV Tm0,R16		;Минута выключения

	LDI R16,0x07
	MOV Th1,R16		;Час включения

	LDI R16,0x30
	MOV Tm1,R16		;Минута включения

	;Выставить флаг =1 если T0 > T1, иначе =0
	LDI R16,1
	MOV Flag, R16	


	LDI TmP,0x99		;Минута При прошлом чтении времени



	LDI R16,128	;НАстройка TWI
	OUT TWBR, R16
	CLR R14

	RJMP ReadTime

	.include 	"TWI_macro.inc"

sym_table:
	; Таблица символов 7SEG дисплея
	; Q0 = A, Q1 = E, Q2 = D, Q3 = dot,
	; Q4 = C, Q5 = F, Q6 = G,   Q7 = B

	.DB 0b10110111, 0b10010000 ; 0, 1
	.DB 0b11000111, 0b11010101 ; 2, 3
	.DB 0b11110000, 0b01110101 ; 4, 5
	.DB 0b01110111, 0b10010001 ; 6, 7
	.DB 0b11110111, 0b11110101 ; 8, 9
	.DB 0b11110011, 0b01110110 ; A, b
	.DB 0b00100111, 0b11010110 ; C, d
	.DB 0b01100111, 0b01100011 ; E, F
	.DB 0b01100110, 0b00000100 ; t, _


ReadTime:
	TWI_START
	SBRC R14,0
	RJMP ERROR

	TWI_SLA_W
	SBRC R14,0
	RJMP ERROR

	TWI_SEND_B 0x01
	SBRC R14,0
	RJMP ERROR

	TWI_RESTART
	SBRC R14,0
	RJMP ERROR

	TWI_SLA_R
	SBRC R14,0
	RJMP ERROR

	TWI_READ_B_ACK
	SBRC R14,0
	RJMP ERROR
	MOV R11,R16	;Записали минуты в R11

	TWI_READ_B_NACK
	SBRC R14,0
	RJMP ERROR
	MOV R12,R16	;Записали Часы в R12

	TWI_STOP


rjmp Begin

ERROR: Mov R16,R14
	rcall uart_snt
CLR R14
RJMP ReadTime


Begin: CP TmP,R11	; Проверяем, поменялись-ли минуты
BREQ Bezdel
MOV TmP,R11		; Раз минуты поменялись, записываем новое значение
SBRS Flag, 0
RJMP FL0	;Если флаг  не выставлен, переходим к сравнению, когда T0<T1


SET		;Сравниваем текущее время с T1
rcall CpTime
BRTC Light_Off	; Если Т1 больше - выключаем
CLT		;Сравниваем текущее время с T0
rcall CpTime
BRTS Light_Off	; Если Тc больше - выключаем
rjmp Light_ON

FL0:	; Флаг =0
SET		;Сравниваем текущее время с T1
rcall CpTime
BRTS Light_On	; Если Тc больше - включаем
CLT		;Сравниваем текущее время с T0
rcall CpTime
BRTS Light_Off	; Если Тc больше - выключаем
rjmp Light_ON



Light_ON: in R16,PORTA ; Включаем свет
	ori R16, 1<<Light
	out PORTA, R16
	rjmp Bezdel

Light_Off: in R16,PORTA ; Выключаем свет
	andi R16, ~(1<<Light)
	out PORTA, R16

Bezdel:
rcall BCDTo7SEG
WDR


rcall Delay
nop
nop
nop
nop
nop
nop
RJMP ReadTime



;----------------------------------------------------------------
;-Сравнение текущего времени с заданным.
;-Если флаг Т=0 сравнивается с Т0, иначе с Т1
;-На выходе флаг Т=1 (установлен) если текущее время
;-больше времени таймера или равно
;----------------------------------------------------------------
CpTime:
	BRTC CPT0
	MOV R16, Th1
	MOV R17, Tm1
	rjmp CpStart

	CPT0:	; Сравниваем с T0
	MOV R16, Th0
	MOV R17, Tm0

	CpStart:
	CP ThC,R16	;Сравниваем часы
	BRCS ToCLT
	BREQ CpMin
ToSET:	SET		;Устанавливаем флаг Т
	RET
	
CpMin:	CP TmC,R17		;Сравниваем минуты
	BRCC ToSET

ToCLT: CLT
RET

;-----------------------------------------------------------------
;-Конец подпрограммы
;-----------------------------------------------------------------









Delay:    ldi R22,0          ;задержка (0,0,24 - 0,5 секунды)
          ldi R23,30

Loop1:    rcall TimeToSeg
	  dec R22
          brne Loop1

          dec R23
          brne Loop1

	ret

; Процедура отправки байта
uart_snt:	SBIS 	UCSRA,UDRE	; Пропуск если нет флага готовности
		RJMP	uart_snt 	; ждем готовности - флага UDRE
 
		OUT	UDR, R16	; шлем байт
		RET


;|---------------------------------------------------------------------------
;| Процедура вывода на 7 сегментный индикатор
;| На входе: минуты в R11
;|           часы в R12
;| На выходе: В TimeToOut - старший разряд часов,
;| в TimeToOut+1 - младний разряд часов,
;| в TimeToOut+2 - старший разряд минут,
;| в TimeToOut+3 - младний разряд минут
;|---------------------------------------------------------------------------
Output:	ldi CNT,0
	clc
Next:	lsl OutByte
	BRLO One		;переход если С=1

	ldi Temp, 0<<STcp|1<<SHcp|0<<DS
	rcall EndWR
	rjmp Check

One: 	ldi Temp, 0<<STcp|1<<SHcp|1<<DS
	rcall EndWR

Check:	ldi Temp, 0<<STcp|0<<SHcp|0<<DS
	rcall EndWR

	inc CNT
	cpi CNT,0b00001000
	breq STout
	rjmp Next

EndWR: 	in Temp2, SEG7_PORT
	ANDI Temp2, ~(1<<STcp|1<<SHcp|1<<DS)
	OR Temp, Temp2
	out SEG7_PORT,Temp
 	ret

STout:	BRTS STend
	SET
	MOV OutByte, OutByte2
	rjmp Output

STend:	ldi Temp, 1<<STcp|0<<SHcp|0<<DS	;Затолкали, теперь выводим.
	rcall EndWR
	ldi Temp, 0<<STcp|0<<SHcp|0<<DS
	rcall EndWR
	ret
;|---------------------------------------------------------------------------
;|                               END
:|---------------------------------------------------------------------------





;|---------------------------------------------------------------------------
;| Процедура преобразования BCD времени в символы для 7 сегментного индикатора
;| На входе: минуты в R11
;|           часы в R12
;| На выходе: В TimeToOut - старший разряд часов,
;| в TimeToOut+1 - младний разряд часов,
;| в TimeToOut+2 - старший разряд минут,
;| в TimeToOut+3 - младний разряд минут
;|---------------------------------------------------------------------------
BCDTo7SEG: CLI
	PUSH Temp
	MOV Temp, R12
	SWAP Temp	;Поменять местами тетрады
	ANDI Temp, 0b00001111
	rcall FSym
	STS TimeToOut, Temp

	MOV Temp, R12
	ANDI Temp, 0b00001111
	rcall FSym
	ORI Temp, 1<<3
	STS TimeToOut+1, Temp

	MOV Temp, R11
	SWAP Temp	;Поменять местами тетрады
	ANDI Temp, 0b00001111
	rcall FSym
	STS TimeToOut+2, Temp

	MOV Temp, R11
	ANDI Temp, 0b00001111
	rcall FSym
	STS TimeToOut+3, Temp

	rjmp BCDTo7SEGend

FSym:	; Загрузить адрес таблицы символов
	LDI ZL, LOW (2*sym_table)
	LDI ZH, HIGH(2*sym_table)
	; Найти нужный символ
	ADD ZL, Temp
	; Загрузить данные символа в R0
	LPM
	MOV Temp, R0
	ret

BCDTo7SEGend:
POP Temp
SEI
RET
;|---------------------------------------------------------------------------
;|                               END
:|---------------------------------------------------------------------------

;|---------------------------------------------------------------------------
;| Процедура вывода времени
;|---------------------------------------------------------------------------
TimeToSeg:
	ldi ZL,Low(TimeToOut)
	ldi ZH,High(TimeToOut)  ;загрузка начального адреса массива
	LD	OutByte2, Z+
	ldi OutByte, ~(1<<0) ;Первый символ
	CLT
	rcall Output

	LD	OutByte2, Z+
	ldi OutByte, ~(1<<1) ;Второй символ
	CLT
	rcall Output

	LD	OutByte2, Z+
	ldi OutByte, ~(1<<2) ;Третий символ
	CLT
	rcall Output

	LD	OutByte2, Z+
	ldi OutByte, ~(1<<3) ;Четвертый символ
	CLT
	rcall Output
	
RET
;|---------------------------------------------------------------------------
;|                               END
:|---------------------------------------------------------------------------

.DSEG
TimeToOut:	.byte	4

