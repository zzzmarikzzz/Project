gavrasm Gerd's AVR assembler version 3.4 (C)2014 by DG4FAC
----------------------------------------------------------
Source file: Timberk.asm
Hex file:    Timberk.hex
Eeprom file: Timberk.eep
Compiled:    21.11.2015, 13:43:45
Pass:        2
     1: .include "/home/marik/Project/m48def.inc"
  Including file /home/marik/Project/m48def.inc
     1: ;***** THIS IS A MACHINE GENERATED FILE - DO NOT EDIT ********************
     2: ;***** Created: 2011-02-09 12:03 ******* Source: ATmega48.xml ************
     3: ;*************************************************************************
     4: ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
     5: ;* 
     6: ;* Number            : AVR000
     7: ;* File Name         : "m48def.inc"
     8: ;* Title             : Register/Bit Definitions for the ATmega48
     9: ;* Date              : 2011-02-09
    10: ;* Version           : 2.35
    11: ;* Support E-mail    : avr@atmel.com
    12: ;* Target MCU        : ATmega48
    13: ;* 
    14: ;* DESCRIPTION
    15: ;* When including this file in the assembly program file, all I/O register 
    16: ;* names and I/O register bit names appearing in the data book can be used.
    17: ;* In addition, the six registers forming the three data pointers X, Y and 
    18: ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
    19: ;* SRAM is also defined 
    20: ;* 
    21: ;* The Register names are represented by their hexadecimal address.
    22: ;* 
    23: ;* The Register Bit names are represented by their bit number (0-7).
    24: ;* 
    25: ;* Please observe the difference in using the bit names with instructions
    26: ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
    27: ;* (skip if bit in register set/cleared). The following example illustrates
    28: ;* this:
    29: ;* 
    30: ;* in    r16,PORTB             ;read PORTB latch
    31: ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
    32: ;* out   PORTB,r16             ;output to PORTB
    33: ;* 
    34: ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
    35: ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
    36: ;* rjmp  TOV0_is_set           ;jump if set
    37: ;* ...                         ;otherwise do something else
    38: ;*************************************************************************
    39: 
    40: #ifndef _M48DEF_INC_
    41: #define _M48DEF_INC_
    42: 
    43: 
    44: #pragma partinc 0
    45: 
    46: ; ***** SPECIFY DEVICE ***************************************************
    47: .device ATmega48
    48: #pragma AVRPART ADMIN PART_NAME ATmega48
    49: .equ	SIGNATURE_000	= 0x1e
    50: .equ	SIGNATURE_001	= 0x92
    51: .equ	SIGNATURE_002	= 0x05
    52: 
    53: #pragma AVRPART CORE CORE_VERSION V2E
    54: 
    55: 
    56: ; ***** I/O REGISTER DEFINITIONS *****************************************
    57: ; NOTE:
    58: ; Definitions marked "MEMORY MAPPED"are extended I/O ports
    59: ; and cannot be used with IN/OUT instructions
    60: .equ	UDR0	= 0xc6	; MEMORY MAPPED
    61: .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
    62: .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
    63: .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
    64: .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
    65: .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
    66: .equ	TWAMR	= 0xbd	; MEMORY MAPPED
    67: .equ	TWCR	= 0xbc	; MEMORY MAPPED
    68: .equ	TWDR	= 0xbb	; MEMORY MAPPED
    69: .equ	TWAR	= 0xba	; MEMORY MAPPED
    70: .equ	TWSR	= 0xb9	; MEMORY MAPPED
    71: .equ	TWBR	= 0xb8	; MEMORY MAPPED
    72: .equ	ASSR	= 0xb6	; MEMORY MAPPED
    73: .equ	OCR2B	= 0xb4	; MEMORY MAPPED
    74: .equ	OCR2A	= 0xb3	; MEMORY MAPPED
    75: .equ	TCNT2	= 0xb2	; MEMORY MAPPED
    76: .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
    77: .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
    78: .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
    79: .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
    80: .equ	OCR1AL	= 0x88	; MEMORY MAPPED
    81: .equ	OCR1AH	= 0x89	; MEMORY MAPPED
    82: .equ	ICR1L	= 0x86	; MEMORY MAPPED
    83: .equ	ICR1H	= 0x87	; MEMORY MAPPED
    84: .equ	TCNT1L	= 0x84	; MEMORY MAPPED
    85: .equ	TCNT1H	= 0x85	; MEMORY MAPPED
    86: .equ	TCCR1C	= 0x82	; MEMORY MAPPED
    87: .equ	TCCR1B	= 0x81	; MEMORY MAPPED
    88: .equ	TCCR1A	= 0x80	; MEMORY MAPPED
    89: .equ	DIDR1	= 0x7f	; MEMORY MAPPED
    90: .equ	DIDR0	= 0x7e	; MEMORY MAPPED
    91: .equ	ADMUX	= 0x7c	; MEMORY MAPPED
    92: .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
    93: .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
    94: .equ	ADCH	= 0x79	; MEMORY MAPPED
    95: .equ	ADCL	= 0x78	; MEMORY MAPPED
    96: .equ	TIMSK2	= 0x70	; MEMORY MAPPED
    97: .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
    98: .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
    99: .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
   100: .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
   101: .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
   102: .equ	EICRA	= 0x69	; MEMORY MAPPED
   103: .equ	PCICR	= 0x68	; MEMORY MAPPED
   104: .equ	OSCCAL	= 0x66	; MEMORY MAPPED
   105: .equ	PRR	= 0x64	; MEMORY MAPPED
   106: .equ	CLKPR	= 0x61	; MEMORY MAPPED
   107: .equ	WDTCSR	= 0x60	; MEMORY MAPPED
   108: .equ	SREG	= 0x3f
   109: .equ	SPL	= 0x3d
   110: .equ	SPH	= 0x3e
   111: .equ	SPMCSR	= 0x37
   112: .equ	MCUCR	= 0x35
   113: .equ	MCUSR	= 0x34
   114: .equ	SMCR	= 0x33
   115: .equ	ACSR	= 0x30
   116: .equ	SPDR	= 0x2e
   117: .equ	SPSR	= 0x2d
   118: .equ	SPCR	= 0x2c
   119: .equ	GPIOR2	= 0x2b
   120: .equ	GPIOR1	= 0x2a
   121: .equ	OCR0B	= 0x28
   122: .equ	OCR0A	= 0x27
   123: .equ	TCNT0	= 0x26
   124: .equ	TCCR0B	= 0x25
   125: .equ	TCCR0A	= 0x24
   126: .equ	GTCCR	= 0x23
   127: .equ	EEARL	= 0x21
   128: .equ	EEDR	= 0x20
   129: .equ	EECR	= 0x1f
   130: .equ	GPIOR0	= 0x1e
   131: .equ	EIMSK	= 0x1d
   132: .equ	EIFR	= 0x1c
   133: .equ	PCIFR	= 0x1b
   134: .equ	TIFR2	= 0x17
   135: .equ	TIFR1	= 0x16
   136: .equ	TIFR0	= 0x15
   137: .equ	PORTD	= 0x0b
   138: .equ	DDRD	= 0x0a
   139: .equ	PIND	= 0x09
   140: .equ	PORTC	= 0x08
   141: .equ	DDRC	= 0x07
   142: .equ	PINC	= 0x06
   143: .equ	PORTB	= 0x05
   144: .equ	DDRB	= 0x04
   145: .equ	PINB	= 0x03
   146: 
   147: 
   148: ; ***** BIT DEFINITIONS **************************************************
   149: 
   150: ; ***** USART0 ***********************
   151: ; UDR0 - USART I/O Data Register
   152: .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
   153: .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
   154: .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
   155: .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
   156: .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
   157: .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
   158: .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
   159: .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
   160: 
   161: ; UCSR0A - USART Control and Status Register A
   162: .equ	MPCM0	= 0	; Multi-processor Communication Mode
   163: .equ	U2X0	= 1	; Double the USART transmission speed
   164: .equ	UPE0	= 2	; Parity Error
   165: .equ	DOR0	= 3	; Data overRun
   166: .equ	FE0	= 4	; Framing Error
   167: .equ	UDRE0	= 5	; USART Data Register Empty
   168: .equ	TXC0	= 6	; USART Transmitt Complete
   169: .equ	RXC0	= 7	; USART Receive Complete
   170: 
   171: ; UCSR0B - USART Control and Status Register B
   172: .equ	TXB80	= 0	; Transmit Data Bit 8
   173: .equ	RXB80	= 1	; Receive Data Bit 8
   174: .equ	UCSZ02	= 2	; Character Size
   175: .equ	TXEN0	= 3	; Transmitter Enable
   176: .equ	RXEN0	= 4	; Receiver Enable
   177: .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
   178: .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
   179: .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
   180: 
   181: ; UCSR0C - USART Control and Status Register C
   182: .equ	UCPOL0	= 0	; Clock Polarity
   183: .equ	UCSZ00	= 1	; Character Size
   184: .equ	UCPHA0	= UCSZ00	; For compatibility
   185: .equ	UCSZ01	= 2	; Character Size
   186: .equ	UDORD0	= UCSZ01	; For compatibility
   187: .equ	USBS0	= 3	; Stop Bit Select
   188: .equ	UPM00	= 4	; Parity Mode Bit 0
   189: .equ	UPM01	= 5	; Parity Mode Bit 1
   190: .equ	UMSEL00	= 6	; USART Mode Select
   191: .equ	UMSEL0	= UMSEL00	; For compatibility
   192: .equ	UMSEL01	= 7	; USART Mode Select
   193: .equ	UMSEL1	= UMSEL01	; For compatibility
   194: 
   195: ; UBRR0H - USART Baud Rate Register High Byte
   196: .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
   197: .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
   198: .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
   199: .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
   200: 
   201: ; UBRR0L - USART Baud Rate Register Low Byte
   202: .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
   203: .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
   204: .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
   205: .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
   206: .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
   207: .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
   208: .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
   209: .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
   210: 
   211: 
   212: ; ***** TWI **************************
   213: ; TWAMR - TWI (Slave) Address Mask Register
   214: .equ	TWAM0	= 1	; 
   215: .equ	TWAMR0	= TWAM0	; For compatibility
   216: .equ	TWAM1	= 2	; 
   217: .equ	TWAMR1	= TWAM1	; For compatibility
   218: .equ	TWAM2	= 3	; 
   219: .equ	TWAMR2	= TWAM2	; For compatibility
   220: .equ	TWAM3	= 4	; 
   221: .equ	TWAMR3	= TWAM3	; For compatibility
   222: .equ	TWAM4	= 5	; 
   223: .equ	TWAMR4	= TWAM4	; For compatibility
   224: .equ	TWAM5	= 6	; 
   225: .equ	TWAMR5	= TWAM5	; For compatibility
   226: .equ	TWAM6	= 7	; 
   227: .equ	TWAMR6	= TWAM6	; For compatibility
   228: 
   229: ; TWBR - TWI Bit Rate register
   230: .equ	TWBR0	= 0	; 
   231: .equ	TWBR1	= 1	; 
   232: .equ	TWBR2	= 2	; 
   233: .equ	TWBR3	= 3	; 
   234: .equ	TWBR4	= 4	; 
   235: .equ	TWBR5	= 5	; 
   236: .equ	TWBR6	= 6	; 
   237: .equ	TWBR7	= 7	; 
   238: 
   239: ; TWCR - TWI Control Register
   240: .equ	TWIE	= 0	; TWI Interrupt Enable
   241: .equ	TWEN	= 2	; TWI Enable Bit
   242: .equ	TWWC	= 3	; TWI Write Collition Flag
   243: .equ	TWSTO	= 4	; TWI Stop Condition Bit
   244: .equ	TWSTA	= 5	; TWI Start Condition Bit
   245: .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
   246: .equ	TWINT	= 7	; TWI Interrupt Flag
   247: 
   248: ; TWSR - TWI Status Register
   249: .equ	TWPS0	= 0	; TWI Prescaler
   250: .equ	TWPS1	= 1	; TWI Prescaler
   251: .equ	TWS3	= 3	; TWI Status
   252: .equ	TWS4	= 4	; TWI Status
   253: .equ	TWS5	= 5	; TWI Status
   254: .equ	TWS6	= 6	; TWI Status
   255: .equ	TWS7	= 7	; TWI Status
   256: 
   257: ; TWDR - TWI Data register
   258: .equ	TWD0	= 0	; TWI Data Register Bit 0
   259: .equ	TWD1	= 1	; TWI Data Register Bit 1
   260: .equ	TWD2	= 2	; TWI Data Register Bit 2
   261: .equ	TWD3	= 3	; TWI Data Register Bit 3
   262: .equ	TWD4	= 4	; TWI Data Register Bit 4
   263: .equ	TWD5	= 5	; TWI Data Register Bit 5
   264: .equ	TWD6	= 6	; TWI Data Register Bit 6
   265: .equ	TWD7	= 7	; TWI Data Register Bit 7
   266: 
   267: ; TWAR - TWI (Slave) Address register
   268: .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
   269: .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
   270: .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
   271: .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
   272: .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
   273: .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
   274: .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
   275: .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
   276: 
   277: 
   278: ; ***** TIMER_COUNTER_1 **************
   279: ; TIMSK1 - Timer/Counter Interrupt Mask Register
   280: .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
   281: .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
   282: .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
   283: .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
   284: 
   285: ; TIFR1 - Timer/Counter Interrupt Flag register
   286: .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
   287: .equ	OCF1A	= 1	; Output Compare Flag 1A
   288: .equ	OCF1B	= 2	; Output Compare Flag 1B
   289: .equ	ICF1	= 5	; Input Capture Flag 1
   290: 
   291: ; TCCR1A - Timer/Counter1 Control Register A
   292: .equ	WGM10	= 0	; Waveform Generation Mode
   293: .equ	WGM11	= 1	; Waveform Generation Mode
   294: .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
   295: .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
   296: .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
   297: .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
   298: 
   299: ; TCCR1B - Timer/Counter1 Control Register B
   300: .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
   301: .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
   302: .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
   303: .equ	WGM12	= 3	; Waveform Generation Mode
   304: .equ	WGM13	= 4	; Waveform Generation Mode
   305: .equ	ICES1	= 6	; Input Capture 1 Edge Select
   306: .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
   307: 
   308: ; TCCR1C - Timer/Counter1 Control Register C
   309: .equ	FOC1B	= 6	; 
   310: .equ	FOC1A	= 7	; 
   311: 
   312: ; GTCCR - General Timer/Counter Control Register
   313: .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
   314: .equ	TSM	= 7	; Timer/Counter Synchronization Mode
   315: 
   316: 
   317: ; ***** TIMER_COUNTER_2 **************
   318: ; TIMSK2 - Timer/Counter Interrupt Mask register
   319: .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
   320: .equ	TOIE2A	= TOIE2	; For compatibility
   321: .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
   322: .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
   323: 
   324: ; TIFR2 - Timer/Counter Interrupt Flag Register
   325: .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
   326: .equ	OCF2A	= 1	; Output Compare Flag 2A
   327: .equ	OCF2B	= 2	; Output Compare Flag 2B
   328: 
   329: ; TCCR2A - Timer/Counter2 Control Register A
   330: .equ	WGM20	= 0	; Waveform Genration Mode
   331: .equ	WGM21	= 1	; Waveform Genration Mode
   332: .equ	COM2B0	= 4	; Compare Output Mode bit 0
   333: .equ	COM2B1	= 5	; Compare Output Mode bit 1
   334: .equ	COM2A0	= 6	; Compare Output Mode bit 1
   335: .equ	COM2A1	= 7	; Compare Output Mode bit 1
   336: 
   337: ; TCCR2B - Timer/Counter2 Control Register B
   338: .equ	CS20	= 0	; Clock Select bit 0
   339: .equ	CS21	= 1	; Clock Select bit 1
   340: .equ	CS22	= 2	; Clock Select bit 2
   341: .equ	WGM22	= 3	; Waveform Generation Mode
   342: .equ	FOC2B	= 6	; Force Output Compare B
   343: .equ	FOC2A	= 7	; Force Output Compare A
   344: 
   345: ; TCNT2 - Timer/Counter2
   346: .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
   347: .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
   348: .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
   349: .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
   350: .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
   351: .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
   352: .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
   353: .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
   354: 
   355: ; OCR2A - Timer/Counter2 Output Compare Register A
   356: .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
   357: .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
   358: .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
   359: .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
   360: .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
   361: .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
   362: .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
   363: .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
   364: 
   365: ; OCR2B - Timer/Counter2 Output Compare Register B
   366: .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
   367: .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
   368: .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
   369: .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
   370: .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
   371: .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
   372: .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
   373: .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
   374: 
   375: ; ASSR - Asynchronous Status Register
   376: .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
   377: .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
   378: .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
   379: .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
   380: .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
   381: .equ	AS2	= 5	; Asynchronous Timer/Counter2
   382: .equ	EXCLK	= 6	; Enable External Clock Input
   383: 
   384: ; GTCCR - General Timer Counter Control register
   385: .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
   386: .equ	PSR2	= PSRASY	; For compatibility
   387: ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
   388: 
   389: 
   390: ; ***** AD_CONVERTER *****************
   391: ; ADMUX - The ADC multiplexer Selection Register
   392: .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
   393: .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
   394: .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
   395: .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
   396: .equ	ADLAR	= 5	; Left Adjust Result
   397: .equ	REFS0	= 6	; Reference Selection Bit 0
   398: .equ	REFS1	= 7	; Reference Selection Bit 1
   399: 
   400: ; ADCSRA - The ADC Control and Status register A
   401: .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
   402: .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
   403: .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
   404: .equ	ADIE	= 3	; ADC Interrupt Enable
   405: .equ	ADIF	= 4	; ADC Interrupt Flag
   406: .equ	ADATE	= 5	; ADC  Auto Trigger Enable
   407: .equ	ADSC	= 6	; ADC Start Conversion
   408: .equ	ADEN	= 7	; ADC Enable
   409: 
   410: ; ADCSRB - The ADC Control and Status register B
   411: .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
   412: .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
   413: .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
   414: .equ	ACME	= 6	; 
   415: 
   416: ; ADCH - ADC Data Register High Byte
   417: .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
   418: .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
   419: .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
   420: .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
   421: .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
   422: .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
   423: .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
   424: .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
   425: 
   426: ; ADCL - ADC Data Register Low Byte
   427: .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
   428: .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
   429: .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
   430: .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
   431: .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
   432: .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
   433: .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
   434: .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
   435: 
   436: ; DIDR0 - Digital Input Disable Register
   437: .equ	ADC0D	= 0	; 
   438: .equ	ADC1D	= 1	; 
   439: .equ	ADC2D	= 2	; 
   440: .equ	ADC3D	= 3	; 
   441: .equ	ADC4D	= 4	; 
   442: .equ	ADC5D	= 5	; 
   443: 
   444: 
   445: ; ***** ANALOG_COMPARATOR ************
   446: ; ACSR - Analog Comparator Control And Status Register
   447: .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
   448: .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
   449: .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
   450: .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
   451: .equ	ACI	= 4	; Analog Comparator Interrupt Flag
   452: .equ	ACO	= 5	; Analog Compare Output
   453: .equ	ACBG	= 6	; Analog Comparator Bandgap Select
   454: .equ	ACD	= 7	; Analog Comparator Disable
   455: 
   456: ; DIDR1 - Digital Input Disable Register 1
   457: .equ	AIN0D	= 0	; AIN0 Digital Input Disable
   458: .equ	AIN1D	= 1	; AIN1 Digital Input Disable
   459: 
   460: 
   461: ; ***** PORTB ************************
   462: ; PORTB - Port B Data Register
   463: .equ	PORTB0	= 0	; Port B Data Register bit 0
   464: .equ	PB0	= 0	; For compatibility
   465: .equ	PORTB1	= 1	; Port B Data Register bit 1
   466: .equ	PB1	= 1	; For compatibility
   467: .equ	PORTB2	= 2	; Port B Data Register bit 2
   468: .equ	PB2	= 2	; For compatibility
   469: .equ	PORTB3	= 3	; Port B Data Register bit 3
   470: .equ	PB3	= 3	; For compatibility
   471: .equ	PORTB4	= 4	; Port B Data Register bit 4
   472: .equ	PB4	= 4	; For compatibility
   473: .equ	PORTB5	= 5	; Port B Data Register bit 5
   474: .equ	PB5	= 5	; For compatibility
   475: .equ	PORTB6	= 6	; Port B Data Register bit 6
   476: .equ	PB6	= 6	; For compatibility
   477: .equ	PORTB7	= 7	; Port B Data Register bit 7
   478: .equ	PB7	= 7	; For compatibility
   479: 
   480: ; DDRB - Port B Data Direction Register
   481: .equ	DDB0	= 0	; Port B Data Direction Register bit 0
   482: .equ	DDB1	= 1	; Port B Data Direction Register bit 1
   483: .equ	DDB2	= 2	; Port B Data Direction Register bit 2
   484: .equ	DDB3	= 3	; Port B Data Direction Register bit 3
   485: .equ	DDB4	= 4	; Port B Data Direction Register bit 4
   486: .equ	DDB5	= 5	; Port B Data Direction Register bit 5
   487: .equ	DDB6	= 6	; Port B Data Direction Register bit 6
   488: .equ	DDB7	= 7	; Port B Data Direction Register bit 7
   489: 
   490: ; PINB - Port B Input Pins
   491: .equ	PINB0	= 0	; Port B Input Pins bit 0
   492: .equ	PINB1	= 1	; Port B Input Pins bit 1
   493: .equ	PINB2	= 2	; Port B Input Pins bit 2
   494: .equ	PINB3	= 3	; Port B Input Pins bit 3
   495: .equ	PINB4	= 4	; Port B Input Pins bit 4
   496: .equ	PINB5	= 5	; Port B Input Pins bit 5
   497: .equ	PINB6	= 6	; Port B Input Pins bit 6
   498: .equ	PINB7	= 7	; Port B Input Pins bit 7
   499: 
   500: 
   501: ; ***** PORTC ************************
   502: ; PORTC - Port C Data Register
   503: .equ	PORTC0	= 0	; Port C Data Register bit 0
   504: .equ	PC0	= 0	; For compatibility
   505: .equ	PORTC1	= 1	; Port C Data Register bit 1
   506: .equ	PC1	= 1	; For compatibility
   507: .equ	PORTC2	= 2	; Port C Data Register bit 2
   508: .equ	PC2	= 2	; For compatibility
   509: .equ	PORTC3	= 3	; Port C Data Register bit 3
   510: .equ	PC3	= 3	; For compatibility
   511: .equ	PORTC4	= 4	; Port C Data Register bit 4
   512: .equ	PC4	= 4	; For compatibility
   513: .equ	PORTC5	= 5	; Port C Data Register bit 5
   514: .equ	PC5	= 5	; For compatibility
   515: .equ	PORTC6	= 6	; Port C Data Register bit 6
   516: .equ	PC6	= 6	; For compatibility
   517: 
   518: ; DDRC - Port C Data Direction Register
   519: .equ	DDC0	= 0	; Port C Data Direction Register bit 0
   520: .equ	DDC1	= 1	; Port C Data Direction Register bit 1
   521: .equ	DDC2	= 2	; Port C Data Direction Register bit 2
   522: .equ	DDC3	= 3	; Port C Data Direction Register bit 3
   523: .equ	DDC4	= 4	; Port C Data Direction Register bit 4
   524: .equ	DDC5	= 5	; Port C Data Direction Register bit 5
   525: .equ	DDC6	= 6	; Port C Data Direction Register bit 6
   526: 
   527: ; PINC - Port C Input Pins
   528: .equ	PINC0	= 0	; Port C Input Pins bit 0
   529: .equ	PINC1	= 1	; Port C Input Pins bit 1
   530: .equ	PINC2	= 2	; Port C Input Pins bit 2
   531: .equ	PINC3	= 3	; Port C Input Pins bit 3
   532: .equ	PINC4	= 4	; Port C Input Pins bit 4
   533: .equ	PINC5	= 5	; Port C Input Pins bit 5
   534: .equ	PINC6	= 6	; Port C Input Pins bit 6
   535: 
   536: 
   537: ; ***** PORTD ************************
   538: ; PORTD - Port D Data Register
   539: .equ	PORTD0	= 0	; Port D Data Register bit 0
   540: .equ	PD0	= 0	; For compatibility
   541: .equ	PORTD1	= 1	; Port D Data Register bit 1
   542: .equ	PD1	= 1	; For compatibility
   543: .equ	PORTD2	= 2	; Port D Data Register bit 2
   544: .equ	PD2	= 2	; For compatibility
   545: .equ	PORTD3	= 3	; Port D Data Register bit 3
   546: .equ	PD3	= 3	; For compatibility
   547: .equ	PORTD4	= 4	; Port D Data Register bit 4
   548: .equ	PD4	= 4	; For compatibility
   549: .equ	PORTD5	= 5	; Port D Data Register bit 5
   550: .equ	PD5	= 5	; For compatibility
   551: .equ	PORTD6	= 6	; Port D Data Register bit 6
   552: .equ	PD6	= 6	; For compatibility
   553: .equ	PORTD7	= 7	; Port D Data Register bit 7
   554: .equ	PD7	= 7	; For compatibility
   555: 
   556: ; DDRD - Port D Data Direction Register
   557: .equ	DDD0	= 0	; Port D Data Direction Register bit 0
   558: .equ	DDD1	= 1	; Port D Data Direction Register bit 1
   559: .equ	DDD2	= 2	; Port D Data Direction Register bit 2
   560: .equ	DDD3	= 3	; Port D Data Direction Register bit 3
   561: .equ	DDD4	= 4	; Port D Data Direction Register bit 4
   562: .equ	DDD5	= 5	; Port D Data Direction Register bit 5
   563: .equ	DDD6	= 6	; Port D Data Direction Register bit 6
   564: .equ	DDD7	= 7	; Port D Data Direction Register bit 7
   565: 
   566: ; PIND - Port D Input Pins
   567: .equ	PIND0	= 0	; Port D Input Pins bit 0
   568: .equ	PIND1	= 1	; Port D Input Pins bit 1
   569: .equ	PIND2	= 2	; Port D Input Pins bit 2
   570: .equ	PIND3	= 3	; Port D Input Pins bit 3
   571: .equ	PIND4	= 4	; Port D Input Pins bit 4
   572: .equ	PIND5	= 5	; Port D Input Pins bit 5
   573: .equ	PIND6	= 6	; Port D Input Pins bit 6
   574: .equ	PIND7	= 7	; Port D Input Pins bit 7
   575: 
   576: 
   577: ; ***** TIMER_COUNTER_0 **************
   578: ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
   579: .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
   580: .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
   581: .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
   582: 
   583: ; TIFR0 - Timer/Counter0 Interrupt Flag register
   584: .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
   585: .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
   586: .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
   587: 
   588: ; TCCR0A - Timer/Counter  Control Register A
   589: .equ	WGM00	= 0	; Waveform Generation Mode
   590: .equ	WGM01	= 1	; Waveform Generation Mode
   591: .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
   592: .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
   593: .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
   594: .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
   595: 
   596: ; TCCR0B - Timer/Counter Control Register B
   597: .equ	CS00	= 0	; Clock Select
   598: .equ	CS01	= 1	; Clock Select
   599: .equ	CS02	= 2	; Clock Select
   600: .equ	WGM02	= 3	; 
   601: .equ	FOC0B	= 6	; Force Output Compare B
   602: .equ	FOC0A	= 7	; Force Output Compare A
   603: 
   604: ; TCNT0 - Timer/Counter0
   605: .equ	TCNT0_0	= 0	; 
   606: .equ	TCNT0_1	= 1	; 
   607: .equ	TCNT0_2	= 2	; 
   608: .equ	TCNT0_3	= 3	; 
   609: .equ	TCNT0_4	= 4	; 
   610: .equ	TCNT0_5	= 5	; 
   611: .equ	TCNT0_6	= 6	; 
   612: .equ	TCNT0_7	= 7	; 
   613: 
   614: ; OCR0A - Timer/Counter0 Output Compare Register
   615: .equ	OCR0A_0	= 0	; 
   616: .equ	OCR0A_1	= 1	; 
   617: .equ	OCR0A_2	= 2	; 
   618: .equ	OCR0A_3	= 3	; 
   619: .equ	OCR0A_4	= 4	; 
   620: .equ	OCR0A_5	= 5	; 
   621: .equ	OCR0A_6	= 6	; 
   622: .equ	OCR0A_7	= 7	; 
   623: 
   624: ; OCR0B - Timer/Counter0 Output Compare Register
   625: .equ	OCR0B_0	= 0	; 
   626: .equ	OCR0B_1	= 1	; 
   627: .equ	OCR0B_2	= 2	; 
   628: .equ	OCR0B_3	= 3	; 
   629: .equ	OCR0B_4	= 4	; 
   630: .equ	OCR0B_5	= 5	; 
   631: .equ	OCR0B_6	= 6	; 
   632: .equ	OCR0B_7	= 7	; 
   633: 
   634: ; GTCCR - General Timer/Counter Control Register
   635: ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
   636: .equ	PSR10	= PSRSYNC	; For compatibility
   637: ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
   638: 
   639: 
   640: ; ***** EXTERNAL_INTERRUPT ***********
   641: ; EICRA - External Interrupt Control Register
   642: .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
   643: .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
   644: .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
   645: .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
   646: 
   647: ; EIMSK - External Interrupt Mask Register
   648: .equ	INT0	= 0	; External Interrupt Request 0 Enable
   649: .equ	INT1	= 1	; External Interrupt Request 1 Enable
   650: 
   651: ; EIFR - External Interrupt Flag Register
   652: .equ	INTF0	= 0	; External Interrupt Flag 0
   653: .equ	INTF1	= 1	; External Interrupt Flag 1
   654: 
   655: ; PCICR - Pin Change Interrupt Control Register
   656: .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
   657: .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
   658: .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
   659: 
   660: ; PCMSK2 - Pin Change Mask Register 2
   661: .equ	PCINT16	= 0	; Pin Change Enable Mask 16
   662: .equ	PCINT17	= 1	; Pin Change Enable Mask 17
   663: .equ	PCINT18	= 2	; Pin Change Enable Mask 18
   664: .equ	PCINT19	= 3	; Pin Change Enable Mask 19
   665: .equ	PCINT20	= 4	; Pin Change Enable Mask 20
   666: .equ	PCINT21	= 5	; Pin Change Enable Mask 21
   667: .equ	PCINT22	= 6	; Pin Change Enable Mask 22
   668: .equ	PCINT23	= 7	; Pin Change Enable Mask 23
   669: 
   670: ; PCMSK1 - Pin Change Mask Register 1
   671: .equ	PCINT8	= 0	; Pin Change Enable Mask 8
   672: .equ	PCINT9	= 1	; Pin Change Enable Mask 9
   673: .equ	PCINT10	= 2	; Pin Change Enable Mask 10
   674: .equ	PCINT11	= 3	; Pin Change Enable Mask 11
   675: .equ	PCINT12	= 4	; Pin Change Enable Mask 12
   676: .equ	PCINT13	= 5	; Pin Change Enable Mask 13
   677: .equ	PCINT14	= 6	; Pin Change Enable Mask 14
   678: 
   679: ; PCMSK0 - Pin Change Mask Register 0
   680: .equ	PCINT0	= 0	; Pin Change Enable Mask 0
   681: .equ	PCINT1	= 1	; Pin Change Enable Mask 1
   682: .equ	PCINT2	= 2	; Pin Change Enable Mask 2
   683: .equ	PCINT3	= 3	; Pin Change Enable Mask 3
   684: .equ	PCINT4	= 4	; Pin Change Enable Mask 4
   685: .equ	PCINT5	= 5	; Pin Change Enable Mask 5
   686: .equ	PCINT6	= 6	; Pin Change Enable Mask 6
   687: .equ	PCINT7	= 7	; Pin Change Enable Mask 7
   688: 
   689: ; PCIFR - Pin Change Interrupt Flag Register
   690: .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
   691: .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
   692: .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
   693: 
   694: 
   695: ; ***** SPI **************************
   696: ; SPDR - SPI Data Register
   697: .equ	SPDR0	= 0	; SPI Data Register bit 0
   698: .equ	SPDR1	= 1	; SPI Data Register bit 1
   699: .equ	SPDR2	= 2	; SPI Data Register bit 2
   700: .equ	SPDR3	= 3	; SPI Data Register bit 3
   701: .equ	SPDR4	= 4	; SPI Data Register bit 4
   702: .equ	SPDR5	= 5	; SPI Data Register bit 5
   703: .equ	SPDR6	= 6	; SPI Data Register bit 6
   704: .equ	SPDR7	= 7	; SPI Data Register bit 7
   705: 
   706: ; SPSR - SPI Status Register
   707: .equ	SPI2X	= 0	; Double SPI Speed Bit
   708: .equ	WCOL	= 6	; Write Collision Flag
   709: .equ	SPIF	= 7	; SPI Interrupt Flag
   710: 
   711: ; SPCR - SPI Control Register
   712: .equ	SPR0	= 0	; SPI Clock Rate Select 0
   713: .equ	SPR1	= 1	; SPI Clock Rate Select 1
   714: .equ	CPHA	= 2	; Clock Phase
   715: .equ	CPOL	= 3	; Clock polarity
   716: .equ	MSTR	= 4	; Master/Slave Select
   717: .equ	DORD	= 5	; Data Order
   718: .equ	SPE	= 6	; SPI Enable
   719: .equ	SPIE	= 7	; SPI Interrupt Enable
   720: 
   721: 
   722: ; ***** CPU **************************
   723: ; SREG - Status Register
   724: .equ	SREG_C	= 0	; Carry Flag
   725: .equ	SREG_Z	= 1	; Zero Flag
   726: .equ	SREG_N	= 2	; Negative Flag
   727: .equ	SREG_V	= 3	; Two's Complement Overflow Flag
   728: .equ	SREG_S	= 4	; Sign Bit
   729: .equ	SREG_H	= 5	; Half Carry Flag
   730: .equ	SREG_T	= 6	; Bit Copy Storage
   731: .equ	SREG_I	= 7	; Global Interrupt Enable
   732: 
   733: ; OSCCAL - Oscillator Calibration Value
   734: .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
   735: .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
   736: .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
   737: .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
   738: .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
   739: .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
   740: .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
   741: .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
   742: 
   743: ; CLKPR - Clock Prescale Register
   744: .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
   745: .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
   746: .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
   747: .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
   748: .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
   749: 
   750: ; SPMCSR - Store Program Memory Control Register
   751: .equ	SELFPRGEN	= 0	; Self Programming Enable
   752: .equ	PGERS	= 1	; Page Erase
   753: .equ	PGWRT	= 2	; Page Write
   754: .equ	BLBSET	= 3	; Boot Lock Bit Set
   755: .equ	RWWSRE	= 4	; Read-While-Write section read enable
   756: .equ	RWWSB	= 6	; Read-While-Write Section Busy
   757: .equ	SPMIE	= 7	; SPM Interrupt Enable
   758: 
   759: ; MCUCR - MCU Control Register
   760: .equ	PUD	= 4	; 
   761: 
   762: ; MCUSR - MCU Status Register
   763: .equ	PORF	= 0	; Power-on reset flag
   764: .equ	EXTRF	= 1	; External Reset Flag
   765: .equ	EXTREF	= EXTRF	; For compatibility
   766: .equ	BORF	= 2	; Brown-out Reset Flag
   767: .equ	WDRF	= 3	; Watchdog Reset Flag
   768: 
   769: ; SMCR - 
   770: .equ	SE	= 0	; 
   771: .equ	SM0	= 1	; 
   772: .equ	SM1	= 2	; 
   773: .equ	SM2	= 3	; 
   774: 
   775: ; GPIOR2 - General Purpose I/O Register 2
   776: .equ	GPIOR20	= 0	; 
   777: .equ	GPIOR21	= 1	; 
   778: .equ	GPIOR22	= 2	; 
   779: .equ	GPIOR23	= 3	; 
   780: .equ	GPIOR24	= 4	; 
   781: .equ	GPIOR25	= 5	; 
   782: .equ	GPIOR26	= 6	; 
   783: .equ	GPIOR27	= 7	; 
   784: 
   785: ; GPIOR1 - General Purpose I/O Register 1
   786: .equ	GPIOR10	= 0	; 
   787: .equ	GPIOR11	= 1	; 
   788: .equ	GPIOR12	= 2	; 
   789: .equ	GPIOR13	= 3	; 
   790: .equ	GPIOR14	= 4	; 
   791: .equ	GPIOR15	= 5	; 
   792: .equ	GPIOR16	= 6	; 
   793: .equ	GPIOR17	= 7	; 
   794: 
   795: ; GPIOR0 - General Purpose I/O Register 0
   796: .equ	GPIOR00	= 0	; 
   797: .equ	GPIOR01	= 1	; 
   798: .equ	GPIOR02	= 2	; 
   799: .equ	GPIOR03	= 3	; 
   800: .equ	GPIOR04	= 4	; 
   801: .equ	GPIOR05	= 5	; 
   802: .equ	GPIOR06	= 6	; 
   803: .equ	GPIOR07	= 7	; 
   804: 
   805: ; PRR - Power Reduction Register
   806: .equ	PRADC	= 0	; Power Reduction ADC
   807: .equ	PRUSART0	= 1	; Power Reduction USART
   808: .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
   809: .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
   810: .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
   811: .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
   812: .equ	PRTWI	= 7	; Power Reduction TWI
   813: 
   814: 
   815: ; ***** WATCHDOG *********************
   816: ; WDTCSR - Watchdog Timer Control Register
   817: .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
   818: .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
   819: .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
   820: .equ	WDE	= 3	; Watch Dog Enable
   821: .equ	WDCE	= 4	; Watchdog Change Enable
   822: .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
   823: .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
   824: .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
   825: 
   826: 
   827: ; ***** EEPROM ***********************
   828: ; EEARL - EEPROM Address Register Low Byte
   829: .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
   830: .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
   831: .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
   832: .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
   833: .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
   834: .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
   835: .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
   836: .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
   837: 
   838: ; EEDR - EEPROM Data Register
   839: .equ	EEDR0	= 0	; EEPROM Data Register bit 0
   840: .equ	EEDR1	= 1	; EEPROM Data Register bit 1
   841: .equ	EEDR2	= 2	; EEPROM Data Register bit 2
   842: .equ	EEDR3	= 3	; EEPROM Data Register bit 3
   843: .equ	EEDR4	= 4	; EEPROM Data Register bit 4
   844: .equ	EEDR5	= 5	; EEPROM Data Register bit 5
   845: .equ	EEDR6	= 6	; EEPROM Data Register bit 6
   846: .equ	EEDR7	= 7	; EEPROM Data Register bit 7
   847: 
   848: ; EECR - EEPROM Control Register
   849: .equ	EERE	= 0	; EEPROM Read Enable
   850: .equ	EEPE	= 1	; EEPROM Write Enable
   851: .equ	EEWE	= EEPE	; For compatibility
   852: .equ	EEMPE	= 2	; EEPROM Master Write Enable
   853: .equ	EEMWE	= EEMPE	; For compatibility
   854: .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
   855: .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
   856: .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
   857: 
   858: 
   859: 
   860: ; ***** LOCKSBITS ********************************************************
   861: .equ	LB1	= 0	; Lockbit
   862: .equ	LB2	= 1	; Lockbit
   863: 
   864: 
   865: ; ***** FUSES ************************************************************
   866: ; LOW fuse bits
   867: .equ	CKSEL0	= 0	; Select Clock Source
   868: .equ	CKSEL1	= 1	; Select Clock Source
   869: .equ	CKSEL2	= 2	; Select Clock Source
   870: .equ	CKSEL3	= 3	; Select Clock Source
   871: .equ	SUT0	= 4	; Select start-up time
   872: .equ	SUT1	= 5	; Select start-up time
   873: .equ	CKOUT	= 6	; Clock output
   874: .equ	CKDIV8	= 7	; Divide clock by 8
   875: 
   876: ; HIGH fuse bits
   877: .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
   878: .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
   879: .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
   880: .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
   881: .equ	WDTON	= 4	; Watchdog Timer Always On
   882: .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
   883: .equ	DWEN	= 6	; debugWIRE Enable
   884: .equ	RSTDISBL	= 7	; External reset disable
   885: 
   886: ; EXTENDED fuse bits
   887: ;.equ	SELFPRGEN	= 0	; Self Programming Enable
   888: 
   889: 
   890: 
   891: ; ***** CPU REGISTER DEFINITIONS *****************************************
   892: .def	XH	= r27
   893: .def	XL	= r26
   894: .def	YH	= r29
   895: .def	YL	= r28
   896: .def	ZH	= r31
   897: .def	ZL	= r30
   898: 
   899: 
   900: 
   901: ; ***** DATA MEMORY DECLARATIONS *****************************************
   902: .equ	FLASHEND	= 0x07ff	; Note: Word address
   903: .equ	IOEND	= 0x00ff
   904: .equ	SRAM_START	= 0x0100
   905: .equ	SRAM_SIZE	= 512
   906: .equ	RAMEND	= 0x02ff
   907: .equ	XRAMEND	= 0x0000
   908: .equ	E2END	= 0x00ff
   909: .equ	EEPROMEND	= 0x00ff
   910: .equ	EEADRBITS	= 8
   911: #pragma AVRPART MEMORY PROG_FLASH 4096
   912: #pragma AVRPART MEMORY EEPROM 256
   913: #pragma AVRPART MEMORY INT_SRAM SIZE 512
   914: #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
   915: 
   916: 
   917: 
   918: ; ***** BOOTLOADER DECLARATIONS ******************************************
   919: .equ	NRWW_START_ADDR	= 0x0
   920: .equ	NRWW_STOP_ADDR	= 0x7ff
   921: .equ	RWW_START_ADDR	= 0x0
   922: .equ	RWW_STOP_ADDR	= 0x0
   923: .equ	PAGESIZE	= 32
   924: 
   925: 
   926: 
   927: ; ***** INTERRUPT VECTORS ************************************************
   928: .equ	INT0addr	= 0x0001	; External Interrupt Request 0
   929: .equ	INT1addr	= 0x0002	; External Interrupt Request 1
   930: .equ	PCI0addr	= 0x0003	; Pin Change Interrupt Request 0
   931: .equ	PCI1addr	= 0x0004	; Pin Change Interrupt Request 0
   932: .equ	PCI2addr	= 0x0005	; Pin Change Interrupt Request 1
   933: .equ	WDTaddr	= 0x0006	; Watchdog Time-out Interrupt
   934: .equ	OC2Aaddr	= 0x0007	; Timer/Counter2 Compare Match A
   935: .equ	OC2Baddr	= 0x0008	; Timer/Counter2 Compare Match A
   936: .equ	OVF2addr	= 0x0009	; Timer/Counter2 Overflow
   937: .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
   938: .equ	OC1Aaddr	= 0x000b	; Timer/Counter1 Compare Match A
   939: .equ	OC1Baddr	= 0x000c	; Timer/Counter1 Compare Match B
   940: .equ	OVF1addr	= 0x000d	; Timer/Counter1 Overflow
   941: .equ	OC0Aaddr	= 0x000e	; TimerCounter0 Compare Match A
   942: .equ	OC0Baddr	= 0x000f	; TimerCounter0 Compare Match B
   943: .equ	OVF0addr	= 0x0010	; Timer/Couner0 Overflow
   944: .equ	SPIaddr	= 0x0011	; SPI Serial Transfer Complete
   945: .equ	URXCaddr	= 0x0012	; USART Rx Complete
   946: .equ	UDREaddr	= 0x0013	; USART, Data Register Empty
   947: .equ	UTXCaddr	= 0x0014	; USART Tx Complete
   948: .equ	ADCCaddr	= 0x0015	; ADC Conversion Complete
   949: .equ	ERDYaddr	= 0x0016	; EEPROM Ready
   950: .equ	ACIaddr	= 0x0017	; Analog Comparator
   951: .equ	TWIaddr	= 0x0018	; Two-wire Serial Interface
   952: .equ	SPMRaddr	= 0x0019	; Store Program Memory Read
   953: 
   954: .equ	INT_VECTORS_SIZE	= 26	; size in words
   955: 
   956: #endif  /* _M48DEF_INC_ */
   957: 
   958: ; ***** END OF FILE ******************************************************
  Continuing file Timberk.asm
     2: 
     3: 	.equ	XTAL = 12000000	
     4: 	.equ	TIMER2_10MS = (10*XTAL)/1024/1000-1
     5: 	.equ	TIMER2_6MS = (6*XTAL)/1024/1000-1
     6: 	.equ	WAIT870ms = (870/10*XTAL)/(1024*254*100)
     7: 	.equ	TimerMinute = 60000/870+1		; 69
     8: 	.equ	Cool20Sec = 20000/870+1			;23
     9: 	.equ	SwingStep = 80
    10: 	.equ	ClOpStep = 200
    11: 	
    12: 	.equ	Sym_d = 0x9B
    13: 	.equ	Sym_t = 0x59
    14: 	.equ	Sym_H = 0xD3
    15: 	.equ	Sym_F = 0x71
    16: 	.equ	Sym_O = 0xFA
    17: 	.equ	Sym_n = 0x13
    18: 	
    19: 	.equ	MINUS_PORT	= PORTC	; "Minus" LED
    20: 	.equ	MINUS_LED	= PC4
    21: 	.equ	MINUS_DDR	= DDRC
    22: 
    23: 	.equ	HEATING_PORT	= PORTC	; "Heating" LED
    24: 	.equ	HEATING_LED	= PC3
    25: 	.equ	HEATING_DDR	= DDRC
    26: 
    27: 	.equ	PLKEY_PIN	= PINC	; "Plus" Key
    28: 	.equ	PLKEY_DDR	= DDRC
    29: 	.equ	PLKEY	= PC2
    30: 
    31: 	.equ	MIKEY_PIN	= PINC	; "Minus" Key
    32: 	.equ	MIKEY_DDR	= DDRC
    33: 	.equ	MIKEY	= PC5
    34: 
    35: 	.equ	STEP_DDR	= DDRB	;Порт Шаговика
    36: 	.equ	STEP_PORT	= PORTB
    37: 	.equ	STEP_OUT	= 0b00111100
    38: 	
    39: 	.equ	RELAY_DDR	= DDRC
    40: 	.equ	RELAY_PORT	= PORTC
    41: 	.equ	Relay1		= PC1
    42: 	.equ	Relay2		= PC0
    43: 	
    44: 	.equ	FAN_DDR		= DDRB
    45: 	.equ	FAN_PORT	= PORTB
    46: 	.equ	FAN			= PB1
    47: 
    48: 	.equ	SEG7_DDR=DDRD
    49: 	.equ	SEG7_PORT=PortD
    50: 	.equ	DS=PD4
    51: 	.equ	SHcp=PD5
    52: 	.equ	STcp=PD3
    53: 	.equ	SEG1=PD0
    54: 	.equ	SEG2=PD2
    55: 	.equ	SEG3=PD1
    56: 	.equ	SegDP=2	;Для вывода точки
    57: 	
    58: 	.def	MenuCNT=R12;Счетчик меню
    59: 	.def	Flague2=R13
    60: 		.equ	JaTimerSt	= 0; Состояние таймера жалюзи (отсчет на включение или выключение).
    61: 
    62: 	.def	CoolTimer=R14
    63: 	.def	JaState=R15
    64: 	.def	Temp=R16
    65: 	.def	Temp2=R17
    66: 	.def	CNT=R18
    67: 	.def	Temp3=R19
    68: 	.def	OutByte=R20
    69: 	.def	OutByte2=R21
    70: 	.def	Flague=R25
    71: 		.equ	Open	= 0; Направление идвижение Жалюзей
    72: 		.equ	Fin44	= 1; Флаг завершения преобразования температуры
    73: 		.equ	Fin44ja	= 2; Флаг 2 завершения преобразования температуры (исрользуется в таймере жалюзи)
    74: 		.equ	Fin44cool	= 3; Флаг 3 завершения преобразования температуры (исрользуется в таймере жалюзи)
    75: 		.equ	JaTimer	= 4; Включение таймера жалюзи
    76: 		.equ	HeatHalf	= 5; Включение отопления (Флаг для жалюзи и режима 1 кВт)
    77: 		.equ	HeatFull	= 6; Отопление 2кВт
    78: 		.equ	CmdSnd	= 7; Команда управления послана
    79: 
    80: 
    81: 					;Адреса ячеек EEPROM
    82: 	.equ	TdH=0	;Tdest
    83: 	.equ	TdL=1
    84: 	.equ	dHH=2	;dThalf
    85: 	.equ	dHL=3
    86: 	.equ	dFH=4	;dTfull
    87: 	.equ	dFL=5
    88: 	.equ	TimOn=6	;минут обдува
    89: 	.equ	TimOff=7;минут в выключеном состоянии
    90: 		
    91: .cseg
    92: .org 0
    93: 000000   C01A  rjmp RESET ; Reset Handler
    94: 000001   C018  rjmp EXT_INT0 ; IRQ0 Handler
    95: 000002   C017  rjmp EXT_INT1 ; IRQ1 Handler
    96: 000003   C016  rjmp PCINT0v ; PCINT0 Handler
    97: 000004   C015  rjmp PCINT1v ; PCINT1 Handler
    98: 000005   C014  rjmp PCINT2v ; PCINT2 Handler
    99: 000006   C013  rjmp WDT ; Watchdog Timer Handler
   100: 000007   C11A  rjmp TIM2_COMPA ; Timer2 Compare A Handler
   101: 000008   C011  rjmp TIM2_COMPB ; Timer2 Compare B Handler
   102: 000009   C010  rjmp TIM2_OVF ; Timer2 Overflow Handler
   103: 00000A   C00F  rjmp TIM1_CAPT ; Timer1 Capture Handler
   104: 00000B   C00E  rjmp TIM1_COMPA ; Timer1 Compare A Handler
   105: 00000C   C00D  rjmp TIM1_COMPB ; Timer1 Compare B Handler
   106: 00000D   C00C  rjmp TIM1_OVF ; Timer1 Overflow Handler
   107: 00000E   C00B  rjmp TIM0_COMPA ; Timer0 Compare A Handler
   108: 00000F   C00A  rjmp TIM0_COMPB ; Timer0 Compare B Handler
   109: 000010   C0FF  rjmp TIM0_OVF ; Timer0 Overflow Handler
   110: 000011   C008  rjmp SPI_STC ; SPI Transfer Complete Handler
   111: 000012   C007  rjmp USART_RXC ; USART, RX Complete Handler
   112: 000013   C006  rjmp USART_UDRE ; USART, UDR Empty Handler
   113: 000014   C005  rjmp USART_TXC ; USART, TX Complete Handler
   114: 000015   C004  rjmp ADC ; ADC Conversion Complete Handler
   115: 000016   C003  rjmp EE_RDY ; EEPROM Ready Handler
   116: 000017   C002  rjmp ANA_COMP ; Analog Comparator Handler
   117: 000018   C001  rjmp TWI ; 2-wire Serial Interface Handler
   118: 000019   C000  rjmp SPM_RDY ; Store Program Memory Ready Handler
   119: 
   120: ;RESET:
   121: EXT_INT0:
   122: EXT_INT1:
   123: PCINT0v:
   124: PCINT1v:
   125: PCINT2v:
   126: WDT:
   127: ;TIM2_COMPA:
   128: TIM2_COMPB:
   129: TIM2_OVF:
   130: TIM1_CAPT:
   131: TIM1_COMPA:
   132: TIM1_COMPB:
   133: TIM1_OVF:
   134: TIM0_COMPA:
   135: TIM0_COMPB:
   136: ;TIM0_OVF:
   137: SPI_STC:
   138: USART_RXC:
   139: USART_UDRE:
   140: USART_TXC:
   141: ADC:
   142: EE_RDY:
   143: ANA_COMP:
   144: TWI:
   145: SPM_RDY:
   146: 00001A   9518  reti
   147: 
   148: RESET:
   149: 00001B   EF0F  ldi Temp,low(RAMEND) ;инициализация стека
   150: 00001C   BF0D  out SPL,R16
   151: 00001D   E002  ldi Temp,high(RAMEND)
   152: 00001E   BF0E  out SPH, R16
   153: 
   154: 00001F   95A8  WDR
   155: 	; Очищаем бит WDRF в регистре MCUSR
   156: 000020   B704  in Temp, MCUSR
   157: 000021   7F07  andi Temp, ~(1<<WDRF)
   158: 000022   BF04  out MCUSR, Temp
   159: 	; Пишем 1 в WDCE and WDE
   160: 000023   9100  LDS Temp, WDTCSR
        000024   0060
   161: 000025   6108  ori Temp, (1<<WDCE) | (1<<WDE)
   162: 000026   9300  STS WDTCSR, Temp
        000027   0060
   163: 	;Записываем новое значение предделителя времени задержки
   164: 000028   E00F  ldi Temp, (0<<WDP3) |(1<<WDP2) | (1<<WDP1) | (1<<WDP0) | (1<<WDE) | (0<<WDIE)	; Предделитель на 2 секунды
   165: 000029   9300  STS WDTCSR, Temp
        00002A   0060
   166: 00002B   95A8  WDR
   167: 
   168: 00002C   B107  IN Temp, HEATING_DDR
   169: 00002D   6108  ORI TEMP, 1<<MINUS_LED|1<<HEATING_LED
   170: 00002E   B907  OUT HEATING_DDR, Temp
   171: 	
   172: 00002F   9A43  SBI PORTC, HEATING_LED
   173: 000030   9843  CBI PORTC, HEATING_LED
   174: 000031   9A43  SBI PORTC, HEATING_LED
   175: 000032   9843  CBI PORTC, HEATING_LED
   176: 	
   177: 000033   B10A  IN Temp, SEG7_DDR 											;настройка порта SEG7
   178: 000034   630F  ORI Temp, 1<<DS|1<<SHcp|1<<STcp|1<<SEG1|1<<SEG2|1<<SEG3
   179: 000035   B90A  out SEG7_DDR,Temp
   180: 	
   181: 000036   B107  IN Temp, RELAY_DDR	;настройка порта Реле
   182: 000037   6003  ORI Temp, 1<<Relay1|1<<Relay2
   183: 000038   B907  OUT RELAY_DDR, Temp
   184: 000039   B108  IN Temp, RELAY_PORT
   185: 00003A   7F0C  ANDI Temp, ~(1<<Relay1|1<<Relay2)
   186: 00003B   B908  OUT RELAY_PORT, Temp
   187: 
   188: 	
   189: 00003C   9A21  SBI FAN_DDR, FAN	;настройка порта Вентилятора
   190: 00003D   9829  CBI FAN_PORT, FAN
   191: 
   192: 	
   193: 00003E   B104  IN Temp, STEP_DDR	;настройка порта шаговика
   194: 00003F   630C  ORI Temp, STEP_OUT
   195: 000040   B904  out STEP_DDR,Temp
   196: 000041   2700  CLR Temp			;Сбрасываем счетчик шаговика
   197: 000042   9300  STS StepCounter1, Temp
        000043   0106
   198: 000044   EC08  LDI Temp, ClOpStep
   199: 000045   9300  STS StepCounter2, Temp
        000046   0107
   200: 	
   201: 	
   202: 000047   E004  LDI Temp, 4			;Состояние Жалюзи
   203: 000048   2EF0  MOV JaState, Temp
   204: 
   205: 000049   E005  LDI Temp, 1<<CS02|0<<CS01|1<<CS00	;Настройка таймера 0
   206: 00004A   BD05  OUT TCCR0B, Temp
   207: 00004B   E001  LDI Temp, 1<<TOIE0
   208: 00004C   9300  STS TIMSK0, Temp
        00004D   006E
   209: 00004E   2700  CLR Temp
   210: 00004F   9300  STS Tim0CNT, Temp
        000050   0105
   211: 	
   212: 000051   E007  LDI Temp, 1<<CS22|1<<CS21|1<<CS20	;Настройка таймера 2
   213: 000052   9300  STS TCCR2B, Temp
        000053   00B1
   214: 		
   215: 000054   2799  CLR Flague
   216: 000055   24DD  CLR Flague2
   217: 	
   218: 000056   E010  LDI R17, TdH
   219: 000057   D44E  RCALL EEPROM_read
   220: 000058   9300  STS TdestH, R16
        000059   0112
   221: 00005A   9513  INC R17
   222: 00005B   D44A  RCALL EEPROM_read
   223: 00005C   9300  STS TdestL, R16
        00005D   0113
   224: 
   225: 00005E   9513  INC R17
   226: 00005F   D446  RCALL EEPROM_read
   227: 000060   9300  STS dTHalfH, R16
        000061   0114
   228: 000062   9513  INC R17
   229: 000063   D442  RCALL EEPROM_read
   230: 000064   9300  STS dTHalfL, R16
        000065   0115
   231: 
   232: 000066   9513  INC R17
   233: 000067   D43E  RCALL EEPROM_read
   234: 000068   9300  STS dTFullH, R16
        000069   0116
   235: 00006A   9513  INC R17
   236: 00006B   D43A  RCALL EEPROM_read
   237: 00006C   9300  STS dTFullL, R16
        00006D   0117
   238: 	
   239: 00006E   9513  INC R17
   240: 00006F   D436  RCALL EEPROM_read
   241: 000070   9300  STS TimerCNTOn, R16
        000071   010A
   242: 000072   9513  INC R17
   243: 000073   D432  RCALL EEPROM_read
   244: 000074   9300  STS TimerCNTOff, R16
        000075   010B
   245: 	
   246: 000076   D356  Rcall RecastT
   247: 000077   D078  Rcall Read1W
   248: 	
   249: 000078   C069  RJMP Start
   250: 
   251: sym_table:
   252: 	; Таблица символов 7SEG индикатора с общим катодом
   253: 	; A = Q5, B = Q7, C = Q1, D = Q3,
   254: 	; E = Q4, F = Q6, G = Q0, dp = Q2,
   255: 
   256: 	.DB 0xFA, 0x82 ; 0, 1
        000079 82FA
   257: 	.DB 0xB9, 0xAB ; 2, 3
        00007A ABB9
   258: 	.DB 0xC3, 0x6B ; 4, 5
        00007B 6BC3
   259: 	.DB 0x7B, 0xA2 ; 6, 7
        00007C A27B
   260: 	.DB 0xFB, 0xEB ; 8, 9
        00007D EBFB
   261: 	.DB 0xF3, 0x5B ; A, b
        00007E 5BF3
   262: 	.DB 0x78, 0x9B ; C, d
        00007F 9B78
   263: 	.DB 0x79, 0x71 ; E, F
        000080 7179
   264: 	
   265: step_table:
   266: 	.DB 0x20, 0x30, 0x10, 0x18, 0x08, 0x0C, 0x04, 0x24
        000081 3020 1810 0C08 2404
   267: 
   268: way_table:
   269: 	.DW JaOpen, JaSwing, JaCool, JaClose, JaOff ;Переходы управления Жалюзи
        000085 030F 0327 032C 033C 0354
   270: 
   271: MenuWays:
   272: 	.DW ShowDTH, SetDTH, ShowDTF, SetDTF, ShowTon, SetTon, ShowTof, SetTof, MenuExit ;меню настройки
        00008A 01D3 01DE 020A 0215 0241 024C 026A 0275
        000092 0293
   273: 	
   274: 	.include "1-wire.asm"
  Including file 1-wire.asm
     1: ;------------------------------------------------------------------------------
     2: ; http://avr-mcu.dxp.pl
     3: ; (c) Radoslaw Kwiecien, 2008
     4: ; 
     5: ; Перевод StarXXX, http://hardisoft.ru, 2009
     6: ;------------------------------------------------------------------------------
     7: 
     8: 
     9: 
    10: ;------------------------------------------------------------------------------
    11: ; Начальные установки для реализации протокола 1-Wire
    12: ;------------------------------------------------------------------------------
    13: .equ	OW_PORT	= PORTD				; Порт МК, где висит 1-Wire
    14: .equ	OW_PIN	= PIND				; Порт МК, где висит 1-Wire
    15: .equ	OW_DDR	= DDRD				; Порт МК, где висит 1-Wire
    16: .equ	OW_DQ	= PD6				; Ножка порта, где висит 1-Wire
    17: 
    18: .def	OWCount = r17				; Счетчик
    19: ;------------------------------------------------------------------------------
    20: 
    21: 
    22: ;.cseg
    23: 
    24: .include 	"wait.asm"			; Подключаем модуль временных задержек
  Including file wait.asm
     1: ;------------------------------------------------------------------------------
     2: ; Busy-wait loops utilities module
     3: ; For F_CPU >= 4MHz
     4: ; http://avr-mcu.dxp.pl
     5: ; (c) Radoslaw Kwiecien, 2008
     6: ; 
     7: ; Перевод StarXXX, http://hardisoft.ru, 2009
     8: ;------------------------------------------------------------------------------
     9: 
    10: ;------------------------------------------------------------------------------
    11: ; Модуль временных задержек
    12: ;
    13: ; !!! Для работы модуля необходимо объявить константу F_CPU равную тактовой частоте в герцах !!!
    14: ;
    15: ; !!! задержки действительны для тактовой частоты >= 4 МГц !!!
    16: 
    17: 
    18: ; задержки приблизительны! Чем больше задержка, тем точнее,
    19: ; т.е. при частоте 4МГц задержка в 1 микросекунду, учитывая время вызова подпрограммы и возврата из нее составит 2,5 микросекунды
    20: ; задержка в 10 микросекунд составит 11,5 микросекунд
    21: ; задержка в 100 мкс на самом деле будет 101,5 мкс
    22: ; тоесть, к каждой задержке добавится 1,5 мкс - это время на вызов подпрограммы и на выход из нее
    23: ;------------------------------------------------------------------------------
    24: 
    25: 
    26: 
    27: .ifndef XTAL
    28: 	.error "XTAL must be defined!"
    29: .endif
    30: 
    31: 
    32: .exit XTAL < 4000000	;XTAL too low, possible wrong delay
    33: 
    34: .equ CYCLES_PER_US=(XTAL/1000000)	; количество такотв на микросекунду
    35: .equ C4PUS=(CYCLES_PER_US/4)		; 4 такта на одну микросекунду
    36: ;.equ DVUS(x)=(C4PUS*x)		; вычисляет величину для указанного времени в микросекундах, которую нужно передать Wait4xCycles чтобы получить желаемую задержку
    37: 
    38: ;--------------------------------------------------------------------------------------------------------------
    39: ; Подпрограмма задержки. В цикле отъедается 4 такта на каждую итерацию, кроме последней. В последней - 3 такта.
    40: ; Итого, для получения нужной задержки в микросекундах надо вызывать эту функцию предварительно
    41: ; обработав параметр макросом DVUS:
    42: ;	ldi    XH, HIGH(DVUS(500))
    43: ; 	ldi    XL, LOW(DVUS(500))
    44: ; 	rcall  Wait4xCycles ; пауза 500 микросекунд
    45: ;--------------------------------------------------------------------------------------------------------------
    46: ; Input : XH:XL - number of CPU cycles to wait (divided by four)
    47: ;--------------------------------------------------------------------------------------------------------------
    48: Wait4xCycles:
    49: 000093   9711  sbiw	XH:XL, 1			; 2 такта
    50: 000094   F7F1  brne	Wait4xCycles		; 1/2
    51: 000095   9508  ret							; 4
    52: 
    53: 
    54: ;------------------------------------------------------------------------------
    55: ; Подпрограмма генерирует необходимую задержку в милисекундах
    56: ; На входе: r16 = количество милисекунд
    57: ;------------------------------------------------------------------------------
    58: ; Input : r16 - number of miliseconds to wait
    59: ;------------------------------------------------------------------------------
    60: WaitMiliseconds:
    61: 000096   930F  push 	r16
    62: WaitMsLoop: 
    63: 000097   E0B5  ldi    XH,HIGH(C4PUS*500)
    64: 000098   EDAC  ldi    XL,LOW(C4PUS*500)
    65: 000099   DFF9  rcall  Wait4xCycles
    66: 00009A   E0B5  ldi    XH,HIGH(C4PUS*500)
    67: 00009B   EDAC  ldi    XL,LOW(C4PUS*500)
    68: 00009C   DFF6  rcall  Wait4xCycles
    69: 00009D   950A  dec    r16
    70: 00009E   F7C1  brne   WaitMsLoop
    71: 00009F   910F  pop    r16
    72: 0000A0   9508  ret
    73: ;------------------------------------------------------------------------------
    74: ; End of file
    75: ;------------------------------------------------------------------------------
  Continuing file 1-wire.asm
    25: 
    26: 
    27: ;------------------------------------------------------------------------------
    28: ; СБРОС
    29: ; Каждая передача по протоколу 1-Wire начинается с сигнала Reset.
    30: ; После вызова этой процедуры в флаге Т регистра SGER содержится бит 
    31: ; присутствия: 1 - если на шине нет устройств, 0 - если есть
    32: ;------------------------------------------------------------------------------
    33: ; Output : T - presence bit
    34: ;------------------------------------------------------------------------------
    35: OWReset:
    36: 0000A1   985E  cbi		OW_PORT,OW_DQ		; Выводим в порт 0
    37: 0000A2   9A56  sbi		OW_DDR,OW_DQ		; Переключаем порт на вывод
    38: 
    39: 0000A3   E0B5  ldi		XH, HIGH(C4PUS*482)	; Ждем 470 микросекунд при придавленной в 0 линии. Это и есть импульс сброса.
    40: 0000A4   EAA6  ldi		XL, LOW(C4PUS*482)
    41: 0000A5   DFED  rcall		Wait4xCycles
    42: 	
    43: 0000A6   9856  cbi		OW_DDR,OW_DQ		; Переключаем порт на ввод
    44: 
    45: 0000A7   E0B0  ldi		XH, HIGH(C4PUS*70)	; выжидаем 70 мкс (необходимое минимальное время реакции устройств на сброс)
    46: 0000A8   EDA2  ldi		XL, LOW(C4PUS*70)
    47: 0000A9   DFE9  rcall		Wait4xCycles
    48: 
    49: 0000AA   9468  set							; Устанавливаем флаг Т в 1
    50: 0000AB   9B4E  sbis	OW_PIN,OW_DQ		; Если на линии после паузы осталась 1, значит устройств 1-Wire на ней нет. Пропускаем след. команду
    51: 0000AC   94E8  clt							; Линия была в 0 - значит на ней кто-то есть, и ответил нам импульсом PRESENCE
    52: 
    53: 0000AD   E0B2  ldi		XH, HIGH(C4PUS*240)	; Пауза 240 мкс после сброса
    54: 0000AE   EDA0  ldi		XL, LOW(C4PUS*240)
    55: 0000AF   DFE3  rcall		Wait4xCycles
    56: 
    57: 0000B0   9508  ret
    58: 
    59: 
    60: ;------------------------------------------------------------------------------
    61: ; ОТПРАВКА 1 БИТА
    62: ; Эта процедура отправляет 1 бит в линию 1-Wire.
    63: ; Отправляемый бит должен быть помещен в флаг С статусного регистра
    64: ;------------------------------------------------------------------------------
    65: ; Input : C - bit to write
    66: ;------------------------------------------------------------------------------
    67: OWWriteBit:
    68: 0000B1   F418  brcc	OWWriteZero			; Если флаг С = 0, то переход на OWWriteZero
    69: 0000B2   E0B0  ldi		XH, HIGH(C4PUS*1)	; Для посылки 1 линию нужно придавить в 0 всего на 1 мкс
    70: 0000B3   E0A3  ldi		XL, LOW(C4PUS*1)
    71: 0000B4   C002  rjmp	OWWriteOne			; переходим к отправке
    72: OWWriteZero:	
    73: 0000B5   E0B1  ldi		XH, HIGH(C4PUS*120)	; Для посылки 0 линию нужно придавить в 0 на 120 мкс
    74: 0000B6   E6A8  ldi		XL, LOW(C4PUS*120)
    75: OWWriteOne:
    76: 0000B7   9A56  sbi		OW_DDR, OW_DQ		; Переводим порт на выход, а там уже был 0, соответственно и линия придавливается в 0
    77: 0000B8   DFDA  rcall	Wait4xCycles		; ждем
    78: 0000B9   9856  cbi		OW_DDR, OW_DQ		; Переводим порт на вход
    79: 	
    80: 0000BA   E0B0  ldi		XH, HIGH(C4PUS*60)	; Должна быть пауза между таймслотами, вообще-то от 1 мкс, но здесь сделали 60 мкс
    81: 0000BB   EBA4  ldi		XL, LOW(C4PUS*60)
    82: 0000BC   DFD6  rcall	Wait4xCycles
    83: 0000BD   9508  ret
    84: 
    85: 
    86: ;------------------------------------------------------------------------------
    87: ; ОТПРАВКА 1 БАЙТА
    88: ; Эта процедура отправляет 1 байт в линию 1-Wire.
    89: ; Отправляемый байт должен быть помещен в регистр r16
    90: ;------------------------------------------------------------------------------
    91: ; Input : r16 - byte to write
    92: ;------------------------------------------------------------------------------
    93: OWWriteByte:
    94: 0000BE   931F  push	OWCount			; Сохраняем регистр счетчика
    95: 0000BF   E010  ldi		OWCount,0		; Взводим в нём нолик
    96: 
    97: OWWriteLoop:				
    98: 0000C0   9507  ror		r16				; Сдвигаем байт вправо через флаг C
    99: 0000C1   DFEF  rcall	OWWriteBit		; отправляем в линию
   100: 0000C2   9513  inc		OWCount			; увеличиваем счетчик
   101: 0000C3   3018  cpi		OWCount,8		; проверяем на 8
   102: 0000C4   F7D9  brne	OWWriteLoop		; если меньше - следующий бит
   103: 0000C5   911F  pop		OWCount			; восстанавливаем регистр-счетчик
   104: 0000C6   9508  ret
   105: 
   106: 
   107: 
   108: ;------------------------------------------------------------------------------
   109: ; ЧТЕНИЕ 1 БИТА
   110: ; Эта процедура читает 1 бит из линии 1-Wire.
   111: ; Принятый бит помещается в флаг С статусного регистра
   112: ;------------------------------------------------------------------------------
   113: ; Output : C - bit from slave
   114: ;------------------------------------------------------------------------------
   115: OWReadBit:
   116: 0000C7   E0B0  ldi		XH, HIGH(C4PUS*1)	; Придавливаем линию в 0 на 1 мкс
   117: 0000C8   E0A3  ldi		XL, LOW(C4PUS*1)
   118: 0000C9   9A56  sbi		OW_DDR, OW_DQ
   119: 0000CA   DFC8  rcall	Wait4xCycles
   120: 
   121: 0000CB   9856  cbi		OW_DDR, OW_DQ		; Переводим порт на чтение
   122: 0000CC   E0B0  ldi		XH, HIGH(C4PUS*5)	; ждем 5 мкс
   123: 0000CD   E0AF  ldi		XL, LOW(C4PUS*5)
   124: 0000CE   DFC4  rcall	Wait4xCycles
   125: 
   126: 0000CF   94E8  clt							; Сбрасываем флаг Т
   127: 0000D0   994E  sbic	OW_PIN,OW_DQ		; Если на линии 0 - то пропускаем следующую команду
   128: 0000D1   9468  set
   129: 
   130: 								; Итак, сейчас в регистре Т полученный бит
   131: 
   132: 0000D2   E0B0  ldi		XH, HIGH(C4PUS*50)	; выжидаем 50 мкс для окончания таймслота
   133: 0000D3   E9A6  ldi		XL, LOW(C4PUS*50)
   134: 0000D4   DFBE  rcall	Wait4xCycles
   135: 								; переносим флаг Т в флаг С
   136: 0000D5   9408  sec
   137: 0000D6   F00E  brts	OWReadBitEnd
   138: 0000D7   9488  clc
   139: 
   140: OWReadBitEnd:
   141: 0000D8   9508  ret
   142: 
   143: 
   144: 
   145: ;------------------------------------------------------------------------------
   146: ; ЧТЕНИЕ 1 БАЙТА
   147: ; Эта процедура читает 1 байт из линии 1-Wire.
   148: ; Принятый байт помещается регистр r16
   149: ;------------------------------------------------------------------------------
   150: ; Output : r16 - byte from slave
   151: ;------------------------------------------------------------------------------
   152: OWReadByte:
   153: 0000D9   931F  push	OWCount			; Сохраняем регистр-счетчик
   154: 0000DA   E010  ldi		OWCount,0		; и обнуляем его
   155: OWReadLoop:
   156: 0000DB   DFEB  rcall	OWReadBit		; читаем бит
   157: 0000DC   9507  ror		r16				; запихиваем его в r16 сдвигом вправо из флага С
   158: 0000DD   9513  inc		OWCount			; увеличиваем счетчик
   159: 0000DE   3018  cpi		OWCount,8		; уже 8?
   160: 0000DF   F7D9  brne	OWReadLoop		; нет - продолжаем считывать
   161: 0000E0   911F  pop		OWCount			; восстанавливаем регистр-счетчик
   162: 0000E1   9508  ret
   163: ;------------------------------------------------------------------------------
   164: ;
   165: ;------------------------------------------------------------------------------
   166: 
   167: 
   168: 
   169: 
   170: 
   171: ;.include 	"1-Wire Search.asm"		; Подключаем модуль поиска устройств на шине 1-Wire
   172: 
   173: 
   174: 
   175: 
  Continuing file Timberk.asm
   275: 	
   276: 
   277: Start:
   278: 0000E2   95A8  WDR
   279: 0000E3   9478  SEI
   280: 0000E4   9935  SBIC MIKEY_PIN,MIKEY
   281: 0000E5   D070  RCALL PresMinus
   282: 
   283: 0000E6   9932  SBIC PLKEY_PIN,PLKEY
   284: 0000E7   D06E  RCALL PresPlus
   285: 
   286: 0000E8   FD91  SBRC Flague,Fin44
   287: 0000E9   D006  Rcall Read1W
   288: 
   289: 0000EA   D335  Rcall TermToSeg
   290: 0000EB   D1AC  RCALL TermControl
   291: 0000EC   D1D6  RCALL JaControl
   292: 0000ED   D1C3  RCALL HeatControl
   293: 0000EE   0000  nop
   294: 0000EF   CFF2  RJMP Start
   295: 
   296: 
   297: ;|----------------------------------------------------------------------
   298: ;|----------------------------------------------------------------------
   299: Read1W:
   300: 0000F0   94F8  CLI
   301: 0000F1   7F9D  ANDI Flague, ~(1<<Fin44)
   302: 0000F2   DFAE  rcall OWReset
   303: 0000F3   EC0C  ldi R16,0xCC
   304: 0000F4   DFC9  rcall OWWriteByte
   305: 0000F5   EB0E  ldi R16,0xBE
   306: 0000F6   DFC7  rcall OWWriteByte
   307: 0000F7   2700  clr R16
   308: 0000F8   DFE0  rcall OWReadByte
   309: 0000F9   2F60  MOV R22,R16
   310: 0000FA   DFDE  rcall OWReadByte
   311: 0000FB   2F70  MOV R23,R16
   312: 0000FC   DFDC  rcall OWReadByte
   313: 0000FD   DFA3  rcall OWReset
   314: 0000FE   E0C3  LDI YL,Low(RAWTerm)
   315: 0000FF   E0D1  LDI YH,High(RAWTerm)  ;загрузка начального адреса массива
   316: 000100   2300  TST R16
   317: 000101   F019  BREQ ReadNt1W
   318: 000102   9369  ST Y+,R22
   319: 000103   8378  ST Y,R23
   320: 000104   C002  RJMP ReadOK
   321: 
   322: ReadNt1W:	;записываем в R22:R23 Старые Значения
   323: 000105   9169  LD	R22, Y+
   324: 000106   8178  LD	R23, Y
   325: ReadOK:
   326: 000107   D34F  Rcall t_convert
   327: 000108   D370  RCALL TermTo7SEG
   328: 000109   DF97  rcall OWReset
   329: 00010A   EC0C  ldi R16,0xCC
   330: 00010B   DFB2  rcall OWWriteByte
   331: 00010C   E404  ldi R16,0x44
   332: 00010D   DFB0  rcall OWWriteByte
   333: 00010E   9478  SEI
   334: 00010F   9508  ret
   335: ;|----------------------------------------------------------------------
   336: ;|----------------------------------------------------------------------
   337: 
   338: ;|----------------------------------------------------------------------
   339: ;|Таймер 0 переполнение. Выжидание времени конвертации температуры
   340: ;|----------------------------------------------------------------------
   341: TIM0_OVF:
   342: 000110   94F8  CLI
   343: 000111   930F  PUSH Temp
   344: 000112   B70F  IN Temp, SREG
   345: 000113   930F  Push Temp
   346: 000114   9100  LDS Temp, Tim0CNT
        000115   0105
   347: 000116   9503  INC Temp
   348: 000117   3208  CPI Temp, WAIT870ms
   349: 000118   F010  BRLO TIM0_OVF_EXIT
   350: 000119   2700  CLR Temp
   351: 00011A   609E  ORI Flague, 1<<Fin44|1<<Fin44ja|1<<Fin44cool
   352: 
   353: 	TIM0_OVF_EXIT:
   354: 00011B   9300  STS Tim0CNT, Temp
        00011C   0105
   355: 00011D   910F  POP Temp
   356: 00011E   BF0F  OUT SREG, Temp
   357: 00011F   910F  POP Temp
   358: 000120   9478  SEI
   359: 000121   9518  reti
   360: ;|----------------------------------------------------------------------
   361: ;|----------------------------------------------------------------------
   362: 
   363: ;|----------------------------------------------------------------------
   364: ;| Таймер 2, Компаратор А. Управление Жалюзи
   365: ;|----------------------------------------------------------------------
   366: TIM2_COMPA:
   367: 000122   94F8  CLI
   368: 000123   930F  PUSH Temp
   369: 000124   B70F  IN Temp, SREG
   370: 000125   930F  Push Temp
   371: 000126   93EF  PUSH ZL
   372: 000127   93FF  PUSH ZH
   373: 000128   2700  CLR Temp				; Сбросили таймер
   374: 000129   9300  STS TCNT2, Temp
        00012A   00B2
   375: 
   376: 00012B   9100  LDS Temp, StepCounter1
        00012C   0106
   377: 	; Загрузить адрес таблицы символов
   378: 00012D   E0E2  LDI ZL, LOW (2*step_table)
   379: 00012E   E0F1  LDI ZH, HIGH(2*step_table)
   380: 	; Найти нужный символ
   381: 00012F   0FE0  ADD ZL, Temp
   382: 	; Загрузить данные символа в R0
   383: 000130   95C8  LPM
   384: 000131   2DF0  MOV ZH, R0
   385: 000132   B1E5  IN ZL, STEP_PORT
   386: 000133   7CE3  ANDI ZL, ~(STEP_OUT)
   387: 000134   2BEF  OR ZL, ZH
   388: 000135   B9E5  OUT STEP_PORT, ZL
   389: 000136   FF90  SBRS Flague, Open
   390: 000137   C010  RJMP SCINC
   391: 000138   950A  DEC Temp		;Открываем жалюзи
   392: 000139   FD07  SBRC Temp,7 ;Если счетчик Меньше 0, устанавливаем его в 7
   393: 00013A   D003  RCALL ReadSC2
   394: 00013B   FD07  SBRC Temp,7
   395: 00013C   E007  LDI Temp, 7
   396: 00013D   C00F  RJMP SVSC
   397: 
   398: 	;|---------------------
   399: 	ReadSC2:
   400: 00013E   91E0  LDS ZL, StepCounter2
        00013F   0107
   401: 000140   95EA  DEC ZL
   402: 000141   F419  BRNE SC2NZ
   403: 000142   E5E0  LDI ZL, SwingStep
   404: 000143   E0F1  LDI ZH, 1<<Open		;Меняем направление движения жалюзи
   405: 000144   279F  EOR Flague, ZH
   406: 	SC2NZ:
   407: 000145   93E0  STS StepCounter2, ZL	
        000146   0107
   408: 000147   9508  RET
   409: 	;|---------------------
   410: 
   411: SCINC:		;Закрываем жалюзи
   412: 000148   9503  INC Temp
   413: 000149   FD03  SBRC Temp,3 ;Если счетчик больше 7, сбрасываем его
   414: 00014A   DFF3  RCALL ReadSC2
   415: 00014B   FD03  SBRC Temp,3
   416: 00014C   2700  CLR Temp
   417: 
   418: SVSC:
   419: 00014D   9300  STS StepCounter1, Temp	;Сохранили счетчик
        00014E   0106
   420: 00014F   91FF  POP ZH
   421: 000150   91EF  POP ZL
   422: 000151   910F  POP Temp
   423: 000152   BF0F  OUT SREG, Temp
   424: 000153   910F  POP Temp
   425: 000154   9478  SEI
   426: 000155   9518  RETI
   427: ;|----------------------------------------------------------------------
   428: ;| Выход из прерывания
   429: ;|----------------------------------------------------------------------
   430: 
   431: 
   432: ;|----------------------------------------------------------------------
   433: ;| Настройка Tdest
   434: ;|----------------------------------------------------------------------
   435: PresMinus:
   436: PresPlus:
   437: 000156   D034  Rcall Delay
   438: 000157   D033  Rcall Delay
   439: 000158   B106  IN Temp, MIKEY_PIN
   440: 000159   7204  ANDI Temp, 1<<MIKEY|1<<PLKEY
   441: 00015A   3204  CPI Temp, 1<<MIKEY|1<<PLKEY
   442: 00015B   F1D1  BREQ Setting
   443: 
   444: 00015C   9170  LDS R23, TdestH
        00015D   0112
   445: 00015E   9160  LDS R22, TdestL
        00015F   0113
   446: 000160   9370  STS IncDecH, R23
        000161   010C
   447: 000162   9360  STS IncDecL, R22
        000163   010D
   448: DerLOOP:
   449: 000164   D314  Rcall TermTo7SEG
   450: 000165   D025  Rcall Delay
   451: 
   452: 000166   C00A  Rjmp Delay2
   453: 
   454: PRINC:
   455: 000167   9468  SET
   456: 000168   D205  RCALL INCDEC
   457: 000169   C002  RJMP PRDO
   458: 
   459: PRDEC:
   460: 00016A   94E8  CLT
   461: 00016B   D202  RCALL INCDEC
   462: PRDO:
   463: 00016C   9170  LDS R23, IncDecH
        00016D   010C
   464: 00016E   9160  LDS R22, IncDecL
        00016F   010D
   465: 000170   CFF3  RJMP DerLOOP
   466: 
   467: 
   468: 000171   E000  LDI R16,0;задержка (0,0,24 - 0,5 секунды)
   469: 000172   2E30  MOV R3, R16
   470: 000173   EC08  LDI R16,200
   471: 000174   2E40  MOV R4, R16
   472: 	Loop2:
   473: 000175   D2AA  Rcall TermToSeg
   474: 000176   9935  SBIC MIKEY_PIN,MIKEY
   475: 000177   CFF2  RJMP PRDEC
   476: 
   477: 000178   9932  SBIC PLKEY_PIN,PLKEY
   478: 000179   CFED  RJMP PRINC
   479: 00017A   95A8  WDR
   480: 00017B   943A  dec R3
   481: 00017C   F7C1  brne Loop2
   482: 00017D   944A  dec R4
   483: 00017E   F7B1  brne Loop2
   484: 00017F   9370  STS TdestH, R23
        000180   0112
   485: 000181   9360  STS TdestL, R22
        000182   0113
   486: 000183   E010  LDI R17, TdH
   487: 000184   2F07  MOV R16, R23
   488: 000185   D315  RCALL EEPROM_write
   489: 000186   E011  LDI R17, TdL
   490: 000187   2F06  MOV R16, R22
   491: 000188   D312  RCALL EEPROM_write
   492: 000189   D243  Rcall RecastT
   493: 00018A   9508  ret
   494: 
   495: 00018B   E000  LDI R16,0;задержка (0,0,24 - 0,5 секунды)
   496: 00018C   2E30  MOV R3, R16
   497: 00018D   E008  LDI R16,8
   498: 00018E   2E40  MOV R4, R16
   499: 	Loop1:
   500: 00018F   D290  Rcall TermToSeg
   501: 000190   943A  dec R3
   502: 000191   F7E9  brne Loop1
   503: 000192   95A8  WDR
   504: 000193   944A  dec R4
   505: 000194   F7D1  brne Loop1
   506: 000195   9508  ret
   507: ;|}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
   508: ;| Настройка Остальных параметров
   509: ;|}}}}}}}}}}}}}}}}}}}}}}}}}}}}}	
   510: Setting:
   511: 000196   24CC  CLR MenuCNT
   512: 000197   2D0C  MOV Temp, MenuCNT
   513: 000198   0F00  LSL Temp
   514: 000199   E1E4  LDI	ZL, low(MenuWays*2)		; Загружаем адрес нашей таблицы.
   515: 00019A   E0F1  LDI	ZH, High(MenuWays*2)
   516: 00019B   2711  CLR	Temp2
   517: 00019C   0FE0  ADD	ZL, Temp
   518: 00019D   1FF1  ADC	ZH, Temp2
   519: 00019E   9105  LPM	Temp,Z+
   520: 00019F   9114  LPM	Temp2,Z
   521: 0001A0   2FF1  MOV ZH, Temp2
   522: 0001A1   2FE0  MOV ZL, Temp
   523: 0001A2   9409  IJMP
   524: 
   525: MenuPressed:
   526: 0001A3   2D0C  MOV Temp, MenuCNT
   527: 0001A4   7001  ANDI Temp, 1<<0
   528: 0001A5   F011  BREQ ADD2
   529: 0001A6   E031  LDI Temp3, 1<<0
   530: 0001A7   CFEF  RJMP MenuRoute
   531: ADD2:
   532: 0001A8   94C3  INC MenuCNT
   533: 0001A9   94C3  INC MenuCNT
   534: 0001AA   CFEC  RJMP MenuRoute
   535: 
   536: 
   537: 0001AB   2D0C  MOV Temp, MenuCNT
   538: 0001AC   7001  ANDI Temp, 1<<0
   539: 0001AD   F011  BREQ MenuSet
   540: 0001AE   E032  LDI Temp3, 1<<1
   541: 0001AF   CFE7  RJMP MenuRoute
   542: 0001B0   94C3  INC MenuCNT
   543: 0001B1   2733  CLR Temp3
   544: 0001B2   CFE4  RJMP MenuRoute
   545: 	
   546: 0001B3   2D0C  MOV Temp, MenuCNT
   547: 0001B4   7001  ANDI Temp, 1<<0
   548: 0001B5   F011  BREQ MenuToExit
   549: 0001B6   E033  LDI Temp3, 1<<0|1<<1
   550: 0001B7   CFDF  RJMP MenuRoute
   551: 0001B8   E008  LDI Temp, 8
   552: 0001B9   2EC0  MOV MenuCNT, Temp
   553: 0001BA   CFDC  RJMP MenuRoute
   554: 
   555: 0001BB   E000  LDI R16,0x00      ;задержка (0:6 - 0,2 секунды)
   556: 0001BC   2E30  MOV R3, R16
   557: 0001BD   E006  LDI R16,0x06
   558: 0001BE   2E40  MOV R4, R16
   559: 0001BF   D260  rcall TermToSeg
   560: 0001C0   943A  dec R3
   561: 0001C1   F7E9  brne Loop3
   562: 0001C2   944A  dec R4
   563: 0001C3   F7D9  brne Loop3
   564: 0001C4   E000  LDI R16,0x00      ;задержка (0:6 - 0,2 секунды)
   565: 0001C5   2E30  MOV R3, R16
   566: 0001C6   E708  LDI R16,120
   567: 0001C7   2E40  MOV R4, R16
   568: 0001C8   D257  rcall TermToSeg
   569: 0001C9   943A  dec R3
   570: 0001CA   F7E9  brne Loop4
   571: 0001CB   95A8  WDR
   572: 0001CC   9932  SBIC PLKEY_PIN, PLKEY
   573: 0001CD   CFD5  RJMP MenuPressed
   574: 0001CE   9935  SBIC MIKEY_PIN, MIKEY
   575: 0001CF   CFDB  RJMP OkPressed
   576: 0001D0   944A  dec R4
   577: 0001D1   F7B1  brne Loop4
   578: 
   579: 0001D2   CFE0  RJMP NoPressed
   580: 
   581: ;^^^^^^^^^^^^^^^^^
   582: 
   583: ShowDTH:
   584: 0001D3   E90B  LDI Temp, Sym_d
   585: 0001D4   9300  STS TermToOut, Temp
        0001D5   0100
   586: 0001D6   E509  LDI Temp, Sym_t
   587: 0001D7   9300  STS TermToOut+1, Temp
        0001D8   0101
   588: 0001D9   ED03  LDI Temp, Sym_H
   589: 0001DA   9300  STS TermToOut+2, Temp
        0001DB   0102
   590: 0001DC   DFAE  RCALL Delay
   591: 0001DD   CFDD  RJMP Indication
   592: ;^^^^^^^^^^^^^^^^^
   593: SetDTH:
   594: 0001DE   2333  TST Temp3
   595: 0001DF   F469  BRNE ToSetDTH
   596: 0001E0   9100  LDS Temp, dTHalfH
        0001E1   0114
   597: 0001E2   9300  STS IncDecH, Temp
        0001E3   010C
   598: 0001E4   2F70  MOV R23, Temp
   599: 0001E5   9100  LDS Temp, dTHalfL
        0001E6   0115
   600: 0001E7   9300  STS IncDecL, Temp
        0001E8   010D
   601: 0001E9   2F60  MOV R22, Temp
   602: 0001EA   D28E  Rcall TermTo7SEG
   603: 0001EB   DF9F  Rcall Delay
   604: 0001EC   CFCE  RJMP Indication
   605: 	
   606: ToSetDTH:
   607: 0001ED   9468  SET
   608: 0001EE   3033  CPI Temp3, 1<<0|1<<1
   609: 0001EF   F079  BREQ SetDTHwr
   610: 0001F0   3031  CPI Temp3, 1<<0
   611: 0001F1   F009  BREQ SetDTHinc
   612: 0001F2   94E8  CLT	;Декремент
   613: 
   614: SetDTHinc:
   615: 0001F3   D17A  RCALL INCDEC
   616: 0001F4   9170  LDS R23, IncDecH
        0001F5   010C
   617: 0001F6   9160  LDS R22, IncDecL
        0001F7   010D
   618: 0001F8   FF77  SBRS R23, 7
   619: 0001F9   C002  RJMP SetDTHincOK
   620: 0001FA   9468  SET
   621: 0001FB   CFF7  RJMP SetDTHinc
   622: 	
   623: SetDTHincOK:	
   624: 0001FC   D27C  Rcall TermTo7SEG
   625: 0001FD   DF8D  Rcall Delay
   626: 0001FE   CFBC  RJMP Indication
   627: SetDTHwr:
   628: 0001FF   9370  STS dTHalfH, R23
        000200   0114
   629: 000201   9360  STS dTHalfL, R22
        000202   0115
   630: 000203   E012  LDI R17, dHH
   631: 000204   2F07  MOV R16, R23
   632: 000205   D295  Rcall EEPROM_write
   633: 000206   E013  LDI R17, dHL
   634: 000207   2F06  MOV R16, R22
   635: 000208   D292  Rcall EEPROM_write
   636: 000209   94C3  INC MenuCNT
   637: 		
   638: ;^^^^^^^^^^^^^^^^^
   639: ShowDTF:
   640: 00020A   E90B  LDI Temp, Sym_d
   641: 00020B   9300  STS TermToOut, Temp
        00020C   0100
   642: 00020D   E509  LDI Temp, Sym_t
   643: 00020E   9300  STS TermToOut+1, Temp
        00020F   0101
   644: 000210   E701  LDI Temp, Sym_F
   645: 000211   9300  STS TermToOut+2, Temp
        000212   0102
   646: 000213   DF77  RCALL Delay
   647: 000214   CFA6  RJMP Indication
   648: 
   649: ;^^^^^^^^^^^^^^^^^
   650: SetDTF:
   651: 000215   2333  TST Temp3
   652: 000216   F469  BRNE ToSetDTF
   653: 000217   9100  LDS Temp, dTFullH
        000218   0116
   654: 000219   9300  STS IncDecH, Temp
        00021A   010C
   655: 00021B   2F70  MOV R23, Temp
   656: 00021C   9100  LDS Temp, dTFullL
        00021D   0117
   657: 00021E   9300  STS IncDecL, Temp
        00021F   010D
   658: 000220   2F60  MOV R22, Temp
   659: 000221   D257  Rcall TermTo7SEG
   660: 000222   DF68  Rcall Delay
   661: 000223   CF97  RJMP Indication
   662: 	
   663: ToSetDTF:
   664: 000224   9468  SET
   665: 000225   3033  CPI Temp3, 1<<0|1<<1
   666: 000226   F079  BREQ SetDTFwr
   667: 000227   3031  CPI Temp3, 1<<0
   668: 000228   F009  BREQ SetDTFinc
   669: 000229   94E8  CLT	;Декремент
   670: 
   671: SetDTFinc:
   672: 00022A   D143  RCALL INCDEC
   673: 00022B   9170  LDS R23, IncDecH
        00022C   010C
   674: 00022D   9160  LDS R22, IncDecL
        00022E   010D
   675: 00022F   FF77  SBRS R23, 7
   676: 000230   C002  RJMP SetDTFincOK
   677: 000231   9468  SET
   678: 000232   CFF7  RJMP SetDTFinc
   679: 	
   680: SetDTFincOK:
   681: 000233   D245  Rcall TermTo7SEG
   682: 000234   DF56  Rcall Delay
   683: 000235   CF85  RJMP Indication
   684: SetDTFwr:
   685: 000236   9370  STS dTFullH, R23
        000237   0116
   686: 000238   9360  STS dTFullL, R22
        000239   0117
   687: 00023A   E014  LDI R17, dFH
   688: 00023B   2F07  MOV R16, R23
   689: 00023C   D25E  Rcall EEPROM_write
   690: 00023D   E015  LDI R17, dFL
   691: 00023E   2F06  MOV R16, R22
   692: 00023F   D25B  Rcall EEPROM_write
   693: 000240   94C3  INC MenuCNT
   694: ;^^^^^^^^^^^^^^^^^
   695: ShowTon:
   696: 000241   E509  LDI Temp, Sym_t
   697: 000242   9300  STS TermToOut, Temp
        000243   0100
   698: 000244   EF0A  LDI Temp, Sym_O
   699: 000245   9300  STS TermToOut+1, Temp
        000246   0101
   700: 000247   E103  LDI Temp, Sym_n
   701: 000248   9300  STS TermToOut+2, Temp
        000249   0102
   702: 00024A   DF40  RCALL Delay
   703: 00024B   CF6F  RJMP Indication
   704: ;^^^^^^^^^^^^^^^^^
   705: SetTon:
   706: 00024C   2333  TST Temp3
   707: 00024D   F431  BRNE ToSetTon
   708: 00024E   2766  CLR R22
   709: 00024F   9170  LDS R23, TimerCNTOn
        000250   010A
   710: 000251   D227  Rcall TermTo7SEG
   711: 000252   DF38  Rcall Delay
   712: 000253   CF67  RJMP Indication
   713: 
   714: ToSetTon:
   715: 000254   3033  CPI Temp3, 1<<0|1<<1
   716: 000255   F071  BREQ SetTonWr
   717: 000256   3031  CPI Temp3, 1<<0
   718: 000257   F031  BREQ SetTonInc
   719: 000258   957A  DEC R23	;Декремент
   720: 000259   FD77  SBRC R23, 7
   721: 00025A   2777  CLR R23
   722: 00025B   D21D  Rcall TermTo7SEG
   723: 00025C   DF2E  Rcall Delay
   724: 00025D   CF5D  RJMP Indication
   725: SetTonInc:
   726: 00025E   9573  INC R23	;Инкремент
   727: 00025F   FD77  SBRC R23, 7
   728: 000260   957A  DEC R23
   729: 000261   D217  Rcall TermTo7SEG
   730: 000262   DF28  Rcall Delay
   731: 000263   CF57  RJMP Indication
   732: SetTonWr:
   733: 000264   9370  STS TimerCNTOn, R23
        000265   010A
   734: 000266   E016  LDI R17, TimOn
   735: 000267   2F07  MOV R16, R23
   736: 000268   D232  Rcall EEPROM_write
   737: 000269   94C3  INC MenuCNT
   738: ;^^^^^^^^^^^^^^^^^
   739: ShowTof:
   740: 00026A   E509  LDI Temp, Sym_t
   741: 00026B   9300  STS TermToOut, Temp
        00026C   0100
   742: 00026D   EF0A  LDI Temp, Sym_O
   743: 00026E   9300  STS TermToOut+1, Temp
        00026F   0101
   744: 000270   E701  LDI Temp, Sym_F
   745: 000271   9300  STS TermToOut+2, Temp
        000272   0102
   746: 000273   DF17  RCALL Delay
   747: 000274   CF46  RJMP Indication
   748: 
   749: ;^^^^^^^^^^^^^^^^^
   750: SetTof:
   751: 000275   2333  TST Temp3
   752: 000276   F431  BRNE ToSetTof
   753: 000277   2766  CLR R22
   754: 000278   9170  LDS R23, TimerCNTOff
        000279   010B
   755: 00027A   D1FE  Rcall TermTo7SEG
   756: 00027B   DF0F  Rcall Delay
   757: 00027C   CF3E  RJMP Indication
   758: 
   759: ToSetTof:
   760: 00027D   3033  CPI Temp3, 1<<0|1<<1
   761: 00027E   F071  BREQ SetTofWr
   762: 00027F   3031  CPI Temp3, 1<<0
   763: 000280   F031  BREQ SetTofInc
   764: 000281   957A  DEC R23	;Декремент
   765: 000282   FD77  SBRC R23, 7
   766: 000283   2777  CLR R23
   767: 000284   D1F4  Rcall TermTo7SEG
   768: 000285   DF05  Rcall Delay
   769: 000286   CF34  RJMP Indication
   770: SetTofInc:
   771: 000287   9573  INC R23	;Инкремент
   772: 000288   FD77  SBRC R23, 7
   773: 000289   957A  DEC R23
   774: 00028A   D1EE  Rcall TermTo7SEG
   775: 00028B   DEFF  Rcall Delay
   776: 00028C   CF2E  RJMP Indication
   777: SetTofWr:
   778: 00028D   9370  STS TimerCNTOff, R23
        00028E   010B
   779: 00028F   E017  LDI R17, TimOff
   780: 000290   2F07  MOV R16, R23
   781: 000291   D209  Rcall EEPROM_write
   782: 000292   94C3  INC MenuCNT
   783: 
   784: ;^^^^^^^^^^^^^^^^^
   785: MenuExit:
   786: 000293   DEF7  Rcall Delay
   787: 000294   D138  Rcall RecastT
   788: 000295   D1C1  RCALL t_convert
   789: 000296   D1E2  Rcall TermTo7SEG
   790: 000297   9508  RET
   791: 
   792: ;|----------------------------------------------------------------------
   793: ;| END
   794: ;|----------------------------------------------------------------------	
   795: ;|----------------------------------------------------------------------
   796: ;|Сравнение температур и выставление флагов
   797: ;|----------------------------------------------------------------------
   798: TermControl:
   799: 000298   9110  LDS R17, TdFullH
        000299   011A
   800: 00029A   9100  LDS R16, TdFullL
        00029B   011B
   801: 00029C   D167  RCALL CPTerm
   802: 00029D   F410  BRSH CPwithHalf
   803: 00029E   6690  ORI Flague, 1<<HeatHalf|1<<HeatFull
   804: 00029F   9508  RET
   805: 
   806: CPwithHalf:
   807: 0002A0   9110  LDS R17, TdHalfH
        0002A1   0118
   808: 0002A2   9100  LDS R16, TdHalfL
        0002A3   0119
   809: 0002A4   D15F  RCALL CPTerm
   810: 0002A5   F418  BRSH CPwithTd
   811: 0002A6   6290  ORI Flague, 1<<HeatHalf
   812: 0002A7   7B9F  ANDI Flague, ~(1<<HeatFull)
   813: 0002A8   9508  RET
   814: 	
   815: CPwithTd:	
   816: 0002A9   9110  LDS R17, TdestH
        0002AA   0112
   817: 0002AB   9100  LDS R16, TdestL
        0002AC   0113
   818: 0002AD   D156  RCALL CPTerm
   819: 0002AE   F008  BRLO TermControlOut
   820: 0002AF   799F  ANDI Flague, ~(1<<HeatHalf|1<<HeatFull)
   821: 	
   822: TermControlOut:
   823: 0002B0   9508  RET
   824: ;|----------------------------------------------------------------------
   825: ;| END
   826: ;|----------------------------------------------------------------------
   827: 
   828: ;|----------------------------------------------------------------------
   829: ;|Проверка флагов обогрева, вентилятора и управление отоплением
   830: ;|----------------------------------------------------------------------
   831: HeatControl:
   832: 0002B1   9B29  SBIS FAN_PORT, FAN
   833: 0002B2   C00C  RJMP HeatOff
   834: 0002B3   FF96  SBRS Flague, HeatFull
   835: 0002B4   C004  RJMP Heat_Half
   836: 0002B5   9A41  SBI RELAY_PORT, Relay1
   837: 0002B6   9A40  SBI RELAY_PORT, Relay2
   838: 0002B7   9A43  SBI HEATING_PORT,HEATING_LED
   839: 0002B8   9508  RET
   840: 	
   841: Heat_Half:
   842: 0002B9   FF95  SBRS Flague, HeatHalf
   843: 0002BA   C004  RJMP HeatOff
   844: 0002BB   9A41  SBI RELAY_PORT, Relay1
   845: 0002BC   9840  CBI RELAY_PORT, Relay2
   846: 0002BD   9A43  SBI HEATING_PORT,HEATING_LED
   847: 0002BE   9508  RET
   848: 	
   849: HeatOff:
   850: 0002BF   9841  CBI RELAY_PORT, Relay1
   851: 0002C0   9840  CBI RELAY_PORT, Relay2
   852: 0002C1   9843  CBI HEATING_PORT,HEATING_LED
   853: 0002C2   9508  RET
   854: ;|----------------------------------------------------------------------
   855: ;| END
   856: ;|----------------------------------------------------------------------
   857: 
   858: 
   859: 
   860: 
   861: ;|----------------------------------------------------------------------
   862: ;|Контроль жалюзи
   863: ;|----------------------------------------------------------------------
   864: JaControl:
   865: 0002C3   FF95  SBRS Flague, HeatHalf
   866: 0002C4   C012  RJMP HeatNotNeed
   867: 0002C5   FF94  SBRS Flague, JaTimer
   868: 0002C6   C003  RJMP JaTimerOffen
   869: 0002C7   769F  ANDI Flague, ~(1<<JaTimer|1<<CmdSnd)	;Гасим флаг таймера, и "Команда Отправлена"
   870: 0002C8   EF0E  LDI Temp, ~(1<<JaTimerSt)			;Гасим флаг обдува по таймеру
   871: 0002C9   22D0  AND Flague2, Temp
   872: 
   873: 	
   874: JaTimerOffen:	;Таймер выключен
   875: 0002CA   2D0F  MOV Temp, JaState
   876: 0002CB   3003  CPI Temp, 3
   877: 0002CC   F430  BRSH JaStIsOff
   878: 0002CD   3002  CPI Temp, 2
   879: 0002CE   F419  BRNE JaStIsOn	;Если 1 или 0 Сразу вызываем состояние
   880: 0002CF   E001  LDI Temp, 1
   881: 0002D0   2EF0  MOV JaState, Temp	;Меняем состояние на "Swap"
   882: 0002D1   779F  ANDI Flague, ~(1<<CmdSnd)
   883: 	JaStIsOn:
   884: 0002D2   C090  RJMP StateIJMP
   885: 	
   886: 	JaStIsOff:	;Если жалюзи выключены или закрываются
   887: 0002D3   779F  ANDI Flague, ~(1<<CmdSnd)
   888: 0002D4   E000  LDI Temp, 0
   889: 0002D5   2EF0  MOV JaState, Temp	;Меняем состояние на "Открытие"
   890: 
   891: 0002D6   C08C  RJMP StateIJMP
   892: 	
   893: HeatNotNeed:	;Обогрев выключен
   894: 0002D7   FD94  SBRC Flague, JaTimer
   895: 0002D8   C006  RJMP JaTimerIsON
   896: 0002D9   2D0F  MOV Temp, JaState	;Таймер выключен
   897: 0002DA   3002  CPI Temp, 2
   898: 0002DB   F410  BRSH JaStIs2_4
   899: 0002DC   E002  LDI Temp, 2			;Если JaState 1 или 0
   900: 0002DD   2EF0  MOV JaState, Temp	;Меняем состояние на "Охлаждение"
   901: 	JaStIs2_4:
   902: 0002DE   C084  RJMP StateIJMP
   903: 
   904: ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>			
   905: JaTimerIsON:	;Обогрев выключен, Таймер включен
   906: 0002DF   FF92  SBRS Flague, Fin44ja
   907: 0002E0   C082  RJMP StateIJMP
   908: 0002E1   7F9B  ANDI Flague, ~(1<<Fin44ja)
   909: 0002E2   9100  LDS Temp, TimerCNT69
        0002E3   0108
   910: 0002E4   950A  DEC Temp
   911: 0002E5   F019  BREQ MinuteTick
   912: 0002E6   9300  STS TimerCNT69, Temp
        0002E7   0108
   913: 0002E8   C07A  RJMP StateIJMP
   914: 	
   915: MinuteTick:		;Минута тикнула
   916: 0002E9   E405  LDI Temp, TimerMinute
   917: 0002EA   9300  STS TimerCNT69, Temp
        0002EB   0108
   918: 0002EC   9100  LDS Temp, TimerCNTMinute
        0002ED   0109
   919: 0002EE   9503  INC Temp
   920: 0002EF   FCD0  SBRC Flague2, JaTimerSt
   921: 0002F0   C00F  RJMP FlagueOn
   922: 0002F1   9110  LDS Temp2, TimerCNTOff
        0002F2   010B
   923: 0002F3   1701  CP Temp, Temp2
   924: 0002F4   F418  BRSH TimerVentToON
   925: 0002F5   9300  STS TimerCNTMinute, Temp
        0002F6   0109
   926: 0002F7   C06B  RJMP StateIJMP
   927: 	
   928: TimerVentToON:	;Включить обдув
   929: 0002F8   2700  CLR Temp
   930: 0002F9   9300  STS TimerCNTMinute, Temp
        0002FA   0109
   931: 0002FB   2EF0  MOV JaState, Temp	;Меняем состояние на "Открытие"
   932: 0002FC   779F  ANDI Flague, ~(1<<CmdSnd)
   933: 0002FD   E001  LDI Temp, 1<<JaTimerSt
   934: 0002FE   2AD0  OR Flague2, Temp
   935: 0002FF   C063  RJMP StateIJMP
   936: 
   937: FlagueOn:	;Обдув включен
   938: 000300   9110  LDS Temp2, TimerCNTOn
        000301   010A
   939: 000302   1701  CP Temp, Temp2
   940: 000303   F418  BRSH TimerVentToOff
   941: 000304   9300  STS TimerCNTMinute, Temp
        000305   0109
   942: 000306   C05C  RJMP StateIJMP
   943: 	
   944: TimerVentToOff:	;Выключить обдув
   945: 000307   2700  CLR Temp
   946: 000308   9300  STS TimerCNTMinute, Temp
        000309   0109
   947: 00030A   E003  LDI Temp, 3
   948: 00030B   2EF0  MOV JaState, Temp	;Меняем состояние на "Закрытие"
   949: 00030C   EF0E  LDI Temp, ~(1<<JaTimerSt)
   950: 00030D   22D0  AND Flague2, Temp
   951: 00030E   C054  RJMP StateIJMP
   952: ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	
   953: 
   954: ;++++++++++++++++
   955: JaOpen:	;Открытие Жалюзи
   956: 00030F   FD97  SBRC Flague, CmdSnd
   957: 000310   C010  RJMP JaOpenSnd
   958: 
   959: 000311   9829  CBI FAN_PORT, FAN
   960: 000312   E002  LDI Temp, 1<<OCIE2A	;Вкл прерывание таймера
   961: 000313   9300  STS TIMSK2, Temp
        000314   0070
   962: 000315   E405  LDI Temp, TIMER2_6MS	;Настройка компаратора таймера
   963: 000316   9300  STS OCR2A, Temp
        000317   00B3
   964: 000318   2700  CLR Temp
   965: 000319   9300  STS TCNT2, Temp		;Сброс таймера
        00031A   00B2
   966: 00031B   6091  ORI Flague, 1<<Open	;Жалюзи на открытие
   967: 00031C   EC08  LDI Temp, ClOpStep		;Настройка счетчика шагов
   968: 00031D   9300  STS StepCounter2, Temp
        00031E   0107
   969: 00031F   6890  ORI Flague, 1<<CmdSnd
   970: 000320   9508  RET
   971: 	
   972: JaOpenSnd:	;Если команда на открытие послана
   973: 000321   FD90  SBRC Flague, Open	;Ждем пока сменится направление движения жалюзи
   974: 000322   9508  RET
   975: 
   976: 000323   779F  ANDI Flague, ~(1<<CmdSnd)
   977: 000324   E001  LDI Temp, 1
   978: 000325   2EF0  MOV JaState, Temp	;Меняем состояние на SWING
   979: 000326   9508  RET
   980: ;++++++++++++++++
   981: 
   982: 
   983: ;++++++++++++++++
   984: JaSwing:	;Режим перемешивания воздуха
   985: 
   986: 000327   E704  LDI Temp, TIMER2_10MS	;Меняем значение компаратора
   987: 000328   9300  STS OCR2A, Temp
        000329   00B3
   988: 00032A   9A29  SBI FAN_PORT, FAN		; Заводим пропеллер
   989: 00032B   9508  RET
   990: ;++++++++++++++++	
   991: 
   992: 
   993: ;++++++++++++++++	
   994: JaCool:		;Ждём пока нагревательный элемент остынет
   995: 00032C   FD97  SBRC Flague, CmdSnd
   996: 00032D   C005  RJMP JaCoolSnd
   997: 00032E   E107  LDI Temp, Cool20Sec
   998: 00032F   2EE0  MOV CoolTimer, Temp	;Настройка времени охлаждения
   999: 000330   7F97  ANDI Flague, ~(1<<Fin44cool)	;Сброс флага
  1000: 000331   6890  ORI Flague, 1<<CmdSnd
  1001: 000332   9508  RET
  1002: 	
  1003: JaCoolSnd:
  1004: 000333   FF93  SBRS Flague, Fin44cool
  1005: 000334   C006  RJMP JaCoolExit
  1006: 000335   7F97  ANDI Flague, ~(1<<Fin44cool)	;Сброс флага
  1007: 000336   94EA  DEC CoolTimer
  1008: 000337   F419  BRNE JaCoolExit		; Если счетчик не 0, выходим
  1009: 000338   779F  ANDI Flague, ~(1<<CmdSnd)
  1010: 000339   E003  LDI Temp, 3
  1011: 00033A   2EF0  MOV JaState, Temp	;Меняем состояние на Закрытие
  1012: 		
  1013: JaCoolExit:	
  1014: 00033B   9508  RET
  1015: ;++++++++++++++++
  1016: 
  1017: 
  1018: ;++++++++++++++++
  1019: JaClose:	;Закрытие Жалюзи
  1020: 00033C   FD97  SBRC Flague, CmdSnd
  1021: 00033D   C00D  RJMP JaCloseSnd
  1022: 00033E   9829  CBI FAN_PORT, FAN	;Глушим пропеллер
  1023: 00033F   E405  LDI Temp, TIMER2_6MS
  1024: 000340   9300  STS OCR2A, Temp
        000341   00B3
  1025: 000342   2700  CLR Temp
  1026: 000343   9300  STS TCNT2, Temp
        000344   00B2
  1027: 000345   7F9E  ANDI Flague, ~(1<<Open)	;Жалюзи на закрытие
  1028: 000346   EC08  LDI Temp, ClOpStep		;Настройка счетчика шагов
  1029: 000347   9300  STS StepCounter2, Temp
        000348   0107
  1030: 000349   6890  ORI Flague, 1<<CmdSnd
  1031: 00034A   9508  RET
  1032: 	
  1033: JaCloseSnd:	;Если команда на закрытие послана
  1034: 00034B   FF90  SBRS Flague, Open	;Ждем пока сменится направление движения жалюзи
  1035: 00034C   9508  RET
  1036: 00034D   E000  LDI Temp, 0<<OCIE2A	;Выкл прерывание таймера
  1037: 00034E   9300  STS TIMSK2, Temp
        00034F   0070
  1038: 000350   779F  ANDI Flague, ~(1<<CmdSnd)
  1039: 000351   E004  LDI Temp, 4
  1040: 000352   2EF0  MOV JaState, Temp	;Меняем состояние на SWING
  1041: 000353   9508  RET
  1042: ;++++++++++++++++	
  1043: 
  1044: 
  1045: ;++++++++++++++++	
  1046: JaOff:	;Жалюзи закрыты и выключены
  1047: 000354   FD97  SBRC Flague, CmdSnd
  1048: 000355   C00C  RJMP JaOffSnd
  1049: 000356   6190  ORI Flague, 1<<JaTimer
  1050: 000357   7F9B  ANDI Flague, ~(1<<Fin44ja)	;Тут настроить счетчики таймера
  1051: 000358   EF0E  LDI Temp, ~(1<<JaTimerSt)
  1052: 000359   22D0  AND Flague2, Temp
  1053: 00035A   E405  LDI Temp, TimerMinute
  1054: 00035B   9300  STS TimerCNT69, Temp
        00035C   0108
  1055: 00035D   E000  LDI Temp, 0
  1056: 00035E   9300  STS TimerCNTMinute, Temp
        00035F   0109
  1057: 000360   6890  ORI Flague, 1<<CmdSnd
  1058: 000361   9508  RET
  1059: JaOffSnd:
  1060: 000362   9508  RET
  1061: ;++++++++++++++++
  1062: 
  1063: 
  1064: ;++++++++++++++++
  1065: StateIJMP:
  1066: 000363   E0EA  LDI ZL, LOW (way_table*2)	;Загружаем адрес таблицы.
  1067: 000364   E0F1  LDI ZH, HIGH(way_table*2)
  1068: 000365   2711  CLR Temp2					; Сбрасываем регистр - нам нужен ноль. Temp2 Должен быть следующим после Temp, т.е. R17:R16
  1069: 000366   2D0F  MOV Temp, JaState
  1070: 000367   0F00  LSL Temp		;Eмножаем содержимое JaState на два.
  1071: 000368   0FE0  ADD	ZL, Temp
  1072: 000369   1FF1  ADC ZH, Temp2
  1073: 00036A   9105  LPM	Temp,Z+		; Загрузили в Temp адрес из таблицы
  1074: 00036B   9114  LPM	Temp2,Z		; Старший и младший байт
  1075: 00036C   01F8  MOVW	 ZL,Temp	; Забросили адрес в Z 
  1076: 00036D   9409  IJMP			; Поскакали!
  1077: ;++++++++++++++++
  1078: 
  1079: 
  1080: ;|----------------------------------------------------------------------
  1081: ;| END
  1082: ;|----------------------------------------------------------------------
  1083: 
  1084: ;|----------------------------------------------------------------------
  1085: ;| Инкрементальник и дикрементальник
  1086: ;| Данные в IncDecH:IncDecL
  1087: ;| Для инкремента флог Т выставить в 1
  1088: ;|----------------------------------------------------------------------
  1089: INCDEC:
  1090: 00036E   930F  PUSH R16
  1091: 00036F   931F  PUSH R17
  1092: 000370   9110  LDS R17, IncDecH
        000371   010C
  1093: 000372   9100  LDS R16, IncDecL
        000373   010D
  1094: 000374   F45E  BRTC DECR
  1095: 			; Тут есмЪ ИнкрементЪ
  1096: 000375   FF17  SBRS R17, 7
  1097: 000376   C007  RJMP INCPOS
  1098: 000377   D01F  RCALL DummiDEC
  1099: 000378   3810  CPI R17, 1<<7	;Проверка на -0,0
  1100: 000379   F479  BRNE INCDECOUT
  1101: 00037A   2300  TST R16
  1102: 00037B   F469  BRNE INCDECOUT
  1103: 00037C   2711  CLR R17
  1104: 00037D   C00B  RJMP INCDECOUT
  1105: 	
  1106: INCPOS:	; Инкремент положительного числа
  1107: 00037E   D011  RCALL DummiINC
  1108: 00037F   C009  RJMP INCDECOUT
  1109: 
  1110: DECR:		; Тут есмЪ ДекрементЪ
  1111: 000380   FD17  SBRC R17, 7
  1112: 000381   C006  RJMP DECNEG
  1113: 000382   D014  RCALL DummiDEC
  1114: 000383   3F1F  CPI R17, 0XFF
  1115: 000384   F421  BRNE INCDECOUT
  1116: 000385   E810  LDI R17, 1<<7
  1117: 000386   E001  LDI R16, 1
  1118: 000387   C001  RJMP INCDECOUT
  1119: 
  1120: DECNEG:
  1121: 000388   D007  RCALL DummiINC
  1122: 
  1123: INCDECOUT:
  1124: 000389   9310  STS IncDecH, R17
        00038A   010C
  1125: 00038B   9300  STS IncDecL, R16
        00038C   010D
  1126: 00038D   911F  POP R17
  1127: 00038E   910F  POP R16
  1128: 00038F   9508  RET
  1129: 
  1130: DummiINC:
  1131: 000390   9503  INC R16
  1132: 000391   300A  CPI R16, 10
  1133: 000392   F408  BRSH INCR17
  1134: 000393   9508  RET
  1135: 	INCR17:
  1136: 000394   2700  CLR R16
  1137: 000395   9513  INC R17
  1138: 000396   9508  RET
  1139: 
  1140: DummiDEC:
  1141: 000397   950A  DEC R16
  1142: 000398   300A  CPI R16, 10
  1143: 000399   F408  BRSH DECR17
  1144: 00039A   9508  RET
  1145: 	DECR17:
  1146: 00039B   E009  LDI R16, 9
  1147: 00039C   951A  DEC R17
  1148: 00039D   9508  RET
  1149: ;|----------------------------------------------------------------------
  1150: ;| END
  1151: ;|----------------------------------------------------------------------
  1152: 
  1153: ;|----------------------------------------------------------------------
  1154: ;| Вычесть из MinuendH:MinuendL SubtrahendH:SubtrahendL
  1155: ;| Subtrahend должен быть положительным
  1156: ;|----------------------------------------------------------------------
  1157: Subtract:
  1158: 00039E   930F  PUSH R16
  1159: 00039F   931F  PUSH R17
  1160: 0003A0   932F  PUSH R18
  1161: 0003A1   933F  PUSH R19
  1162: 0003A2   9110  LDS R17, SubtrahendH ;Вычитаемое
        0003A3   0110
  1163: 0003A4   9100  LDS R16, SubtrahendL
        0003A5   0111
  1164: 0003A6   9130  LDS R19, MinuendH	;Уменьшаемое
        0003A7   010E
  1165: 0003A8   9120  LDS R18, MinuendL
        0003A9   010F
  1166: 	
  1167: 	SubtractCHECK:
  1168: 0003AA   2311  TST R17
  1169: 0003AB   F419  BRNE GoSubtract
  1170: 0003AC   2300  TST R16
  1171: 0003AD   F409  BRNE GoSubtract
  1172: 0003AE   C015  RJMP SubtractOUT
  1173: 	
  1174: 	GoSubtract:
  1175: 0003AF   9310  STS IncDecH, R17
        0003B0   010C
  1176: 0003B1   9300  STS IncDecL, R16
        0003B2   010D
  1177: 0003B3   94E8  CLT
  1178: 0003B4   DFB9  RCALL INCDEC
  1179: 0003B5   9110  LDS R17, IncDecH
        0003B6   010C
  1180: 0003B7   9100  LDS R16, IncDecL
        0003B8   010D
  1181: 	
  1182: 0003B9   9330  STS IncDecH, R19
        0003BA   010C
  1183: 0003BB   9320  STS IncDecL, R18
        0003BC   010D
  1184: 0003BD   94E8  CLT
  1185: 0003BE   DFAF  RCALL INCDEC
  1186: 0003BF   9130  LDS R19, IncDecH
        0003C0   010C
  1187: 0003C1   9120  LDS R18, IncDecL
        0003C2   010D
  1188: 
  1189: 0003C3   CFE6  RJMP SubtractCHECK
  1190: 	
  1191: 	SubtractOUT:
  1192: 0003C4   9330  STS MinuendH, R19
        0003C5   010E
  1193: 0003C6   9320  STS MinuendL, R18
        0003C7   010F
  1194: 0003C8   913F  POP R19
  1195: 0003C9   912F  POP R18
  1196: 0003CA   911F  POP R17
  1197: 0003CB   910F  POP R16
  1198: 0003CC   9508  RET
  1199: ;|----------------------------------------------------------------------
  1200: ;| END
  1201: ;|----------------------------------------------------------------------
  1202: 
  1203: ;|----------------------------------------------------------------------
  1204: ;| Пересчет порогов температуры
  1205: ;| В TdHalfH:TdHalfL (Если ниже этой температуры - включить обогрев на пол мощности)
  1206: ;| и TdFullH:TdFullL (если ниже этой температуры - включить обогрев на полную мощность
  1207: ;| Записываются новые значения
  1208: ;|----------------------------------------------------------------------
  1209: RecastT:
  1210: 0003CD   930F  PUSH R16
  1211: 0003CE   931F  PUSH R17
  1212: 0003CF   9110  LDS R17,TdestH
        0003D0   0112
  1213: 0003D1   9100  LDS R16,TdestL
        0003D2   0113
  1214: 0003D3   9310  STS MinuendH, R17
        0003D4   010E
  1215: 0003D5   9300  STS MinuendL, R16
        0003D6   010F
  1216: 0003D7   9110  LDS R17,dTHalfH
        0003D8   0114
  1217: 0003D9   9100  LDS R16,dTHalfL
        0003DA   0115
  1218: 0003DB   9310  STS SubtrahendH, R17
        0003DC   0110
  1219: 0003DD   9300  STS SubtrahendL, R16
        0003DE   0111
  1220: 0003DF   DFBE  RCALL Subtract
  1221: 0003E0   9110  LDS R17,MinuendH
        0003E1   010E
  1222: 0003E2   9100  LDS R16,MinuendL
        0003E3   010F
  1223: 0003E4   9310  STS TdHalfH, R17
        0003E5   0118
  1224: 0003E6   9300  STS TdHalfL, R16
        0003E7   0119
  1225: 	
  1226: 0003E8   9110  LDS R17,TdestH
        0003E9   0112
  1227: 0003EA   9100  LDS R16,TdestL
        0003EB   0113
  1228: 0003EC   9310  STS MinuendH, R17
        0003ED   010E
  1229: 0003EE   9300  STS MinuendL, R16
        0003EF   010F
  1230: 0003F0   9110  LDS R17,dTFullH
        0003F1   0116
  1231: 0003F2   9100  LDS R16,dTFullL
        0003F3   0117
  1232: 0003F4   9310  STS SubtrahendH, R17
        0003F5   0110
  1233: 0003F6   9300  STS SubtrahendL, R16
        0003F7   0111
  1234: 0003F8   DFA5  RCALL Subtract
  1235: 0003F9   9110  LDS R17,MinuendH
        0003FA   010E
  1236: 0003FB   9100  LDS R16,MinuendL
        0003FC   010F
  1237: 0003FD   9310  STS TdFullH, R17
        0003FE   011A
  1238: 0003FF   9300  STS TdFullL, R16
        000400   011B
  1239: 000401   911F  POP R17
  1240: 000402   910F  POP R16
  1241: 000403   9508  RET
  1242: ;|----------------------------------------------------------------------
  1243: ;| END
  1244: ;|----------------------------------------------------------------------
  1245: 
  1246: ;|---------------------------------------------------------------------------
  1247: ;| Функция сравнения температуры
  1248: ;| На входе:	целая часть в R23 текушей температуры
  1249: ;|		дробная часть в R22 текушей температуры
  1250: ;|		целая часть в R17 заданной температуры
  1251: ;|		дробная часть в R16 заданной температуры
  1252: ;| На выходе:	C=1 если Tc<Tdest
  1253: ;|		C=0 если Tc>=Tdest
  1254: ;|		Z=1 если Tc=Tdest
  1255: ;|---------------------------------------------------------------------------
  1256: 
  1257: CPTerm:	
  1258: 000404   FD17  SBRC R17, 7
  1259: 000405   C009  RJMP CPTermTdNEG
  1260: 000406   FD77  SBRC R23, 7		; Если Td положительная
  1261: 000407   C012  RJMP CPTermLO	; Если Тс отрицательная, то Тс<Td
  1262: 000408   1771  CP R23, R17
  1263: 000409   F080  BRLO CPTermLO	;Tc<Tdest
  1264: 00040A   F491  BRNE CPTermSH	;Tc>Tdest
  1265: 00040B   1760  CP R22, R16
  1266: 00040C   F068  BRLO CPTermLO	;Tc<Tdest
  1267: 00040D   F479  BRNE CPTermSH	;Tc>Tdest
  1268: 00040E   C008  RJMP CPTermEQ
  1269: 	
  1270: CPTermTdNEG:	; Если Td отрицательная
  1271: 00040F   FF77  SBRS R23, 7
  1272: 000410   C00C  RJMP CPTermSH ; Если Тс положительная, то Тс>Td
  1273: 000411   1717  CP R17, R23
  1274: 000412   F038  BRLO CPTermLO	;Tc<Tdest
  1275: 000413   F449  BRNE CPTermSH	;Tc>Tdest
  1276: 000414   1706  CP R16, R22
  1277: 000415   F020  BRLO CPTermLO	;Tc<Tdest
  1278: 000416   F431  BRNE CPTermSH	;Tc>Tdest
  1279: 
  1280: 000417   9488  CLC	;Если равны
  1281: 000418   9418  SEZ
  1282: 000419   9508  RET
  1283: 
  1284: 00041A   9408  SEC	;Если R23.R22 меньше R17.R16
  1285: 00041B   9498  CLZ
  1286: 00041C   9508  RET
  1287: 
  1288: 00041D   9488  CLC	;Если R23.R22 больше R17.R16
  1289: 00041E   9498  CLZ
  1290: 00041F   9508  RET
  1291: ;|---------------------------------------------------------------------------
  1292: ;|                               END
  1293: ;|---------------------------------------------------------------------------
  1294: 
  1295: ;|----------------------------------------------------------------------
  1296: ;| Процедура вывода температуры
  1297: ;|----------------------------------------------------------------------
  1298: TermToSeg:
  1299: 000420   930F  Push Temp
  1300: 000421   B70F  IN Temp, SREG
  1301: 000422   930F  Push Temp
  1302: 000423   FF77  SBRS R23,7
  1303: 000424   9844  CBI MINUS_PORT,MINUS_LED
  1304: 000425   FD77  SBRC R23,7
  1305: 000426   9A44  SBI MINUS_PORT,MINUS_LED
  1306: 	
  1307: 000427   E0E0  ldi ZL,Low(TermToOut)
  1308: 000428   E0F1  ldi ZH,High(TermToOut)  ;загрузка начального адреса массива
  1309: 000429   9141  LD	OutByte, Z+
  1310: 00042A   E051  LDI OutByte2, 1<<SEG1 ;Первый символ
  1311: 00042B   D00A  rcall Output
  1312: 
  1313: 00042C   9141  LD	OutByte, Z+
  1314: 00042D   E054  LDI OutByte2, 1<<SEG2
  1315: 00042E   D007  rcall Output
  1316: 
  1317: 00042F   8140  LD	OutByte, Z
  1318: 000430   E052  LDI OutByte2, 1<<SEG3 ;Третий символ
  1319: 000431   D004  rcall Output
  1320: 
  1321: 000432   910F  POP Temp
  1322: 000433   BF0F  OUT SREG, Temp
  1323: 000434   910F  POP Temp
  1324: 000435   9508  RET
  1325: ;|----------------------------------------------------------------------
  1326: ;|                               END
  1327: ;|----------------------------------------------------------------------
  1328: 
  1329: 
  1330: ;|----------------------------------------------------------------------
  1331: ;| Процедура вывода на 7 сегментный индикатор
  1332: ;| На входе: разряд в OutByte
  1333: ;|           символ в OutByte2
  1334: ;|----------------------------------------------------------------------
  1335: Output:
  1336: 000436   E020  ldi CNT,0
  1337: 000437   9488  clc
  1338: 000438   0F44  lsl OutByte
  1339: 000439   F028  BRLO One		;переход если С=1
  1340: 	
  1341: 00043A   E000  ldi Temp, 0<<STcp|0<<SHcp|0<<DS
  1342: 00043B   D00D  rcall EndWR
  1343: 00043C   E200  ldi Temp, 0<<STcp|1<<SHcp|0<<DS
  1344: 00043D   D00B  rcall EndWR
  1345: 00043E   C004  rjmp Check
  1346: 
  1347: 00043F   E100  ldi Temp, 0<<STcp|0<<SHcp|1<<DS
  1348: 000440   D008  rcall EndWR
  1349: 000441   E300  ldi Temp, 0<<STcp|1<<SHcp|1<<DS
  1350: 000442   D006  rcall EndWR
  1351: 
  1352: 000443   E000  ldi Temp, 0<<STcp|0<<SHcp|0<<DS
  1353: 000444   D004  rcall EndWR
  1354: 000445   9523  inc CNT
  1355: 000446   3028  cpi CNT,0b00001000
  1356: 000447   F031  breq STout
  1357: 000448   CFEF  rjmp Next
  1358: 
  1359: 000449   B11B  in Temp2, SEG7_PORT
  1360: 00044A   7C17  ANDI Temp2, ~(1<<STcp|1<<SHcp|1<<DS)
  1361: 00044B   2B01  OR Temp, Temp2
  1362: 00044C   B90B  out SEG7_PORT,Temp
  1363: 00044D   9508  ret
  1364: 
  1365: 00044E   E008  ldi Temp, 1<<STcp|0<<SHcp|0<<DS	;Затолкали, теперь выводим.
  1366: 00044F   B11B  in Temp2, SEG7_PORT
  1367: 000450   7C10  ANDI Temp2, ~(1<<SEG1|1<<SEG2|1<<SEG3|1<<STcp|1<<SHcp|1<<DS)
  1368: 000451   2B15  OR Temp2, OutByte2
  1369: 000452   2B10  OR Temp2, Temp
  1370: 000453   B91B  out SEG7_PORT,Temp2
  1371: 000454   E000  ldi Temp, 0<<STcp|0<<SHcp|0<<DS
  1372: 000455   DFF3  rcall EndWR
  1373: 000456   9508  ret
  1374: ;|----------------------------------------------------------------------
  1375: ;|                               END
  1376: ;|----------------------------------------------------------------------
  1377: 
  1378: ;|---------------------------------------------------------------------------
  1379: ;| Процедура преобразования температуры
  1380: ;| На входе: Младший байт в R22, Старший байт в R23
  1381: ;| На выходе: дробная часть в R22, Целая часть со знаком в R23 (старший бит)
  1382: ;|---------------------------------------------------------------------------
  1383: 000457   930F  PUSH R16
  1384: 000458   931F  PUSH R17
  1385: 000459   FF77  SBRS R23,7	;Если число положительное, то переходим к преобразованию дробной части
  1386: 00045A   C007  rjmp IfPositiv
  1387: 00045B   2700  CLR R16
  1388: 00045C   2711  CLR R17
  1389: 00045D   1B06  SUB R16, R22	;Переводим из дополнительного кода
  1390: 00045E   0B17  SBC R17, R23
  1391: 00045F   2F60  MOV R22, R16
  1392: 000460   2F71  MOV R23, R17
  1393: 000461   6078  ORI R23,1<<3	;ставим знак "-"
  1394: 
  1395: IfPositiv:
  1396: 000462   2F06  mov R16, R22
  1397: 000463   7F00  ANDI R16, 0b11110000
  1398: 000464   9502  SWAP R16
  1399: 000465   9572  SWAP R23
  1400: 000466   7F70  ANDI R23, 0b11110000
  1401: 000467   2B70  OR R23,R16	;Склеиваем целые части младшего и старшего байтов в один байт
  1402: 
  1403: 000468   706F  ANDI R22,0b00001111	;Преобразуем дробную часть
  1404: 000469   2F06  mov R16, R22	;Нужно умножить на 10, для этого:
  1405: 00046A   0F00  lsl R16		;Умножаем на 2
  1406: 00046B   0F66  lsl R22
  1407: 00046C   0F66  lsl R22
  1408: 00046D   0F66  lsl R22		;Умножаем на 8
  1409: 00046E   0F60  ADD R22,R16	;Складываем, и умножение на 10 готово
  1410: 00046F   7F60  ANDI R22, 0b11110000
  1411: 000470   9562  SWAP R22	;Делим на 16
  1412: 000471   3870  CPI R23, 1<<7	;Проверка на -0, если -0.0 надо убрать минус
  1413: 000472   F419  BRNE end_t_convert
  1414: 000473   2366  TST R22		;Проверка на -0.0
  1415: 000474   F409  BRNE end_t_convert
  1416: 000475   2777  CLR R23
  1417: 
  1418: end_t_convert:
  1419: 000476   911F  POP R17
  1420: 000477   910F  POP R16
  1421: 000478   9508  RET
  1422: ;|---------------------------------------------------------------------------
  1423: ;|                               END
  1424: ;|---------------------------------------------------------------------------
  1425: 
  1426: ;|---------------------------------------------------------------------------
  1427: ;| Процедура подготовки температуры для вывода на 7Seg
  1428: ;| На входе: целая часть в R23
  1429: ;|         дробная часть в R22
  1430: ;| На выходе:     TermToOut - старший разряд целой части,
  1431: ;| в TimeToOut+1 - младний разряд целой части,
  1432: ;| в TimeToOut+2 - дробная часть
  1433: ;|---------------------------------------------------------------------------
  1434: TermTo7SEG:
  1435: 000479   936F  PUSH R22
  1436: 00047A   937F  PUSH R23
  1437: 	
  1438: 00047B   2F06  MOV Temp, R22
  1439: 00047C   D015  rcall FSym
  1440: 00047D   9300  STS TermToOut+2, Temp
        00047E   0102
  1441: 	
  1442: 00047F   2722  CLR CNT
  1443: 000480   777F  ANDI R23, ~(1<<7)
  1444: 000481   307A  CPI R23,10
  1445: 000482   F018  BRLO IsLow
  1446: 000483   507A  SUBI R23,10
  1447: 000484   9523  INC CNT
  1448: 000485   CFFB  RJMP T7SNext
  1449: 
  1450: 000486   2F07  MOV Temp, R23
  1451: 000487   D00A  rcall FSym
  1452: 000488   6004  ORI Temp, 1<<SegDP
  1453: 000489   9300  STS TermToOut+1, Temp
        00048A   0101
  1454: 	
  1455: 00048B   2F02  MOV Temp, R18
  1456: 00048C   2300  TST Temp
  1457: 00048D   F009  BREQ IsZero
  1458: 00048E   D003  rcall FSym
  1459: 00048F   9300  STS TermToOut, Temp
        000490   0100
  1460: 000491   C006  RJMP TermTo7SEGend
  1461: 
  1462: FSym:	; Загрузить адрес таблицы символов
  1463: 000492   EFE2  LDI ZL, LOW (2*sym_table)
  1464: 000493   E0F0  LDI ZH, HIGH(2*sym_table)
  1465: 	; Найти нужный символ
  1466: 000494   0FE0  ADD ZL, Temp
  1467: 	; Загрузить данные символа в R0
  1468: 000495   95C8  LPM
  1469: 000496   2D00  MOV Temp, R0
  1470: 000497   9508  ret
  1471: 
  1472: 000498   917F  POP R23
  1473: 000499   916F  POP R22
  1474: 00049A   9508  RET
  1475: ;|---------------------------------------------------------------------------
  1476: ;|                               END
  1477: ;|---------------------------------------------------------------------------
  1478: 
  1479: ;|----------------------------------------------------------------------
  1480: ;| Запись и чтение EEPROM
  1481: ;|----------------------------------------------------------------------
  1482: EEPROM_write:
  1483: 00049B   99F9  sbic EECR, EEPE
  1484: 00049C   CFFE  rjmp EEPROM_write
  1485: 00049D   930F  PUSH R16
  1486: 00049E   E000  ldi r16, (0<<EEPM1)|(0<<EEPM0)
  1487: 00049F   BB0F  out EECR, r16
  1488: 0004A0   BD11  out EEARL, r17
  1489: 0004A1   910F  POP R16
  1490: 0004A2   BD00  out EEDR, r16	; Write data (r16) to data register
  1491: 0004A3   9AFA  sbi EECR, EEMPE	; Write logical one to EEMPE
  1492: 0004A4   9AF9  sbi EECR, EEPE	; Start eeprom write by setting EEPE
  1493: 0004A5   9508  ret
  1494: 
  1495: EEPROM_read:
  1496: 0004A6   99F9  sbic EECR, EEPE
  1497: 0004A7   CFFE  rjmp EEPROM_read
  1498: 0004A8   BD11  out EEARL, r17
  1499: 0004A9   9AF8  sbi EECR, EERE	; Start eeprom read by writing EERE
  1500: 0004AA   B500  in r16, EEDR	; Read data from data register
  1501: 0004AB   9508  ret
  1502: ;|----------------------------------------------------------------------
  1503: ;|                               END
  1504: ;|----------------------------------------------------------------------
  1505: 
  1506: 
  1507: .DSEG
  1508: TermToOut:		.byte 3
  1509: RAWTerm:		.byte 2	;Сырые данные из DS18B20
  1510: Tim0CNT:		.byte 1
  1511: StepCounter1:	.byte 1
  1512: StepCounter2:	.byte 1
  1513: TimerCNT69:		.byte 1
  1514: TimerCNTMinute: .byte 1
  1515: TimerCNTOn:		.byte 1
  1516: TimerCNTOff:	.byte 1
  1517: 
  1518: IncDecH:		.byte 1
  1519: IncDecL:		.byte 1
  1520: MinuendH:		.byte 1	;Уменьшаемое
  1521: MinuendL:		.byte 1
  1522: SubtrahendH:	.byte 1 ;Вычитаемое
  1523: SubtrahendL:	.byte 1
  1524: 
  1525: TdestH:		.byte 1
  1526: TdestL:		.byte 1
  1527: 
  1528: dTHalfH:	.byte 1
  1529: dTHalfL:	.byte 1
  1530: dTFullH:	.byte 1
  1531: dTFullL:	.byte 1
  1532: 
  1533: TdHalfH:	.byte 1
  1534: TdHalfL:	.byte 1
  1535: TdFullH:	.byte 1
  1536: TdFullL:	.byte 1
 -> Warning 011: C-style instructions in file, lines ignored!
 -> Warning 001: 5 symbol(s) defined, but not used!

Program             :     1170 words.
Constants           :       26 words.
Total program memory:     1196 words.
Eeprom space        :        0 bytes.
Data segment        :       28 bytes.
Compilation completed, no errors.
Compilation endet 21.11.2015, 13:43:46
