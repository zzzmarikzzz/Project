gavrasm Gerd's AVR assembler version 3.4 (C)2014 by DG4FAC
----------------------------------------------------------
Source file: ish.asm
Hex file:    ish.hex
Eeprom file: ish.eep
Compiled:    22.01.2015, 16:26:22
Pass:        2
     1: .include "/home/marik/Project/m48def.inc"
  Including file /home/marik/Project/m48def.inc
     1: ;***** THIS IS A MACHINE GENERATED FILE - DO NOT EDIT ********************
     2: ;***** Created: 2011-02-09 12:03 ******* Source: ATmega48.xml ************
     3: ;*************************************************************************
     4: ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
     5: ;* 
     6: ;* Number            : AVR000
     7: ;* File Name         : "m48def.inc"
     8: ;* Title             : Register/Bit Definitions for the ATmega48
     9: ;* Date              : 2011-02-09
    10: ;* Version           : 2.35
    11: ;* Support E-mail    : avr@atmel.com
    12: ;* Target MCU        : ATmega48
    13: ;* 
    14: ;* DESCRIPTION
    15: ;* When including this file in the assembly program file, all I/O register 
    16: ;* names and I/O register bit names appearing in the data book can be used.
    17: ;* In addition, the six registers forming the three data pointers X, Y and 
    18: ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
    19: ;* SRAM is also defined 
    20: ;* 
    21: ;* The Register names are represented by their hexadecimal address.
    22: ;* 
    23: ;* The Register Bit names are represented by their bit number (0-7).
    24: ;* 
    25: ;* Please observe the difference in using the bit names with instructions
    26: ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
    27: ;* (skip if bit in register set/cleared). The following example illustrates
    28: ;* this:
    29: ;* 
    30: ;* in    r16,PORTB             ;read PORTB latch
    31: ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
    32: ;* out   PORTB,r16             ;output to PORTB
    33: ;* 
    34: ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
    35: ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
    36: ;* rjmp  TOV0_is_set           ;jump if set
    37: ;* ...                         ;otherwise do something else
    38: ;*************************************************************************
    39: 
    40: #ifndef _M48DEF_INC_
    41: #define _M48DEF_INC_
    42: 
    43: 
    44: #pragma partinc 0
    45: 
    46: ; ***** SPECIFY DEVICE ***************************************************
    47: .device ATmega48
    48: #pragma AVRPART ADMIN PART_NAME ATmega48
    49: .equ	SIGNATURE_000	= 0x1e
    50: .equ	SIGNATURE_001	= 0x92
    51: .equ	SIGNATURE_002	= 0x05
    52: 
    53: #pragma AVRPART CORE CORE_VERSION V2E
    54: 
    55: 
    56: ; ***** I/O REGISTER DEFINITIONS *****************************************
    57: ; NOTE:
    58: ; Definitions marked "MEMORY MAPPED"are extended I/O ports
    59: ; and cannot be used with IN/OUT instructions
    60: .equ	UDR0	= 0xc6	; MEMORY MAPPED
    61: .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
    62: .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
    63: .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
    64: .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
    65: .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
    66: .equ	TWAMR	= 0xbd	; MEMORY MAPPED
    67: .equ	TWCR	= 0xbc	; MEMORY MAPPED
    68: .equ	TWDR	= 0xbb	; MEMORY MAPPED
    69: .equ	TWAR	= 0xba	; MEMORY MAPPED
    70: .equ	TWSR	= 0xb9	; MEMORY MAPPED
    71: .equ	TWBR	= 0xb8	; MEMORY MAPPED
    72: .equ	ASSR	= 0xb6	; MEMORY MAPPED
    73: .equ	OCR2B	= 0xb4	; MEMORY MAPPED
    74: .equ	OCR2A	= 0xb3	; MEMORY MAPPED
    75: .equ	TCNT2	= 0xb2	; MEMORY MAPPED
    76: .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
    77: .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
    78: .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
    79: .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
    80: .equ	OCR1AL	= 0x88	; MEMORY MAPPED
    81: .equ	OCR1AH	= 0x89	; MEMORY MAPPED
    82: .equ	ICR1L	= 0x86	; MEMORY MAPPED
    83: .equ	ICR1H	= 0x87	; MEMORY MAPPED
    84: .equ	TCNT1L	= 0x84	; MEMORY MAPPED
    85: .equ	TCNT1H	= 0x85	; MEMORY MAPPED
    86: .equ	TCCR1C	= 0x82	; MEMORY MAPPED
    87: .equ	TCCR1B	= 0x81	; MEMORY MAPPED
    88: .equ	TCCR1A	= 0x80	; MEMORY MAPPED
    89: .equ	DIDR1	= 0x7f	; MEMORY MAPPED
    90: .equ	DIDR0	= 0x7e	; MEMORY MAPPED
    91: .equ	ADMUX	= 0x7c	; MEMORY MAPPED
    92: .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
    93: .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
    94: .equ	ADCH	= 0x79	; MEMORY MAPPED
    95: .equ	ADCL	= 0x78	; MEMORY MAPPED
    96: .equ	TIMSK2	= 0x70	; MEMORY MAPPED
    97: .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
    98: .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
    99: .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
   100: .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
   101: .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
   102: .equ	EICRA	= 0x69	; MEMORY MAPPED
   103: .equ	PCICR	= 0x68	; MEMORY MAPPED
   104: .equ	OSCCAL	= 0x66	; MEMORY MAPPED
   105: .equ	PRR	= 0x64	; MEMORY MAPPED
   106: .equ	CLKPR	= 0x61	; MEMORY MAPPED
   107: .equ	WDTCSR	= 0x60	; MEMORY MAPPED
   108: .equ	SREG	= 0x3f
   109: .equ	SPL	= 0x3d
   110: .equ	SPH	= 0x3e
   111: .equ	SPMCSR	= 0x37
   112: .equ	MCUCR	= 0x35
   113: .equ	MCUSR	= 0x34
   114: .equ	SMCR	= 0x33
   115: .equ	ACSR	= 0x30
   116: .equ	SPDR	= 0x2e
   117: .equ	SPSR	= 0x2d
   118: .equ	SPCR	= 0x2c
   119: .equ	GPIOR2	= 0x2b
   120: .equ	GPIOR1	= 0x2a
   121: .equ	OCR0B	= 0x28
   122: .equ	OCR0A	= 0x27
   123: .equ	TCNT0	= 0x26
   124: .equ	TCCR0B	= 0x25
   125: .equ	TCCR0A	= 0x24
   126: .equ	GTCCR	= 0x23
   127: .equ	EEARL	= 0x21
   128: .equ	EEDR	= 0x20
   129: .equ	EECR	= 0x1f
   130: .equ	GPIOR0	= 0x1e
   131: .equ	EIMSK	= 0x1d
   132: .equ	EIFR	= 0x1c
   133: .equ	PCIFR	= 0x1b
   134: .equ	TIFR2	= 0x17
   135: .equ	TIFR1	= 0x16
   136: .equ	TIFR0	= 0x15
   137: .equ	PORTD	= 0x0b
   138: .equ	DDRD	= 0x0a
   139: .equ	PIND	= 0x09
   140: .equ	PORTC	= 0x08
   141: .equ	DDRC	= 0x07
   142: .equ	PINC	= 0x06
   143: .equ	PORTB	= 0x05
   144: .equ	DDRB	= 0x04
   145: .equ	PINB	= 0x03
   146: 
   147: 
   148: ; ***** BIT DEFINITIONS **************************************************
   149: 
   150: ; ***** USART0 ***********************
   151: ; UDR0 - USART I/O Data Register
   152: .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
   153: .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
   154: .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
   155: .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
   156: .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
   157: .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
   158: .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
   159: .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
   160: 
   161: ; UCSR0A - USART Control and Status Register A
   162: .equ	MPCM0	= 0	; Multi-processor Communication Mode
   163: .equ	U2X0	= 1	; Double the USART transmission speed
   164: .equ	UPE0	= 2	; Parity Error
   165: .equ	DOR0	= 3	; Data overRun
   166: .equ	FE0	= 4	; Framing Error
   167: .equ	UDRE0	= 5	; USART Data Register Empty
   168: .equ	TXC0	= 6	; USART Transmitt Complete
   169: .equ	RXC0	= 7	; USART Receive Complete
   170: 
   171: ; UCSR0B - USART Control and Status Register B
   172: .equ	TXB80	= 0	; Transmit Data Bit 8
   173: .equ	RXB80	= 1	; Receive Data Bit 8
   174: .equ	UCSZ02	= 2	; Character Size
   175: .equ	TXEN0	= 3	; Transmitter Enable
   176: .equ	RXEN0	= 4	; Receiver Enable
   177: .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
   178: .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
   179: .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
   180: 
   181: ; UCSR0C - USART Control and Status Register C
   182: .equ	UCPOL0	= 0	; Clock Polarity
   183: .equ	UCSZ00	= 1	; Character Size
   184: .equ	UCPHA0	= UCSZ00	; For compatibility
   185: .equ	UCSZ01	= 2	; Character Size
   186: .equ	UDORD0	= UCSZ01	; For compatibility
   187: .equ	USBS0	= 3	; Stop Bit Select
   188: .equ	UPM00	= 4	; Parity Mode Bit 0
   189: .equ	UPM01	= 5	; Parity Mode Bit 1
   190: .equ	UMSEL00	= 6	; USART Mode Select
   191: .equ	UMSEL0	= UMSEL00	; For compatibility
   192: .equ	UMSEL01	= 7	; USART Mode Select
   193: .equ	UMSEL1	= UMSEL01	; For compatibility
   194: 
   195: ; UBRR0H - USART Baud Rate Register High Byte
   196: .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
   197: .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
   198: .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
   199: .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
   200: 
   201: ; UBRR0L - USART Baud Rate Register Low Byte
   202: .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
   203: .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
   204: .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
   205: .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
   206: .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
   207: .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
   208: .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
   209: .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
   210: 
   211: 
   212: ; ***** TWI **************************
   213: ; TWAMR - TWI (Slave) Address Mask Register
   214: .equ	TWAM0	= 1	; 
   215: .equ	TWAMR0	= TWAM0	; For compatibility
   216: .equ	TWAM1	= 2	; 
   217: .equ	TWAMR1	= TWAM1	; For compatibility
   218: .equ	TWAM2	= 3	; 
   219: .equ	TWAMR2	= TWAM2	; For compatibility
   220: .equ	TWAM3	= 4	; 
   221: .equ	TWAMR3	= TWAM3	; For compatibility
   222: .equ	TWAM4	= 5	; 
   223: .equ	TWAMR4	= TWAM4	; For compatibility
   224: .equ	TWAM5	= 6	; 
   225: .equ	TWAMR5	= TWAM5	; For compatibility
   226: .equ	TWAM6	= 7	; 
   227: .equ	TWAMR6	= TWAM6	; For compatibility
   228: 
   229: ; TWBR - TWI Bit Rate register
   230: .equ	TWBR0	= 0	; 
   231: .equ	TWBR1	= 1	; 
   232: .equ	TWBR2	= 2	; 
   233: .equ	TWBR3	= 3	; 
   234: .equ	TWBR4	= 4	; 
   235: .equ	TWBR5	= 5	; 
   236: .equ	TWBR6	= 6	; 
   237: .equ	TWBR7	= 7	; 
   238: 
   239: ; TWCR - TWI Control Register
   240: .equ	TWIE	= 0	; TWI Interrupt Enable
   241: .equ	TWEN	= 2	; TWI Enable Bit
   242: .equ	TWWC	= 3	; TWI Write Collition Flag
   243: .equ	TWSTO	= 4	; TWI Stop Condition Bit
   244: .equ	TWSTA	= 5	; TWI Start Condition Bit
   245: .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
   246: .equ	TWINT	= 7	; TWI Interrupt Flag
   247: 
   248: ; TWSR - TWI Status Register
   249: .equ	TWPS0	= 0	; TWI Prescaler
   250: .equ	TWPS1	= 1	; TWI Prescaler
   251: .equ	TWS3	= 3	; TWI Status
   252: .equ	TWS4	= 4	; TWI Status
   253: .equ	TWS5	= 5	; TWI Status
   254: .equ	TWS6	= 6	; TWI Status
   255: .equ	TWS7	= 7	; TWI Status
   256: 
   257: ; TWDR - TWI Data register
   258: .equ	TWD0	= 0	; TWI Data Register Bit 0
   259: .equ	TWD1	= 1	; TWI Data Register Bit 1
   260: .equ	TWD2	= 2	; TWI Data Register Bit 2
   261: .equ	TWD3	= 3	; TWI Data Register Bit 3
   262: .equ	TWD4	= 4	; TWI Data Register Bit 4
   263: .equ	TWD5	= 5	; TWI Data Register Bit 5
   264: .equ	TWD6	= 6	; TWI Data Register Bit 6
   265: .equ	TWD7	= 7	; TWI Data Register Bit 7
   266: 
   267: ; TWAR - TWI (Slave) Address register
   268: .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
   269: .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
   270: .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
   271: .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
   272: .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
   273: .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
   274: .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
   275: .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
   276: 
   277: 
   278: ; ***** TIMER_COUNTER_1 **************
   279: ; TIMSK1 - Timer/Counter Interrupt Mask Register
   280: .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
   281: .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
   282: .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
   283: .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
   284: 
   285: ; TIFR1 - Timer/Counter Interrupt Flag register
   286: .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
   287: .equ	OCF1A	= 1	; Output Compare Flag 1A
   288: .equ	OCF1B	= 2	; Output Compare Flag 1B
   289: .equ	ICF1	= 5	; Input Capture Flag 1
   290: 
   291: ; TCCR1A - Timer/Counter1 Control Register A
   292: .equ	WGM10	= 0	; Waveform Generation Mode
   293: .equ	WGM11	= 1	; Waveform Generation Mode
   294: .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
   295: .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
   296: .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
   297: .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
   298: 
   299: ; TCCR1B - Timer/Counter1 Control Register B
   300: .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
   301: .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
   302: .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
   303: .equ	WGM12	= 3	; Waveform Generation Mode
   304: .equ	WGM13	= 4	; Waveform Generation Mode
   305: .equ	ICES1	= 6	; Input Capture 1 Edge Select
   306: .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
   307: 
   308: ; TCCR1C - Timer/Counter1 Control Register C
   309: .equ	FOC1B	= 6	; 
   310: .equ	FOC1A	= 7	; 
   311: 
   312: ; GTCCR - General Timer/Counter Control Register
   313: .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
   314: .equ	TSM	= 7	; Timer/Counter Synchronization Mode
   315: 
   316: 
   317: ; ***** TIMER_COUNTER_2 **************
   318: ; TIMSK2 - Timer/Counter Interrupt Mask register
   319: .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
   320: .equ	TOIE2A	= TOIE2	; For compatibility
   321: .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
   322: .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
   323: 
   324: ; TIFR2 - Timer/Counter Interrupt Flag Register
   325: .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
   326: .equ	OCF2A	= 1	; Output Compare Flag 2A
   327: .equ	OCF2B	= 2	; Output Compare Flag 2B
   328: 
   329: ; TCCR2A - Timer/Counter2 Control Register A
   330: .equ	WGM20	= 0	; Waveform Genration Mode
   331: .equ	WGM21	= 1	; Waveform Genration Mode
   332: .equ	COM2B0	= 4	; Compare Output Mode bit 0
   333: .equ	COM2B1	= 5	; Compare Output Mode bit 1
   334: .equ	COM2A0	= 6	; Compare Output Mode bit 1
   335: .equ	COM2A1	= 7	; Compare Output Mode bit 1
   336: 
   337: ; TCCR2B - Timer/Counter2 Control Register B
   338: .equ	CS20	= 0	; Clock Select bit 0
   339: .equ	CS21	= 1	; Clock Select bit 1
   340: .equ	CS22	= 2	; Clock Select bit 2
   341: .equ	WGM22	= 3	; Waveform Generation Mode
   342: .equ	FOC2B	= 6	; Force Output Compare B
   343: .equ	FOC2A	= 7	; Force Output Compare A
   344: 
   345: ; TCNT2 - Timer/Counter2
   346: .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
   347: .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
   348: .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
   349: .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
   350: .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
   351: .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
   352: .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
   353: .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
   354: 
   355: ; OCR2A - Timer/Counter2 Output Compare Register A
   356: .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
   357: .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
   358: .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
   359: .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
   360: .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
   361: .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
   362: .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
   363: .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
   364: 
   365: ; OCR2B - Timer/Counter2 Output Compare Register B
   366: .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
   367: .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
   368: .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
   369: .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
   370: .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
   371: .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
   372: .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
   373: .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
   374: 
   375: ; ASSR - Asynchronous Status Register
   376: .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
   377: .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
   378: .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
   379: .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
   380: .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
   381: .equ	AS2	= 5	; Asynchronous Timer/Counter2
   382: .equ	EXCLK	= 6	; Enable External Clock Input
   383: 
   384: ; GTCCR - General Timer Counter Control register
   385: .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
   386: .equ	PSR2	= PSRASY	; For compatibility
   387: ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
   388: 
   389: 
   390: ; ***** AD_CONVERTER *****************
   391: ; ADMUX - The ADC multiplexer Selection Register
   392: .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
   393: .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
   394: .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
   395: .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
   396: .equ	ADLAR	= 5	; Left Adjust Result
   397: .equ	REFS0	= 6	; Reference Selection Bit 0
   398: .equ	REFS1	= 7	; Reference Selection Bit 1
   399: 
   400: ; ADCSRA - The ADC Control and Status register A
   401: .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
   402: .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
   403: .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
   404: .equ	ADIE	= 3	; ADC Interrupt Enable
   405: .equ	ADIF	= 4	; ADC Interrupt Flag
   406: .equ	ADATE	= 5	; ADC  Auto Trigger Enable
   407: .equ	ADSC	= 6	; ADC Start Conversion
   408: .equ	ADEN	= 7	; ADC Enable
   409: 
   410: ; ADCSRB - The ADC Control and Status register B
   411: .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
   412: .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
   413: .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
   414: .equ	ACME	= 6	; 
   415: 
   416: ; ADCH - ADC Data Register High Byte
   417: .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
   418: .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
   419: .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
   420: .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
   421: .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
   422: .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
   423: .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
   424: .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
   425: 
   426: ; ADCL - ADC Data Register Low Byte
   427: .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
   428: .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
   429: .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
   430: .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
   431: .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
   432: .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
   433: .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
   434: .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
   435: 
   436: ; DIDR0 - Digital Input Disable Register
   437: .equ	ADC0D	= 0	; 
   438: .equ	ADC1D	= 1	; 
   439: .equ	ADC2D	= 2	; 
   440: .equ	ADC3D	= 3	; 
   441: .equ	ADC4D	= 4	; 
   442: .equ	ADC5D	= 5	; 
   443: 
   444: 
   445: ; ***** ANALOG_COMPARATOR ************
   446: ; ACSR - Analog Comparator Control And Status Register
   447: .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
   448: .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
   449: .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
   450: .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
   451: .equ	ACI	= 4	; Analog Comparator Interrupt Flag
   452: .equ	ACO	= 5	; Analog Compare Output
   453: .equ	ACBG	= 6	; Analog Comparator Bandgap Select
   454: .equ	ACD	= 7	; Analog Comparator Disable
   455: 
   456: ; DIDR1 - Digital Input Disable Register 1
   457: .equ	AIN0D	= 0	; AIN0 Digital Input Disable
   458: .equ	AIN1D	= 1	; AIN1 Digital Input Disable
   459: 
   460: 
   461: ; ***** PORTB ************************
   462: ; PORTB - Port B Data Register
   463: .equ	PORTB0	= 0	; Port B Data Register bit 0
   464: .equ	PB0	= 0	; For compatibility
   465: .equ	PORTB1	= 1	; Port B Data Register bit 1
   466: .equ	PB1	= 1	; For compatibility
   467: .equ	PORTB2	= 2	; Port B Data Register bit 2
   468: .equ	PB2	= 2	; For compatibility
   469: .equ	PORTB3	= 3	; Port B Data Register bit 3
   470: .equ	PB3	= 3	; For compatibility
   471: .equ	PORTB4	= 4	; Port B Data Register bit 4
   472: .equ	PB4	= 4	; For compatibility
   473: .equ	PORTB5	= 5	; Port B Data Register bit 5
   474: .equ	PB5	= 5	; For compatibility
   475: .equ	PORTB6	= 6	; Port B Data Register bit 6
   476: .equ	PB6	= 6	; For compatibility
   477: .equ	PORTB7	= 7	; Port B Data Register bit 7
   478: .equ	PB7	= 7	; For compatibility
   479: 
   480: ; DDRB - Port B Data Direction Register
   481: .equ	DDB0	= 0	; Port B Data Direction Register bit 0
   482: .equ	DDB1	= 1	; Port B Data Direction Register bit 1
   483: .equ	DDB2	= 2	; Port B Data Direction Register bit 2
   484: .equ	DDB3	= 3	; Port B Data Direction Register bit 3
   485: .equ	DDB4	= 4	; Port B Data Direction Register bit 4
   486: .equ	DDB5	= 5	; Port B Data Direction Register bit 5
   487: .equ	DDB6	= 6	; Port B Data Direction Register bit 6
   488: .equ	DDB7	= 7	; Port B Data Direction Register bit 7
   489: 
   490: ; PINB - Port B Input Pins
   491: .equ	PINB0	= 0	; Port B Input Pins bit 0
   492: .equ	PINB1	= 1	; Port B Input Pins bit 1
   493: .equ	PINB2	= 2	; Port B Input Pins bit 2
   494: .equ	PINB3	= 3	; Port B Input Pins bit 3
   495: .equ	PINB4	= 4	; Port B Input Pins bit 4
   496: .equ	PINB5	= 5	; Port B Input Pins bit 5
   497: .equ	PINB6	= 6	; Port B Input Pins bit 6
   498: .equ	PINB7	= 7	; Port B Input Pins bit 7
   499: 
   500: 
   501: ; ***** PORTC ************************
   502: ; PORTC - Port C Data Register
   503: .equ	PORTC0	= 0	; Port C Data Register bit 0
   504: .equ	PC0	= 0	; For compatibility
   505: .equ	PORTC1	= 1	; Port C Data Register bit 1
   506: .equ	PC1	= 1	; For compatibility
   507: .equ	PORTC2	= 2	; Port C Data Register bit 2
   508: .equ	PC2	= 2	; For compatibility
   509: .equ	PORTC3	= 3	; Port C Data Register bit 3
   510: .equ	PC3	= 3	; For compatibility
   511: .equ	PORTC4	= 4	; Port C Data Register bit 4
   512: .equ	PC4	= 4	; For compatibility
   513: .equ	PORTC5	= 5	; Port C Data Register bit 5
   514: .equ	PC5	= 5	; For compatibility
   515: .equ	PORTC6	= 6	; Port C Data Register bit 6
   516: .equ	PC6	= 6	; For compatibility
   517: 
   518: ; DDRC - Port C Data Direction Register
   519: .equ	DDC0	= 0	; Port C Data Direction Register bit 0
   520: .equ	DDC1	= 1	; Port C Data Direction Register bit 1
   521: .equ	DDC2	= 2	; Port C Data Direction Register bit 2
   522: .equ	DDC3	= 3	; Port C Data Direction Register bit 3
   523: .equ	DDC4	= 4	; Port C Data Direction Register bit 4
   524: .equ	DDC5	= 5	; Port C Data Direction Register bit 5
   525: .equ	DDC6	= 6	; Port C Data Direction Register bit 6
   526: 
   527: ; PINC - Port C Input Pins
   528: .equ	PINC0	= 0	; Port C Input Pins bit 0
   529: .equ	PINC1	= 1	; Port C Input Pins bit 1
   530: .equ	PINC2	= 2	; Port C Input Pins bit 2
   531: .equ	PINC3	= 3	; Port C Input Pins bit 3
   532: .equ	PINC4	= 4	; Port C Input Pins bit 4
   533: .equ	PINC5	= 5	; Port C Input Pins bit 5
   534: .equ	PINC6	= 6	; Port C Input Pins bit 6
   535: 
   536: 
   537: ; ***** PORTD ************************
   538: ; PORTD - Port D Data Register
   539: .equ	PORTD0	= 0	; Port D Data Register bit 0
   540: .equ	PD0	= 0	; For compatibility
   541: .equ	PORTD1	= 1	; Port D Data Register bit 1
   542: .equ	PD1	= 1	; For compatibility
   543: .equ	PORTD2	= 2	; Port D Data Register bit 2
   544: .equ	PD2	= 2	; For compatibility
   545: .equ	PORTD3	= 3	; Port D Data Register bit 3
   546: .equ	PD3	= 3	; For compatibility
   547: .equ	PORTD4	= 4	; Port D Data Register bit 4
   548: .equ	PD4	= 4	; For compatibility
   549: .equ	PORTD5	= 5	; Port D Data Register bit 5
   550: .equ	PD5	= 5	; For compatibility
   551: .equ	PORTD6	= 6	; Port D Data Register bit 6
   552: .equ	PD6	= 6	; For compatibility
   553: .equ	PORTD7	= 7	; Port D Data Register bit 7
   554: .equ	PD7	= 7	; For compatibility
   555: 
   556: ; DDRD - Port D Data Direction Register
   557: .equ	DDD0	= 0	; Port D Data Direction Register bit 0
   558: .equ	DDD1	= 1	; Port D Data Direction Register bit 1
   559: .equ	DDD2	= 2	; Port D Data Direction Register bit 2
   560: .equ	DDD3	= 3	; Port D Data Direction Register bit 3
   561: .equ	DDD4	= 4	; Port D Data Direction Register bit 4
   562: .equ	DDD5	= 5	; Port D Data Direction Register bit 5
   563: .equ	DDD6	= 6	; Port D Data Direction Register bit 6
   564: .equ	DDD7	= 7	; Port D Data Direction Register bit 7
   565: 
   566: ; PIND - Port D Input Pins
   567: .equ	PIND0	= 0	; Port D Input Pins bit 0
   568: .equ	PIND1	= 1	; Port D Input Pins bit 1
   569: .equ	PIND2	= 2	; Port D Input Pins bit 2
   570: .equ	PIND3	= 3	; Port D Input Pins bit 3
   571: .equ	PIND4	= 4	; Port D Input Pins bit 4
   572: .equ	PIND5	= 5	; Port D Input Pins bit 5
   573: .equ	PIND6	= 6	; Port D Input Pins bit 6
   574: .equ	PIND7	= 7	; Port D Input Pins bit 7
   575: 
   576: 
   577: ; ***** TIMER_COUNTER_0 **************
   578: ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
   579: .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
   580: .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
   581: .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
   582: 
   583: ; TIFR0 - Timer/Counter0 Interrupt Flag register
   584: .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
   585: .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
   586: .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
   587: 
   588: ; TCCR0A - Timer/Counter  Control Register A
   589: .equ	WGM00	= 0	; Waveform Generation Mode
   590: .equ	WGM01	= 1	; Waveform Generation Mode
   591: .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
   592: .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
   593: .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
   594: .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
   595: 
   596: ; TCCR0B - Timer/Counter Control Register B
   597: .equ	CS00	= 0	; Clock Select
   598: .equ	CS01	= 1	; Clock Select
   599: .equ	CS02	= 2	; Clock Select
   600: .equ	WGM02	= 3	; 
   601: .equ	FOC0B	= 6	; Force Output Compare B
   602: .equ	FOC0A	= 7	; Force Output Compare A
   603: 
   604: ; TCNT0 - Timer/Counter0
   605: .equ	TCNT0_0	= 0	; 
   606: .equ	TCNT0_1	= 1	; 
   607: .equ	TCNT0_2	= 2	; 
   608: .equ	TCNT0_3	= 3	; 
   609: .equ	TCNT0_4	= 4	; 
   610: .equ	TCNT0_5	= 5	; 
   611: .equ	TCNT0_6	= 6	; 
   612: .equ	TCNT0_7	= 7	; 
   613: 
   614: ; OCR0A - Timer/Counter0 Output Compare Register
   615: .equ	OCR0A_0	= 0	; 
   616: .equ	OCR0A_1	= 1	; 
   617: .equ	OCR0A_2	= 2	; 
   618: .equ	OCR0A_3	= 3	; 
   619: .equ	OCR0A_4	= 4	; 
   620: .equ	OCR0A_5	= 5	; 
   621: .equ	OCR0A_6	= 6	; 
   622: .equ	OCR0A_7	= 7	; 
   623: 
   624: ; OCR0B - Timer/Counter0 Output Compare Register
   625: .equ	OCR0B_0	= 0	; 
   626: .equ	OCR0B_1	= 1	; 
   627: .equ	OCR0B_2	= 2	; 
   628: .equ	OCR0B_3	= 3	; 
   629: .equ	OCR0B_4	= 4	; 
   630: .equ	OCR0B_5	= 5	; 
   631: .equ	OCR0B_6	= 6	; 
   632: .equ	OCR0B_7	= 7	; 
   633: 
   634: ; GTCCR - General Timer/Counter Control Register
   635: ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
   636: .equ	PSR10	= PSRSYNC	; For compatibility
   637: ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
   638: 
   639: 
   640: ; ***** EXTERNAL_INTERRUPT ***********
   641: ; EICRA - External Interrupt Control Register
   642: .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
   643: .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
   644: .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
   645: .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
   646: 
   647: ; EIMSK - External Interrupt Mask Register
   648: .equ	INT0	= 0	; External Interrupt Request 0 Enable
   649: .equ	INT1	= 1	; External Interrupt Request 1 Enable
   650: 
   651: ; EIFR - External Interrupt Flag Register
   652: .equ	INTF0	= 0	; External Interrupt Flag 0
   653: .equ	INTF1	= 1	; External Interrupt Flag 1
   654: 
   655: ; PCICR - Pin Change Interrupt Control Register
   656: .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
   657: .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
   658: .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
   659: 
   660: ; PCMSK2 - Pin Change Mask Register 2
   661: .equ	PCINT16	= 0	; Pin Change Enable Mask 16
   662: .equ	PCINT17	= 1	; Pin Change Enable Mask 17
   663: .equ	PCINT18	= 2	; Pin Change Enable Mask 18
   664: .equ	PCINT19	= 3	; Pin Change Enable Mask 19
   665: .equ	PCINT20	= 4	; Pin Change Enable Mask 20
   666: .equ	PCINT21	= 5	; Pin Change Enable Mask 21
   667: .equ	PCINT22	= 6	; Pin Change Enable Mask 22
   668: .equ	PCINT23	= 7	; Pin Change Enable Mask 23
   669: 
   670: ; PCMSK1 - Pin Change Mask Register 1
   671: .equ	PCINT8	= 0	; Pin Change Enable Mask 8
   672: .equ	PCINT9	= 1	; Pin Change Enable Mask 9
   673: .equ	PCINT10	= 2	; Pin Change Enable Mask 10
   674: .equ	PCINT11	= 3	; Pin Change Enable Mask 11
   675: .equ	PCINT12	= 4	; Pin Change Enable Mask 12
   676: .equ	PCINT13	= 5	; Pin Change Enable Mask 13
   677: .equ	PCINT14	= 6	; Pin Change Enable Mask 14
   678: 
   679: ; PCMSK0 - Pin Change Mask Register 0
   680: .equ	PCINT0	= 0	; Pin Change Enable Mask 0
   681: .equ	PCINT1	= 1	; Pin Change Enable Mask 1
   682: .equ	PCINT2	= 2	; Pin Change Enable Mask 2
   683: .equ	PCINT3	= 3	; Pin Change Enable Mask 3
   684: .equ	PCINT4	= 4	; Pin Change Enable Mask 4
   685: .equ	PCINT5	= 5	; Pin Change Enable Mask 5
   686: .equ	PCINT6	= 6	; Pin Change Enable Mask 6
   687: .equ	PCINT7	= 7	; Pin Change Enable Mask 7
   688: 
   689: ; PCIFR - Pin Change Interrupt Flag Register
   690: .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
   691: .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
   692: .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
   693: 
   694: 
   695: ; ***** SPI **************************
   696: ; SPDR - SPI Data Register
   697: .equ	SPDR0	= 0	; SPI Data Register bit 0
   698: .equ	SPDR1	= 1	; SPI Data Register bit 1
   699: .equ	SPDR2	= 2	; SPI Data Register bit 2
   700: .equ	SPDR3	= 3	; SPI Data Register bit 3
   701: .equ	SPDR4	= 4	; SPI Data Register bit 4
   702: .equ	SPDR5	= 5	; SPI Data Register bit 5
   703: .equ	SPDR6	= 6	; SPI Data Register bit 6
   704: .equ	SPDR7	= 7	; SPI Data Register bit 7
   705: 
   706: ; SPSR - SPI Status Register
   707: .equ	SPI2X	= 0	; Double SPI Speed Bit
   708: .equ	WCOL	= 6	; Write Collision Flag
   709: .equ	SPIF	= 7	; SPI Interrupt Flag
   710: 
   711: ; SPCR - SPI Control Register
   712: .equ	SPR0	= 0	; SPI Clock Rate Select 0
   713: .equ	SPR1	= 1	; SPI Clock Rate Select 1
   714: .equ	CPHA	= 2	; Clock Phase
   715: .equ	CPOL	= 3	; Clock polarity
   716: .equ	MSTR	= 4	; Master/Slave Select
   717: .equ	DORD	= 5	; Data Order
   718: .equ	SPE	= 6	; SPI Enable
   719: .equ	SPIE	= 7	; SPI Interrupt Enable
   720: 
   721: 
   722: ; ***** CPU **************************
   723: ; SREG - Status Register
   724: .equ	SREG_C	= 0	; Carry Flag
   725: .equ	SREG_Z	= 1	; Zero Flag
   726: .equ	SREG_N	= 2	; Negative Flag
   727: .equ	SREG_V	= 3	; Two's Complement Overflow Flag
   728: .equ	SREG_S	= 4	; Sign Bit
   729: .equ	SREG_H	= 5	; Half Carry Flag
   730: .equ	SREG_T	= 6	; Bit Copy Storage
   731: .equ	SREG_I	= 7	; Global Interrupt Enable
   732: 
   733: ; OSCCAL - Oscillator Calibration Value
   734: .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
   735: .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
   736: .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
   737: .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
   738: .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
   739: .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
   740: .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
   741: .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
   742: 
   743: ; CLKPR - Clock Prescale Register
   744: .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
   745: .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
   746: .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
   747: .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
   748: .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
   749: 
   750: ; SPMCSR - Store Program Memory Control Register
   751: .equ	SELFPRGEN	= 0	; Self Programming Enable
   752: .equ	PGERS	= 1	; Page Erase
   753: .equ	PGWRT	= 2	; Page Write
   754: .equ	BLBSET	= 3	; Boot Lock Bit Set
   755: .equ	RWWSRE	= 4	; Read-While-Write section read enable
   756: .equ	RWWSB	= 6	; Read-While-Write Section Busy
   757: .equ	SPMIE	= 7	; SPM Interrupt Enable
   758: 
   759: ; MCUCR - MCU Control Register
   760: .equ	PUD	= 4	; 
   761: 
   762: ; MCUSR - MCU Status Register
   763: .equ	PORF	= 0	; Power-on reset flag
   764: .equ	EXTRF	= 1	; External Reset Flag
   765: .equ	EXTREF	= EXTRF	; For compatibility
   766: .equ	BORF	= 2	; Brown-out Reset Flag
   767: .equ	WDRF	= 3	; Watchdog Reset Flag
   768: 
   769: ; SMCR - 
   770: .equ	SE	= 0	; 
   771: .equ	SM0	= 1	; 
   772: .equ	SM1	= 2	; 
   773: .equ	SM2	= 3	; 
   774: 
   775: ; GPIOR2 - General Purpose I/O Register 2
   776: .equ	GPIOR20	= 0	; 
   777: .equ	GPIOR21	= 1	; 
   778: .equ	GPIOR22	= 2	; 
   779: .equ	GPIOR23	= 3	; 
   780: .equ	GPIOR24	= 4	; 
   781: .equ	GPIOR25	= 5	; 
   782: .equ	GPIOR26	= 6	; 
   783: .equ	GPIOR27	= 7	; 
   784: 
   785: ; GPIOR1 - General Purpose I/O Register 1
   786: .equ	GPIOR10	= 0	; 
   787: .equ	GPIOR11	= 1	; 
   788: .equ	GPIOR12	= 2	; 
   789: .equ	GPIOR13	= 3	; 
   790: .equ	GPIOR14	= 4	; 
   791: .equ	GPIOR15	= 5	; 
   792: .equ	GPIOR16	= 6	; 
   793: .equ	GPIOR17	= 7	; 
   794: 
   795: ; GPIOR0 - General Purpose I/O Register 0
   796: .equ	GPIOR00	= 0	; 
   797: .equ	GPIOR01	= 1	; 
   798: .equ	GPIOR02	= 2	; 
   799: .equ	GPIOR03	= 3	; 
   800: .equ	GPIOR04	= 4	; 
   801: .equ	GPIOR05	= 5	; 
   802: .equ	GPIOR06	= 6	; 
   803: .equ	GPIOR07	= 7	; 
   804: 
   805: ; PRR - Power Reduction Register
   806: .equ	PRADC	= 0	; Power Reduction ADC
   807: .equ	PRUSART0	= 1	; Power Reduction USART
   808: .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
   809: .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
   810: .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
   811: .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
   812: .equ	PRTWI	= 7	; Power Reduction TWI
   813: 
   814: 
   815: ; ***** WATCHDOG *********************
   816: ; WDTCSR - Watchdog Timer Control Register
   817: .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
   818: .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
   819: .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
   820: .equ	WDE	= 3	; Watch Dog Enable
   821: .equ	WDCE	= 4	; Watchdog Change Enable
   822: .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
   823: .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
   824: .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
   825: 
   826: 
   827: ; ***** EEPROM ***********************
   828: ; EEARL - EEPROM Address Register Low Byte
   829: .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
   830: .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
   831: .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
   832: .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
   833: .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
   834: .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
   835: .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
   836: .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
   837: 
   838: ; EEDR - EEPROM Data Register
   839: .equ	EEDR0	= 0	; EEPROM Data Register bit 0
   840: .equ	EEDR1	= 1	; EEPROM Data Register bit 1
   841: .equ	EEDR2	= 2	; EEPROM Data Register bit 2
   842: .equ	EEDR3	= 3	; EEPROM Data Register bit 3
   843: .equ	EEDR4	= 4	; EEPROM Data Register bit 4
   844: .equ	EEDR5	= 5	; EEPROM Data Register bit 5
   845: .equ	EEDR6	= 6	; EEPROM Data Register bit 6
   846: .equ	EEDR7	= 7	; EEPROM Data Register bit 7
   847: 
   848: ; EECR - EEPROM Control Register
   849: .equ	EERE	= 0	; EEPROM Read Enable
   850: .equ	EEPE	= 1	; EEPROM Write Enable
   851: .equ	EEWE	= EEPE	; For compatibility
   852: .equ	EEMPE	= 2	; EEPROM Master Write Enable
   853: .equ	EEMWE	= EEMPE	; For compatibility
   854: .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
   855: .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
   856: .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
   857: 
   858: 
   859: 
   860: ; ***** LOCKSBITS ********************************************************
   861: .equ	LB1	= 0	; Lockbit
   862: .equ	LB2	= 1	; Lockbit
   863: 
   864: 
   865: ; ***** FUSES ************************************************************
   866: ; LOW fuse bits
   867: .equ	CKSEL0	= 0	; Select Clock Source
   868: .equ	CKSEL1	= 1	; Select Clock Source
   869: .equ	CKSEL2	= 2	; Select Clock Source
   870: .equ	CKSEL3	= 3	; Select Clock Source
   871: .equ	SUT0	= 4	; Select start-up time
   872: .equ	SUT1	= 5	; Select start-up time
   873: .equ	CKOUT	= 6	; Clock output
   874: .equ	CKDIV8	= 7	; Divide clock by 8
   875: 
   876: ; HIGH fuse bits
   877: .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
   878: .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
   879: .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
   880: .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
   881: .equ	WDTON	= 4	; Watchdog Timer Always On
   882: .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
   883: .equ	DWEN	= 6	; debugWIRE Enable
   884: .equ	RSTDISBL	= 7	; External reset disable
   885: 
   886: ; EXTENDED fuse bits
   887: ;.equ	SELFPRGEN	= 0	; Self Programming Enable
   888: 
   889: 
   890: 
   891: ; ***** CPU REGISTER DEFINITIONS *****************************************
   892: .def	XH	= r27
   893: .def	XL	= r26
   894: .def	YH	= r29
   895: .def	YL	= r28
   896: .def	ZH	= r31
   897: .def	ZL	= r30
   898: 
   899: 
   900: 
   901: ; ***** DATA MEMORY DECLARATIONS *****************************************
   902: .equ	FLASHEND	= 0x07ff	; Note: Word address
   903: .equ	IOEND	= 0x00ff
   904: .equ	SRAM_START	= 0x0100
   905: .equ	SRAM_SIZE	= 512
   906: .equ	RAMEND	= 0x02ff
   907: .equ	XRAMEND	= 0x0000
   908: .equ	E2END	= 0x00ff
   909: .equ	EEPROMEND	= 0x00ff
   910: .equ	EEADRBITS	= 8
   911: #pragma AVRPART MEMORY PROG_FLASH 4096
   912: #pragma AVRPART MEMORY EEPROM 256
   913: #pragma AVRPART MEMORY INT_SRAM SIZE 512
   914: #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
   915: 
   916: 
   917: 
   918: ; ***** BOOTLOADER DECLARATIONS ******************************************
   919: .equ	NRWW_START_ADDR	= 0x0
   920: .equ	NRWW_STOP_ADDR	= 0x7ff
   921: .equ	RWW_START_ADDR	= 0x0
   922: .equ	RWW_STOP_ADDR	= 0x0
   923: .equ	PAGESIZE	= 32
   924: 
   925: 
   926: 
   927: ; ***** INTERRUPT VECTORS ************************************************
   928: .equ	INT0addr	= 0x0001	; External Interrupt Request 0
   929: .equ	INT1addr	= 0x0002	; External Interrupt Request 1
   930: .equ	PCI0addr	= 0x0003	; Pin Change Interrupt Request 0
   931: .equ	PCI1addr	= 0x0004	; Pin Change Interrupt Request 0
   932: .equ	PCI2addr	= 0x0005	; Pin Change Interrupt Request 1
   933: .equ	WDTaddr	= 0x0006	; Watchdog Time-out Interrupt
   934: .equ	OC2Aaddr	= 0x0007	; Timer/Counter2 Compare Match A
   935: .equ	OC2Baddr	= 0x0008	; Timer/Counter2 Compare Match A
   936: .equ	OVF2addr	= 0x0009	; Timer/Counter2 Overflow
   937: .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
   938: .equ	OC1Aaddr	= 0x000b	; Timer/Counter1 Compare Match A
   939: .equ	OC1Baddr	= 0x000c	; Timer/Counter1 Compare Match B
   940: .equ	OVF1addr	= 0x000d	; Timer/Counter1 Overflow
   941: .equ	OC0Aaddr	= 0x000e	; TimerCounter0 Compare Match A
   942: .equ	OC0Baddr	= 0x000f	; TimerCounter0 Compare Match B
   943: .equ	OVF0addr	= 0x0010	; Timer/Couner0 Overflow
   944: .equ	SPIaddr	= 0x0011	; SPI Serial Transfer Complete
   945: .equ	URXCaddr	= 0x0012	; USART Rx Complete
   946: .equ	UDREaddr	= 0x0013	; USART, Data Register Empty
   947: .equ	UTXCaddr	= 0x0014	; USART Tx Complete
   948: .equ	ADCCaddr	= 0x0015	; ADC Conversion Complete
   949: .equ	ERDYaddr	= 0x0016	; EEPROM Ready
   950: .equ	ACIaddr	= 0x0017	; Analog Comparator
   951: .equ	TWIaddr	= 0x0018	; Two-wire Serial Interface
   952: .equ	SPMRaddr	= 0x0019	; Store Program Memory Read
   953: 
   954: .equ	INT_VECTORS_SIZE	= 26	; size in words
   955: 
   956: #endif  /* _M48DEF_INC_ */
   957: 
   958: ; ***** END OF FILE ******************************************************
  Continuing file ish.asm
     2: 
     3: .cseg
     4: .org 0
     5: 000000   EF0F  ldi R16,low(RAMEND) ;инициализация стека
     6: 000001   BF0D  out SPL,R16
     7: 000002   E002  ldi R16,high(RAMEND)
     8: 000003   BF0E  out SPH, R16
     9: 
    10: 000004   C005  RJMP WrTime
    11: 	.include "TWI_macro.inc"
  Including file TWI_macro.inc
     1: ;===============================================================================================
     2: ; TWI Init
     3: 
     4: 	.equ	DS1307		= 0b11010000	;Адрес часов
     5: 
     6: 	.equ	Start		= 0x08		;Прошел старт
     7: 	.equ	Restart		= 0x10		;Прошел Рестарт
     8: 	.equ	SLA_W_ACK	= 0x18		;Адрес + запись принят, получен ACK
     9: 	.equ	Byte_ACK	= 0x28		;Байт отправлен, получен ACK
    10: 	.equ	SLA_R_ACK	= 0x40		;Адрес + чтение принят, получен ACK
    11: 	.equ	RecB		= 0x50		;Байт получен, передан ACK
    12: 	.equ	RecB_NACK	= 0x58		;Байт получен, передан NACK
    13: 
    14: ;===============================================================================================
    15: ;Start
    16: 	.MACRO	TWI_START
    17: 	LDI R16, 1<<TWEN|1<<TWSTA|1<<TWINT	;START
    18: 	STS TWCR, R16
    19: 
    20: 	rcall wait1	;Ждем прерывания
    21: 	LDS R16, TWSR
    22: 	ANDI R16, 0XF8
    23: 	CPI R16, Start	;ПРОВЕРКА СТАРТА
    24: 	BREQ NoError
    25: 	LDI R16,1
    26: 	Mov R14,R16
    27: NoError:
    28: 	.ENDM
    29: 
    30: ;===============================================================================================
    31: ;ReStart
    32: 	.MACRO	TWI_RESTART
    33: 	LDI R16, 1<<TWEN|1<<TWSTA|1<<TWINT	;RESTART
    34: 	STS TWCR, R16
    35: 
    36: 	rcall wait1	;Ждем прерывания
    37: 	LDS R16, TWSR
    38: 	ANDI R16, 0XF8
    39: 	CPI R16, Restart	;ПРОВЕРКА СТАРТА
    40: 	BREQ NoError
    41: 	LDI R16,5
    42: 	Mov R14,R16
    43: NoError:
    44: 	.ENDM
    45: 
    46: ;===============================================================================================
    47: ;Stop
    48: 	.MACRO	TWI_STOP
    49: 	LDI R16, 1<<TWEN|1<<TWSTO|1<<TWINT	;STOP
    50: 	STS TWCR, R16
    51: 	.ENDM
    52: 
    53: ;===============================================================================================
    54: ;SLA_W
    55: 	.MACRO	TWI_SLA_W
    56: 	LDI R16,DS1307	;АДРЕС УСТРОЙСТВА
    57: 	STS TWDR, R16
    58: 	LDI R16, 1<<TWINT|1<<TWEN
    59: 	STS TWCR, R16
    60: 
    61: 	rcall wait1	;Ждем прерывания
    62: 	LDS R16, TWSR
    63: 	ANDI R16, 0XF8
    64: 	CPI R16, SLA_W_ACK	;ПРОВЕРКА ОТВЕТА НА АДРЕС
    65: 	BREQ NoError2
    66: 	LDI R16,3
    67: 	Mov R14,R16
    68: NoError2:
    69: 	.ENDM
    70: 
    71: 
    72: ;===============================================================================================
    73: ;SLA_R
    74: 	.MACRO	TWI_SLA_R
    75: 	LDI R16,DS1307|1<<0	;АДРЕС УСТРОЙСТВА
    76: 	STS TWDR, R16
    77: 	LDI R16, 1<<TWINT|1<<TWEN
    78: 	STS TWCR, R16
    79: 
    80: 	rcall wait1	;Ждем прерывания
    81: 	LDS R16, TWSR
    82: 	ANDI R16, 0XF8
    83: 	CPI R16, SLA_R_ACK	;ПРОВЕРКА ОТВЕТА НА АДРЕС
    84: 	BREQ NoError3
    85: 	LDI R16,7
    86: 	Mov R14,R16
    87: NoError3:
    88: 	.ENDM
    89: 
    90: ;===============================================================================================
    91: ;Send Byte
    92: 	.MACRO	TWI_SEND_B
    93: 	LDI R16,@0	;АДРЕС СЛОВА
    94: 	STS TWDR, R16
    95: 	LDI R16, 1<<TWINT|1<<TWEN
    96: 	STS TWCR, R16
    97: 
    98: 	rcall wait1	;Ждем прерывания
    99: 	LDS R16, TWSR
   100: 	ANDI R16, 0XF8
   101: 	CPI R16, Byte_ACK	;ПРОВЕРКА ПРИНЯТИЯ БАЙТА
   102: 	BREQ NoError4
   103: 	LDI R16,15
   104: 	Mov R14,R16
   105: NoError4:
   106: 	.ENDM
   107: 
   108: ;===============================================================================================
   109: ;Receive Byte + ACK
   110: 	.MACRO	TWI_READ_B_ACK
   111: 	LDI R16, 1<<TWINT|1<<TWEN|1<<TWEA	;Бум читать
   112: 	STS TWCR, R16
   113: 	rcall wait1	;Ждем прерывания
   114: 	LDS R16, TWSR
   115: 	ANDI R16, 0XF8
   116: 	CPI R16, RecB	;ПРОВЕРКА ЧТЕНИЯ
   117: 	BREQ NoError5
   118: 	LDI R16,31
   119: 	Mov R14,R16
   120: NoError5:	
   121: 	LDS R16, TWDR
   122: .ENDM
   123: 
   124: ;===============================================================================================
   125: ;Receive Byte + NACK
   126: 	.MACRO	TWI_READ_B_NACK
   127: 	LDI R16, 1<<TWINT|1<<TWEN|0<<TWEA	;Бум читать
   128: 	STS TWCR, R16
   129: 	rcall wait1	;Ждем прерывания
   130: 	LDS R16, TWSR
   131: 	ANDI R16, 0XF8
   132: 	CPI R16, RecB_NACK	;ПРОВЕРКА ЧТЕНИЯ
   133: 	BREQ NoError6
   134: 	LDI R16,63
   135: 	Mov R14,R16
   136: NoError6:	
   137: 	LDS R16, TWDR
   138: .ENDM
   139: ;===============================================================================================
   140: 
   141: 
   142: 
   143: 000005   9100  LDS R16, TWCR		;Ждем прерывания
        000006   00BC
   144: 000007   FF07  SBRS R16, TWINT
   145: 000008   CFFC  RJMP wait1
   146: 000009   9508  RET
  Continuing file ish.asm
    12: 
    13: 	
    14: 
    15: 00000A   E800  LDI R16,128	;НАстройка TWI
    16: 00000B   9300  STS TWBR, R16
        00000C   00B8
    17: 
    18: 
    19: 	TWI_START
    20: 000018   FCE0  SBRC R14,0
    21: 000019   C0A4  RJMP ERROR
    22: 
    23: 	TWI_SLA_W
    24: 000028   FCE0  SBRC R14,0
    25: 000029   C094  RJMP ERROR
    26: 
    27: 	TWI_SEND_B 0x00
    28: 000038   FCE0  SBRC R14,0
    29: 000039   C084  RJMP ERROR
    30: 
    31: 	TWI_SEND_B 0x00	;БАЙТ ДАННЫХ (СЕКУНДЫ)
    32: 000048   FCE0  SBRC R14,0
    33: 000049   C074  RJMP ERROR
    34: 
    35: 	TWI_SEND_B 0x49	;БАЙТ ДАННЫХ (МИНУТЫ)
    36: 000058   FCE0  SBRC R14,0
    37: 000059   C064  RJMP ERROR
    38: 
    39: 
    40: 	TWI_SEND_B 0x22	;БАЙТ ДАННЫХ (ЧАСЫ)
    41: 000068   FCE0  SBRC R14,0
    42: 000069   C054  RJMP ERROR
    43: 
    44: 
    45: 	TWI_SEND_B 0x04	;БАЙТ ДАННЫХ (ДЕНЬ НЕДЕЛИ)
    46: 000078   FCE0  SBRC R14,0
    47: 000079   C044  RJMP ERROR
    48: 
    49: 
    50: 	TWI_SEND_B 0x01	;БАЙТ ДАННЫХ (ДАТА)
    51: 000088   FCE0  SBRC R14,0
    52: 000089   C034  RJMP ERROR
    53: 
    54: 	TWI_SEND_B 0x01	;БАЙТ ДАННЫХ (МЕСЯЦ)
    55: 000098   FCE0  SBRC R14,0
    56: 000099   C024  RJMP ERROR
    57: 
    58: 	TWI_SEND_B 0x15	;БАЙТ ДАННЫХ (ГОД)
    59: 0000A8   FCE0  SBRC R14,0
    60: 0000A9   C014  RJMP ERROR
    61: 
    62: 	TWI_SEND_B 0x10	;БАЙТ ДАННЫХ (CONTROL) 1HZ
    63: 0000B8   FCE0  SBRC R14,0
    64: 0000B9   C004  RJMP ERROR
    65: 
    66: 	TWI_STOP
    67: 	
    68: 
    69: 0000BD   C002  RJMP Begin
    70: 
    71: 0000BE   0000  nop
    72: 0000BF   CFFE  RJMP ERROR
    73: 
    74: 
    75: 
    76: 
    77: Begin:
    78: 0000C0   0000  nop
    79: 
    80: 
    81: 0000C1   CFFE  RJMP Begin
    82: 
    83: 
    84: 
    85: 
    86: 
    87: 
 -> Warning 011: C-style instructions in file, lines ignored!
 -> Warning 001: 4 symbol(s) defined, but not used!

Program             :      194 words.
Constants           :        0 words.
Total program memory:      194 words.
Eeprom space        :        0 bytes.
Data segment        :        0 bytes.
Compilation completed, no errors.
Compilation endet 22.01.2015, 16:26:22
