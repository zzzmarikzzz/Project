gavrasm Gerd's AVR assembler version 3.4 (C)2014 by DG4FAC
----------------------------------------------------------
Source file: ish.asm
Hex file:    ish.hex
Eeprom file: ish.eep
Compiled:    19.03.2015, 20:19:18
Pass:        2
     1: .include "/home/marik/Project/m32Adef.inc"
  Including file /home/marik/Project/m32Adef.inc
     1: ;***** THIS IS A MACHINE GENERATED FILE - DO NOT EDIT ********************
     2: ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32A.xml ***********
     3: ;*************************************************************************
     4: ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
     5: ;* 
     6: ;* Number            : AVR000
     7: ;* File Name         : "m32Adef.inc"
     8: ;* Title             : Register/Bit Definitions for the ATmega32A
     9: ;* Date              : 2011-02-09
    10: ;* Version           : 2.35
    11: ;* Support E-mail    : avr@atmel.com
    12: ;* Target MCU        : ATmega32A
    13: ;* 
    14: ;* DESCRIPTION
    15: ;* When including this file in the assembly program file, all I/O register 
    16: ;* names and I/O register bit names appearing in the data book can be used.
    17: ;* In addition, the six registers forming the three data pointers X, Y and 
    18: ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
    19: ;* SRAM is also defined 
    20: ;* 
    21: ;* The Register names are represented by their hexadecimal address.
    22: ;* 
    23: ;* The Register Bit names are represented by their bit number (0-7).
    24: ;* 
    25: ;* Please observe the difference in using the bit names with instructions
    26: ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
    27: ;* (skip if bit in register set/cleared). The following example illustrates
    28: ;* this:
    29: ;* 
    30: ;* in    r16,PORTB             ;read PORTB latch
    31: ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
    32: ;* out   PORTB,r16             ;output to PORTB
    33: ;* 
    34: ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
    35: ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
    36: ;* rjmp  TOV0_is_set           ;jump if set
    37: ;* ...                         ;otherwise do something else
    38: ;*************************************************************************
    39: 
    40: #ifndef _M32ADEF_INC_
    41: #define _M32ADEF_INC_
    42: 
    43: 
    44: #pragma partinc 0
    45: 
    46: ; ***** SPECIFY DEVICE ***************************************************
    47: .device ATmega32A
    48: #pragma AVRPART ADMIN PART_NAME ATmega32A
    49: .equ	SIGNATURE_000	= 0x1e
    50: .equ	SIGNATURE_001	= 0x95
    51: .equ	SIGNATURE_002	= 0x02
    52: 
    53: #pragma AVRPART CORE CORE_VERSION V2E
    54: 
    55: 
    56: ; ***** I/O REGISTER DEFINITIONS *****************************************
    57: ; NOTE:
    58: ; Definitions marked "MEMORY MAPPED"are extended I/O ports
    59: ; and cannot be used with IN/OUT instructions
    60: .equ	SREG	= 0x3f
    61: .equ	SPL	= 0x3d
    62: .equ	SPH	= 0x3e
    63: .equ	OCR0	= 0x3c
    64: .equ	GICR	= 0x3b
    65: .equ	GIFR	= 0x3a
    66: .equ	TIMSK	= 0x39
    67: .equ	TIFR	= 0x38
    68: .equ	SPMCR	= 0x37
    69: .equ	TWCR	= 0x36
    70: .equ	MCUCR	= 0x35
    71: .equ	MCUCSR	= 0x34
    72: .equ	TCCR0	= 0x33
    73: .equ	TCNT0	= 0x32
    74: .equ	OSCCAL	= 0x31
    75: .equ	OCDR	= 0x31
    76: .equ	SFIOR	= 0x30
    77: .equ	TCCR1A	= 0x2f
    78: .equ	TCCR1B	= 0x2e
    79: .equ	TCNT1L	= 0x2c
    80: .equ	TCNT1H	= 0x2d
    81: .equ	OCR1AL	= 0x2a
    82: .equ	OCR1AH	= 0x2b
    83: .equ	OCR1BL	= 0x28
    84: .equ	OCR1BH	= 0x29
    85: .equ	ICR1L	= 0x26
    86: .equ	ICR1H	= 0x27
    87: .equ	TCCR2	= 0x25
    88: .equ	TCNT2	= 0x24
    89: .equ	OCR2	= 0x23
    90: .equ	ASSR	= 0x22
    91: .equ	WDTCR	= 0x21
    92: .equ	UBRRH	= 0x20
    93: .equ	UCSRC	= 0x20
    94: .equ	EEARL	= 0x1e
    95: .equ	EEARH	= 0x1f
    96: .equ	EEDR	= 0x1d
    97: .equ	EECR	= 0x1c
    98: .equ	PORTA	= 0x1b
    99: .equ	DDRA	= 0x1a
   100: .equ	PINA	= 0x19
   101: .equ	PORTB	= 0x18
   102: .equ	DDRB	= 0x17
   103: .equ	PINB	= 0x16
   104: .equ	PORTC	= 0x15
   105: .equ	DDRC	= 0x14
   106: .equ	PINC	= 0x13
   107: .equ	PORTD	= 0x12
   108: .equ	DDRD	= 0x11
   109: .equ	PIND	= 0x10
   110: .equ	SPDR	= 0x0f
   111: .equ	SPSR	= 0x0e
   112: .equ	SPCR	= 0x0d
   113: .equ	UDR	= 0x0c
   114: .equ	UCSRA	= 0x0b
   115: .equ	UCSRB	= 0x0a
   116: .equ	UBRRL	= 0x09
   117: .equ	ACSR	= 0x08
   118: .equ	ADMUX	= 0x07
   119: .equ	ADCSRA	= 0x06
   120: .equ	ADCH	= 0x05
   121: .equ	ADCL	= 0x04
   122: .equ	TWDR	= 0x03
   123: .equ	TWAR	= 0x02
   124: .equ	TWSR	= 0x01
   125: .equ	TWBR	= 0x00
   126: 
   127: 
   128: ; ***** BIT DEFINITIONS **************************************************
   129: 
   130: ; ***** EEPROM ***********************
   131: ; EEDR - EEPROM Data Register
   132: .equ	EEDR0	= 0	; EEPROM Data Register bit 0
   133: .equ	EEDR1	= 1	; EEPROM Data Register bit 1
   134: .equ	EEDR2	= 2	; EEPROM Data Register bit 2
   135: .equ	EEDR3	= 3	; EEPROM Data Register bit 3
   136: .equ	EEDR4	= 4	; EEPROM Data Register bit 4
   137: .equ	EEDR5	= 5	; EEPROM Data Register bit 5
   138: .equ	EEDR6	= 6	; EEPROM Data Register bit 6
   139: .equ	EEDR7	= 7	; EEPROM Data Register bit 7
   140: 
   141: ; EECR - EEPROM Control Register
   142: .equ	EERE	= 0	; EEPROM Read Enable
   143: .equ	EEWE	= 1	; EEPROM Write Enable
   144: .equ	EEMWE	= 2	; EEPROM Master Write Enable
   145: .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
   146: 
   147: 
   148: ; ***** WATCHDOG *********************
   149: ; WDTCR - Watchdog Timer Control Register
   150: .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
   151: .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
   152: .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
   153: .equ	WDE	= 3	; Watch Dog Enable
   154: .equ	WDTOE	= 4	; RW
   155: .equ	WDDE	= WDTOE	; For compatibility
   156: 
   157: 
   158: ; ***** EXTERNAL_INTERRUPT ***********
   159: ; GICR - General Interrupt Control Register
   160: .equ	GIMSK	= GICR	; For compatibility
   161: .equ	IVCE	= 0	; Interrupt Vector Change Enable
   162: .equ	IVSEL	= 1	; Interrupt Vector Select
   163: .equ	INT2	= 5	; External Interrupt Request 2 Enable
   164: .equ	INT0	= 6	; External Interrupt Request 0 Enable
   165: .equ	INT1	= 7	; External Interrupt Request 1 Enable
   166: 
   167: ; GIFR - General Interrupt Flag Register
   168: .equ	INTF2	= 5	; External Interrupt Flag 2
   169: .equ	INTF0	= 6	; External Interrupt Flag 0
   170: .equ	INTF1	= 7	; External Interrupt Flag 1
   171: 
   172: ; MCUCR - General Interrupt Control Register
   173: .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
   174: .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
   175: .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
   176: .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
   177: 
   178: ; MCUCSR - MCU Control And Status Register
   179: .equ	ISC2	= 6	; Interrupt Sense Control 2
   180: 
   181: 
   182: ; ***** TIMER_COUNTER_0 **************
   183: ; TCCR0 - Timer/Counter Control Register
   184: .equ	CS00	= 0	; Clock Select 1
   185: .equ	CS01	= 1	; Clock Select 1
   186: .equ	CS02	= 2	; Clock Select 2
   187: .equ	WGM01	= 3	; Waveform Generation Mode 1
   188: .equ	CTC0	= WGM01	; For compatibility
   189: .equ	COM00	= 4	; Compare match Output Mode 0
   190: .equ	COM01	= 5	; Compare Match Output Mode 1
   191: .equ	WGM00	= 6	; Waveform Generation Mode
   192: .equ	PWM0	= WGM00	; For compatibility
   193: .equ	FOC0	= 7	; Force Output Compare
   194: 
   195: ; TCNT0 - Timer/Counter Register
   196: .equ	TCNT0_0	= 0	; 
   197: .equ	TCNT0_1	= 1	; 
   198: .equ	TCNT0_2	= 2	; 
   199: .equ	TCNT0_3	= 3	; 
   200: .equ	TCNT0_4	= 4	; 
   201: .equ	TCNT0_5	= 5	; 
   202: .equ	TCNT0_6	= 6	; 
   203: .equ	TCNT0_7	= 7	; 
   204: 
   205: ; OCR0 - Output Compare Register
   206: .equ	OCR0_0	= 0	; 
   207: .equ	OCR0_1	= 1	; 
   208: .equ	OCR0_2	= 2	; 
   209: .equ	OCR0_3	= 3	; 
   210: .equ	OCR0_4	= 4	; 
   211: .equ	OCR0_5	= 5	; 
   212: .equ	OCR0_6	= 6	; 
   213: .equ	OCR0_7	= 7	; 
   214: 
   215: ; TIMSK - Timer/Counter Interrupt Mask Register
   216: .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
   217: .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
   218: 
   219: ; TIFR - Timer/Counter Interrupt Flag register
   220: .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
   221: .equ	OCF0	= 1	; Output Compare Flag 0
   222: 
   223: 
   224: ; ***** TIMER_COUNTER_2 **************
   225: ; TIMSK - Timer/Counter Interrupt Mask register
   226: .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
   227: .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
   228: 
   229: ; TIFR - Timer/Counter Interrupt Flag Register
   230: .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
   231: .equ	OCF2	= 7	; Output Compare Flag 2
   232: 
   233: ; TCCR2 - Timer/Counter2 Control Register
   234: .equ	CS20	= 0	; Clock Select bit 0
   235: .equ	CS21	= 1	; Clock Select bit 1
   236: .equ	CS22	= 2	; Clock Select bit 2
   237: .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
   238: .equ	CTC2	= WGM21	; For compatibility
   239: .equ	COM20	= 4	; Compare Output Mode bit 0
   240: .equ	COM21	= 5	; Compare Output Mode bit 1
   241: .equ	WGM20	= 6	; Pulse Width Modulator Enable
   242: .equ	PWM2	= WGM20	; For compatibility
   243: .equ	FOC2	= 7	; Force Output Compare
   244: 
   245: ; TCNT2 - Timer/Counter2
   246: .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
   247: .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
   248: .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
   249: .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
   250: .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
   251: .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
   252: .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
   253: .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
   254: 
   255: ; OCR2 - Timer/Counter2 Output Compare Register
   256: .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
   257: .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
   258: .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
   259: .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
   260: .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
   261: .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
   262: .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
   263: .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
   264: 
   265: ; ASSR - Asynchronous Status Register
   266: .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
   267: .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
   268: .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
   269: .equ	AS2	= 3	; Asynchronous Timer/counter2
   270: 
   271: 
   272: ; ***** TIMER_COUNTER_1 **************
   273: ; TIMSK - Timer/Counter Interrupt Mask Register
   274: .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
   275: .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
   276: .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
   277: .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
   278: 
   279: ; TIFR - Timer/Counter Interrupt Flag register
   280: .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
   281: .equ	OCF1B	= 3	; Output Compare Flag 1B
   282: .equ	OCF1A	= 4	; Output Compare Flag 1A
   283: .equ	ICF1	= 5	; Input Capture Flag 1
   284: 
   285: ; TCCR1A - Timer/Counter1 Control Register A
   286: .equ	WGM10	= 0	; Waveform Generation Mode
   287: .equ	PWM10	= WGM10	; For compatibility
   288: .equ	WGM11	= 1	; Waveform Generation Mode
   289: .equ	PWM11	= WGM11	; For compatibility
   290: .equ	FOC1B	= 2	; Force Output Compare 1B
   291: .equ	FOC1A	= 3	; Force Output Compare 1A
   292: .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
   293: .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
   294: .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
   295: .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
   296: 
   297: ; TCCR1B - Timer/Counter1 Control Register B
   298: .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
   299: .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
   300: .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
   301: .equ	WGM12	= 3	; Waveform Generation Mode
   302: .equ	CTC10	= WGM12	; For compatibility
   303: .equ	CTC1	= WGM12	; For compatibility
   304: .equ	WGM13	= 4	; Waveform Generation Mode
   305: .equ	CTC11	= WGM13	; For compatibility
   306: .equ	ICES1	= 6	; Input Capture 1 Edge Select
   307: .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
   308: 
   309: 
   310: ; ***** SPI **************************
   311: ; SPDR - SPI Data Register
   312: .equ	SPDR0	= 0	; SPI Data Register bit 0
   313: .equ	SPDR1	= 1	; SPI Data Register bit 1
   314: .equ	SPDR2	= 2	; SPI Data Register bit 2
   315: .equ	SPDR3	= 3	; SPI Data Register bit 3
   316: .equ	SPDR4	= 4	; SPI Data Register bit 4
   317: .equ	SPDR5	= 5	; SPI Data Register bit 5
   318: .equ	SPDR6	= 6	; SPI Data Register bit 6
   319: .equ	SPDR7	= 7	; SPI Data Register bit 7
   320: 
   321: ; SPSR - SPI Status Register
   322: .equ	SPI2X	= 0	; Double SPI Speed Bit
   323: .equ	WCOL	= 6	; Write Collision Flag
   324: .equ	SPIF	= 7	; SPI Interrupt Flag
   325: 
   326: ; SPCR - SPI Control Register
   327: .equ	SPR0	= 0	; SPI Clock Rate Select 0
   328: .equ	SPR1	= 1	; SPI Clock Rate Select 1
   329: .equ	CPHA	= 2	; Clock Phase
   330: .equ	CPOL	= 3	; Clock polarity
   331: .equ	MSTR	= 4	; Master/Slave Select
   332: .equ	DORD	= 5	; Data Order
   333: .equ	SPE	= 6	; SPI Enable
   334: .equ	SPIE	= 7	; SPI Interrupt Enable
   335: 
   336: 
   337: ; ***** USART ************************
   338: ; UDR - USART I/O Data Register
   339: .equ	UDR0	= 0	; USART I/O Data Register bit 0
   340: .equ	UDR1	= 1	; USART I/O Data Register bit 1
   341: .equ	UDR2	= 2	; USART I/O Data Register bit 2
   342: .equ	UDR3	= 3	; USART I/O Data Register bit 3
   343: .equ	UDR4	= 4	; USART I/O Data Register bit 4
   344: .equ	UDR5	= 5	; USART I/O Data Register bit 5
   345: .equ	UDR6	= 6	; USART I/O Data Register bit 6
   346: .equ	UDR7	= 7	; USART I/O Data Register bit 7
   347: 
   348: ; UCSRA - USART Control and Status Register A
   349: .equ	USR	= UCSRA	; For compatibility
   350: .equ	MPCM	= 0	; Multi-processor Communication Mode
   351: .equ	U2X	= 1	; Double the USART transmission speed
   352: .equ	UPE	= 2	; Parity Error
   353: .equ	PE	= UPE	; For compatibility
   354: .equ	DOR	= 3	; Data overRun
   355: .equ	FE	= 4	; Framing Error
   356: .equ	UDRE	= 5	; USART Data Register Empty
   357: .equ	TXC	= 6	; USART Transmitt Complete
   358: .equ	RXC	= 7	; USART Receive Complete
   359: 
   360: ; UCSRB - USART Control and Status Register B
   361: .equ	UCR	= UCSRB	; For compatibility
   362: .equ	TXB8	= 0	; Transmit Data Bit 8
   363: .equ	RXB8	= 1	; Receive Data Bit 8
   364: .equ	UCSZ2	= 2	; Character Size
   365: .equ	CHR9	= UCSZ2	; For compatibility
   366: .equ	TXEN	= 3	; Transmitter Enable
   367: .equ	RXEN	= 4	; Receiver Enable
   368: .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
   369: .equ	TXCIE	= 6	; TX Complete Interrupt Enable
   370: .equ	RXCIE	= 7	; RX Complete Interrupt Enable
   371: 
   372: ; UCSRC - USART Control and Status Register C
   373: .equ	UCPOL	= 0	; Clock Polarity
   374: .equ	UCSZ0	= 1	; Character Size
   375: .equ	UCSZ1	= 2	; Character Size
   376: .equ	USBS	= 3	; Stop Bit Select
   377: .equ	UPM0	= 4	; Parity Mode Bit 0
   378: .equ	UPM1	= 5	; Parity Mode Bit 1
   379: .equ	UMSEL	= 6	; USART Mode Select
   380: .equ	URSEL	= 7	; Register Select
   381: 
   382: .equ	UBRRHI	= UBRRH	; For compatibility
   383: 
   384: ; ***** ANALOG_COMPARATOR ************
   385: ; SFIOR - Special Function IO Register
   386: .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
   387: 
   388: ; ACSR - Analog Comparator Control And Status Register
   389: .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
   390: .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
   391: .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
   392: .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
   393: .equ	ACI	= 4	; Analog Comparator Interrupt Flag
   394: .equ	ACO	= 5	; Analog Compare Output
   395: .equ	ACBG	= 6	; Analog Comparator Bandgap Select
   396: .equ	ACD	= 7	; Analog Comparator Disable
   397: 
   398: 
   399: ; ***** AD_CONVERTER *****************
   400: ; ADMUX - The ADC multiplexer Selection Register
   401: .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
   402: .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
   403: .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
   404: .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
   405: .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
   406: .equ	ADLAR	= 5	; Left Adjust Result
   407: .equ	REFS0	= 6	; Reference Selection Bit 0
   408: .equ	REFS1	= 7	; Reference Selection Bit 1
   409: 
   410: ; ADCSRA - The ADC Control and Status register
   411: .equ	ADCSR	= ADCSRA	; For compatibility
   412: .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
   413: .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
   414: .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
   415: .equ	ADIE	= 3	; ADC Interrupt Enable
   416: .equ	ADIF	= 4	; ADC Interrupt Flag
   417: .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if
   418: .equ	ADFR	= ADATE	; For compatibility
   419: .equ	ADSC	= 6	; ADC Start Conversion
   420: .equ	ADEN	= 7	; ADC Enable
   421: 
   422: ; ADCH - ADC Data Register High Byte
   423: .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
   424: .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
   425: .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
   426: .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
   427: .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
   428: .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
   429: .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
   430: .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
   431: 
   432: ; ADCL - ADC Data Register Low Byte
   433: .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
   434: .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
   435: .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
   436: .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
   437: .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
   438: .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
   439: .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
   440: .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
   441: 
   442: ; SFIOR - Special Function IO Register
   443: .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
   444: .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
   445: .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
   446: 
   447: 
   448: ; ***** PORTA ************************
   449: ; PORTA - Port A Data Register
   450: .equ	PORTA0	= 0	; Port A Data Register bit 0
   451: .equ	PA0	= 0	; For compatibility
   452: .equ	PORTA1	= 1	; Port A Data Register bit 1
   453: .equ	PA1	= 1	; For compatibility
   454: .equ	PORTA2	= 2	; Port A Data Register bit 2
   455: .equ	PA2	= 2	; For compatibility
   456: .equ	PORTA3	= 3	; Port A Data Register bit 3
   457: .equ	PA3	= 3	; For compatibility
   458: .equ	PORTA4	= 4	; Port A Data Register bit 4
   459: .equ	PA4	= 4	; For compatibility
   460: .equ	PORTA5	= 5	; Port A Data Register bit 5
   461: .equ	PA5	= 5	; For compatibility
   462: .equ	PORTA6	= 6	; Port A Data Register bit 6
   463: .equ	PA6	= 6	; For compatibility
   464: .equ	PORTA7	= 7	; Port A Data Register bit 7
   465: .equ	PA7	= 7	; For compatibility
   466: 
   467: ; DDRA - Port A Data Direction Register
   468: .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
   469: .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
   470: .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
   471: .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
   472: .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
   473: .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
   474: .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
   475: .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
   476: 
   477: ; PINA - Port A Input Pins
   478: .equ	PINA0	= 0	; Input Pins, Port A bit 0
   479: .equ	PINA1	= 1	; Input Pins, Port A bit 1
   480: .equ	PINA2	= 2	; Input Pins, Port A bit 2
   481: .equ	PINA3	= 3	; Input Pins, Port A bit 3
   482: .equ	PINA4	= 4	; Input Pins, Port A bit 4
   483: .equ	PINA5	= 5	; Input Pins, Port A bit 5
   484: .equ	PINA6	= 6	; Input Pins, Port A bit 6
   485: .equ	PINA7	= 7	; Input Pins, Port A bit 7
   486: 
   487: 
   488: ; ***** PORTB ************************
   489: ; PORTB - Port B Data Register
   490: .equ	PORTB0	= 0	; Port B Data Register bit 0
   491: .equ	PB0	= 0	; For compatibility
   492: .equ	PORTB1	= 1	; Port B Data Register bit 1
   493: .equ	PB1	= 1	; For compatibility
   494: .equ	PORTB2	= 2	; Port B Data Register bit 2
   495: .equ	PB2	= 2	; For compatibility
   496: .equ	PORTB3	= 3	; Port B Data Register bit 3
   497: .equ	PB3	= 3	; For compatibility
   498: .equ	PORTB4	= 4	; Port B Data Register bit 4
   499: .equ	PB4	= 4	; For compatibility
   500: .equ	PORTB5	= 5	; Port B Data Register bit 5
   501: .equ	PB5	= 5	; For compatibility
   502: .equ	PORTB6	= 6	; Port B Data Register bit 6
   503: .equ	PB6	= 6	; For compatibility
   504: .equ	PORTB7	= 7	; Port B Data Register bit 7
   505: .equ	PB7	= 7	; For compatibility
   506: 
   507: ; DDRB - Port B Data Direction Register
   508: .equ	DDB0	= 0	; Port B Data Direction Register bit 0
   509: .equ	DDB1	= 1	; Port B Data Direction Register bit 1
   510: .equ	DDB2	= 2	; Port B Data Direction Register bit 2
   511: .equ	DDB3	= 3	; Port B Data Direction Register bit 3
   512: .equ	DDB4	= 4	; Port B Data Direction Register bit 4
   513: .equ	DDB5	= 5	; Port B Data Direction Register bit 5
   514: .equ	DDB6	= 6	; Port B Data Direction Register bit 6
   515: .equ	DDB7	= 7	; Port B Data Direction Register bit 7
   516: 
   517: ; PINB - Port B Input Pins
   518: .equ	PINB0	= 0	; Port B Input Pins bit 0
   519: .equ	PINB1	= 1	; Port B Input Pins bit 1
   520: .equ	PINB2	= 2	; Port B Input Pins bit 2
   521: .equ	PINB3	= 3	; Port B Input Pins bit 3
   522: .equ	PINB4	= 4	; Port B Input Pins bit 4
   523: .equ	PINB5	= 5	; Port B Input Pins bit 5
   524: .equ	PINB6	= 6	; Port B Input Pins bit 6
   525: .equ	PINB7	= 7	; Port B Input Pins bit 7
   526: 
   527: 
   528: ; ***** PORTC ************************
   529: ; PORTC - Port C Data Register
   530: .equ	PORTC0	= 0	; Port C Data Register bit 0
   531: .equ	PC0	= 0	; For compatibility
   532: .equ	PORTC1	= 1	; Port C Data Register bit 1
   533: .equ	PC1	= 1	; For compatibility
   534: .equ	PORTC2	= 2	; Port C Data Register bit 2
   535: .equ	PC2	= 2	; For compatibility
   536: .equ	PORTC3	= 3	; Port C Data Register bit 3
   537: .equ	PC3	= 3	; For compatibility
   538: .equ	PORTC4	= 4	; Port C Data Register bit 4
   539: .equ	PC4	= 4	; For compatibility
   540: .equ	PORTC5	= 5	; Port C Data Register bit 5
   541: .equ	PC5	= 5	; For compatibility
   542: .equ	PORTC6	= 6	; Port C Data Register bit 6
   543: .equ	PC6	= 6	; For compatibility
   544: .equ	PORTC7	= 7	; Port C Data Register bit 7
   545: .equ	PC7	= 7	; For compatibility
   546: 
   547: ; DDRC - Port C Data Direction Register
   548: .equ	DDC0	= 0	; Port C Data Direction Register bit 0
   549: .equ	DDC1	= 1	; Port C Data Direction Register bit 1
   550: .equ	DDC2	= 2	; Port C Data Direction Register bit 2
   551: .equ	DDC3	= 3	; Port C Data Direction Register bit 3
   552: .equ	DDC4	= 4	; Port C Data Direction Register bit 4
   553: .equ	DDC5	= 5	; Port C Data Direction Register bit 5
   554: .equ	DDC6	= 6	; Port C Data Direction Register bit 6
   555: .equ	DDC7	= 7	; Port C Data Direction Register bit 7
   556: 
   557: ; PINC - Port C Input Pins
   558: .equ	PINC0	= 0	; Port C Input Pins bit 0
   559: .equ	PINC1	= 1	; Port C Input Pins bit 1
   560: .equ	PINC2	= 2	; Port C Input Pins bit 2
   561: .equ	PINC3	= 3	; Port C Input Pins bit 3
   562: .equ	PINC4	= 4	; Port C Input Pins bit 4
   563: .equ	PINC5	= 5	; Port C Input Pins bit 5
   564: .equ	PINC6	= 6	; Port C Input Pins bit 6
   565: .equ	PINC7	= 7	; Port C Input Pins bit 7
   566: 
   567: 
   568: ; ***** PORTD ************************
   569: ; PORTD - Port D Data Register
   570: .equ	PORTD0	= 0	; Port D Data Register bit 0
   571: .equ	PD0	= 0	; For compatibility
   572: .equ	PORTD1	= 1	; Port D Data Register bit 1
   573: .equ	PD1	= 1	; For compatibility
   574: .equ	PORTD2	= 2	; Port D Data Register bit 2
   575: .equ	PD2	= 2	; For compatibility
   576: .equ	PORTD3	= 3	; Port D Data Register bit 3
   577: .equ	PD3	= 3	; For compatibility
   578: .equ	PORTD4	= 4	; Port D Data Register bit 4
   579: .equ	PD4	= 4	; For compatibility
   580: .equ	PORTD5	= 5	; Port D Data Register bit 5
   581: .equ	PD5	= 5	; For compatibility
   582: .equ	PORTD6	= 6	; Port D Data Register bit 6
   583: .equ	PD6	= 6	; For compatibility
   584: .equ	PORTD7	= 7	; Port D Data Register bit 7
   585: .equ	PD7	= 7	; For compatibility
   586: 
   587: ; DDRD - Port D Data Direction Register
   588: .equ	DDD0	= 0	; Port D Data Direction Register bit 0
   589: .equ	DDD1	= 1	; Port D Data Direction Register bit 1
   590: .equ	DDD2	= 2	; Port D Data Direction Register bit 2
   591: .equ	DDD3	= 3	; Port D Data Direction Register bit 3
   592: .equ	DDD4	= 4	; Port D Data Direction Register bit 4
   593: .equ	DDD5	= 5	; Port D Data Direction Register bit 5
   594: .equ	DDD6	= 6	; Port D Data Direction Register bit 6
   595: .equ	DDD7	= 7	; Port D Data Direction Register bit 7
   596: 
   597: ; PIND - Port D Input Pins
   598: .equ	PIND0	= 0	; Port D Input Pins bit 0
   599: .equ	PIND1	= 1	; Port D Input Pins bit 1
   600: .equ	PIND2	= 2	; Port D Input Pins bit 2
   601: .equ	PIND3	= 3	; Port D Input Pins bit 3
   602: .equ	PIND4	= 4	; Port D Input Pins bit 4
   603: .equ	PIND5	= 5	; Port D Input Pins bit 5
   604: .equ	PIND6	= 6	; Port D Input Pins bit 6
   605: .equ	PIND7	= 7	; Port D Input Pins bit 7
   606: 
   607: 
   608: ; ***** CPU **************************
   609: ; SREG - Status Register
   610: .equ	SREG_C	= 0	; Carry Flag
   611: .equ	SREG_Z	= 1	; Zero Flag
   612: .equ	SREG_N	= 2	; Negative Flag
   613: .equ	SREG_V	= 3	; Two's Complement Overflow Flag
   614: .equ	SREG_S	= 4	; Sign Bit
   615: .equ	SREG_H	= 5	; Half Carry Flag
   616: .equ	SREG_T	= 6	; Bit Copy Storage
   617: .equ	SREG_I	= 7	; Global Interrupt Enable
   618: 
   619: ; MCUCR - MCU Control Register
   620: ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
   621: ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
   622: ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
   623: ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
   624: .equ	SM0	= 4	; Sleep Mode Select
   625: .equ	SM1	= 5	; Sleep Mode Select
   626: .equ	SM2	= 6	; Sleep Mode Select
   627: .equ	SE	= 7	; Sleep Enable
   628: 
   629: ; MCUCSR - MCU Control And Status Register
   630: .equ	MCUSR	= MCUCSR	; For compatibility
   631: .equ	PORF	= 0	; Power-on reset flag
   632: .equ	EXTRF	= 1	; External Reset Flag
   633: .equ	BORF	= 2	; Brown-out Reset Flag
   634: .equ	WDRF	= 3	; Watchdog Reset Flag
   635: .equ	JTRF	= 4	; JTAG Reset Flag
   636: .equ	JTD	= 7	; JTAG Interface Disable
   637: 
   638: ; OSCCAL - Oscillator Calibration Value
   639: .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
   640: .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
   641: .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
   642: .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
   643: .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
   644: .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
   645: .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
   646: .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
   647: 
   648: ; SFIOR - Special Function IO Register
   649: .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
   650: .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
   651: .equ	PUD	= 2	; Pull-up Disable
   652: 
   653: 
   654: ; ***** BOOT_LOAD ********************
   655: ; SPMCR - Store Program Memory Control Register
   656: .equ	SPMEN	= 0	; Store Program Memory Enable
   657: .equ	PGERS	= 1	; Page Erase
   658: .equ	PGWRT	= 2	; Page Write
   659: .equ	BLBSET	= 3	; Boot Lock Bit Set
   660: .equ	RWWSRE	= 4	; Read While Write secion read enable
   661: .equ	ASRE	= RWWSRE	; For compatibility
   662: .equ	RWWSB	= 6	; Read While Write Section Busy
   663: .equ	ASB	= RWWSB	; For compatibility
   664: .equ	SPMIE	= 7	; SPM Interrupt Enable
   665: 
   666: 
   667: ; ***** TWI **************************
   668: ; TWBR - TWI Bit Rate register
   669: .equ	TWBR0	= 0	; 
   670: .equ	TWBR1	= 1	; 
   671: .equ	TWBR2	= 2	; 
   672: .equ	TWBR3	= 3	; 
   673: .equ	TWBR4	= 4	; 
   674: .equ	TWBR5	= 5	; 
   675: .equ	TWBR6	= 6	; 
   676: .equ	TWBR7	= 7	; 
   677: 
   678: ; TWCR - TWI Control Register
   679: .equ	TWIE	= 0	; TWI Interrupt Enable
   680: .equ	TWEN	= 2	; TWI Enable Bit
   681: .equ	TWWC	= 3	; TWI Write Collition Flag
   682: .equ	TWSTO	= 4	; TWI Stop Condition Bit
   683: .equ	TWSTA	= 5	; TWI Start Condition Bit
   684: .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
   685: .equ	TWINT	= 7	; TWI Interrupt Flag
   686: 
   687: ; TWSR - TWI Status Register
   688: .equ	TWPS0	= 0	; TWI Prescaler bits
   689: .equ	TWPS1	= 1	; TWI Prescaler bits
   690: .equ	TWS3	= 3	; TWI Status
   691: .equ	TWS4	= 4	; TWI Status
   692: .equ	TWS5	= 5	; TWI Status
   693: .equ	TWS6	= 6	; TWI Status
   694: .equ	TWS7	= 7	; TWI Status
   695: 
   696: ; TWDR - TWI Data register
   697: .equ	TWD0	= 0	; TWI Data Register Bit 0
   698: .equ	TWD1	= 1	; TWI Data Register Bit 1
   699: .equ	TWD2	= 2	; TWI Data Register Bit 2
   700: .equ	TWD3	= 3	; TWI Data Register Bit 3
   701: .equ	TWD4	= 4	; TWI Data Register Bit 4
   702: .equ	TWD5	= 5	; TWI Data Register Bit 5
   703: .equ	TWD6	= 6	; TWI Data Register Bit 6
   704: .equ	TWD7	= 7	; TWI Data Register Bit 7
   705: 
   706: ; TWAR - TWI (Slave) Address register
   707: .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
   708: .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
   709: .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
   710: .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
   711: .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
   712: .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
   713: .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
   714: .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
   715: 
   716: 
   717: 
   718: ; ***** LOCKSBITS ********************************************************
   719: .equ	LB1	= 0	; Lock bit
   720: .equ	LB2	= 1	; Lock bit
   721: .equ	BLB01	= 2	; Boot Lock bit
   722: .equ	BLB02	= 3	; Boot Lock bit
   723: .equ	BLB11	= 4	; Boot lock bit
   724: .equ	BLB12	= 5	; Boot lock bit
   725: 
   726: 
   727: ; ***** FUSES ************************************************************
   728: ; LOW fuse bits
   729: .equ	CKSEL0	= 0	; Select Clock Source
   730: .equ	CKSEL1	= 1	; Select Clock Source
   731: .equ	CKSEL2	= 2	; Select Clock Source
   732: .equ	CKSEL3	= 3	; Select Clock Source
   733: .equ	BODEN	= 6	; Brown out detector enable
   734: .equ	BODLEVEL	= 7	; Brown out detector trigger level
   735: 
   736: ; HIGH fuse bits
   737: .equ	BOOTRST	= 0	; Select Reset Vector
   738: .equ	BOOTSZ0	= 1	; Select Boot Size
   739: .equ	BOOTSZ1	= 2	; Select Boot Size
   740: .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
   741: .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
   742: .equ	JTAGEN	= 6	; Enable JTAG
   743: .equ	OCDEN	= 7	; Enable OCD
   744: 
   745: 
   746: 
   747: ; ***** CPU REGISTER DEFINITIONS *****************************************
   748: .def	XH	= r27
   749: .def	XL	= r26
   750: .def	YH	= r29
   751: .def	YL	= r28
   752: .def	ZH	= r31
   753: .def	ZL	= r30
   754: 
   755: 
   756: 
   757: ; ***** DATA MEMORY DECLARATIONS *****************************************
   758: .equ	FLASHEND	= 0x3fff	; Note: Word address
   759: .equ	IOEND	= 0x003f
   760: .equ	SRAM_START	= 0x0060
   761: .equ	SRAM_SIZE	= 2048
   762: .equ	RAMEND	= 0x085f
   763: .equ	XRAMEND	= 0x0000
   764: .equ	E2END	= 0x03ff
   765: .equ	EEPROMEND	= 0x03ff
   766: .equ	EEADRBITS	= 10
   767: #pragma AVRPART MEMORY PROG_FLASH 32768
   768: #pragma AVRPART MEMORY EEPROM 1024
   769: #pragma AVRPART MEMORY INT_SRAM SIZE 2048
   770: #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
   771: 
   772: 
   773: 
   774: ; ***** BOOTLOADER DECLARATIONS ******************************************
   775: .equ	NRWW_START_ADDR	= 0x3800
   776: .equ	NRWW_STOP_ADDR	= 0x3fff
   777: .equ	RWW_START_ADDR	= 0x0
   778: .equ	RWW_STOP_ADDR	= 0x37ff
   779: .equ	PAGESIZE	= 64
   780: .equ	FIRSTBOOTSTART	= 0x3f00
   781: .equ	SECONDBOOTSTART	= 0x3e00
   782: .equ	THIRDBOOTSTART	= 0x3c00
   783: .equ	FOURTHBOOTSTART	= 0x3800
   784: .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
   785: .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
   786: 
   787: 
   788: 
   789: ; ***** INTERRUPT VECTORS ************************************************
   790: .equ	INT0addr	= 0x0002	; External Interrupt Request 0
   791: .equ	INT1addr	= 0x0004	; External Interrupt Request 1
   792: .equ	INT2addr	= 0x0006	; External Interrupt Request 2
   793: .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
   794: .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
   795: .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
   796: .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
   797: .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
   798: .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
   799: .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
   800: .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
   801: .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
   802: .equ	URXCaddr	= 0x001a	; USART, Rx Complete
   803: .equ	UDREaddr	= 0x001c	; USART Data Register Empty
   804: .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
   805: .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
   806: .equ	ERDYaddr	= 0x0022	; EEPROM Ready
   807: .equ	ACIaddr	= 0x0024	; Analog Comparator
   808: .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
   809: .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
   810: 
   811: .equ	INT_VECTORS_SIZE	= 42	; size in words
   812: 
   813: #endif  /* _M32ADEF_INC_ */
   814: 
   815: ; ***** END OF FILE ******************************************************
   816: 
  Continuing file ish.asm
     2: ; Internal Hardware Init  ======================================
     3: 		.equ 	XTAL = 16000000 	
     4: 		.equ 	baudrate = 9600  
     5: 		.equ 	bauddivider = XTAL/(16*baudrate)-1
     6: 
     7: .def     ThC=R12	;Час Текущий (считанный)
     8: .def     TmC=R11	;Минута Текущая (считанная)
     9: 
    10: .def     Temp=R16
    11: .def     Temp2=R17
    12: .def     CNT=R18
    13: .def     OutByte=R20
    14: .def     OutByte2=R21
    15: 
    16: .equ	SEG7_DDR=DDRA
    17: .equ	SEG7_PORT=PortA
    18: .equ	DS=PA1
    19: .equ	SHcp=PA2
    20: .equ	STcp=PA3
    21: .equ	dot=3
    22: 
    23: .cseg
    24: .org 0
    25: 
    26: 
    27: RESET:	
    28: 000000   E50F  ldi R16,low(RAMEND) ;инициализация стека
    29: 000001   BF0D  out SPL,R16
    30: 000002   E008  ldi R16,high(RAMEND)
    31: 000003   BF0E  out SPH, R16
    32: 	
    33: 000004   E607  LDI 	R16, low(bauddivider)
    34: 000005   B909  OUT 	UBRRL,R16
    35: 000006   E000  LDI 	R16, high(bauddivider)
    36: 000007   BD00  OUT 	UBRRH,R16
    37: 
    38: 000008   E000  LDI 	R16,0
    39: 000009   B90B  OUT 	UCSRA, R16
    40:  
    41: ; Прерывания запрещены, прием-передача разрешен.
    42: 00000A   E108  LDI 	R16, (1<<RXEN)|(1<<TXEN)|(0<<RXCIE)|(0<<TXCIE)|(0<<UDRIE)
    43: 00000B   B90A  OUT 	UCSRB, R16	
    44: 
    45: ; Формат кадра - 8 бит, пишем в регистр UCSRC, за это отвечает бит селектор
    46: 00000C   E806  LDI 	R16, (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1)
    47: 00000D   BD00  OUT 	UCSRC, R16
    48: 
    49: 00000E   E00E  ldi Temp, 1<<DS|1<<SHcp|1<<STcp  ;настройка порта SEG7
    50: 00000F   B31A  in Temp2, SEG7_DDR
    51: 000010   7F11  ANDI Temp2, ~(1<<STcp|1<<SHcp|1<<DS)
    52: 000011   2B01  OR Temp, Temp2
    53: 000012   BB0A  out SEG7_DDR,Temp
    54: 	
    55: 000013   D0A8  Rcall Delay
    56: 000014   C008  RJMP Begin
    57: 
    58: sym_table:
    59: 	; Таблица символов 7SEG дисплея
    60: 	; Q0 = A, Q1 = E, Q2 = D, Q3 = dot,
    61: 	; Q4 = C, Q5 = F, Q6 = G,   Q7 = B
    62: 
    63: 	.DB 0b10110111, 0b10010000 ; 0, 1
        000015 90B7
    64: 	.DB 0b11000111, 0b11010101 ; 2, 3
        000016 D5C7
    65: 	.DB 0b11110000, 0b01110101 ; 4, 5
        000017 75F0
    66: 	.DB 0b01110111, 0b10010001 ; 6, 7
        000018 9177
    67: 	.DB 0b11110111, 0b11110101 ; 8, 9
        000019 F5F7
    68: 	.DB 0b00010110, 0b01100110 ; u, t
        00001A 6616
    69: 	.DB 0b00100111, 0b01010010 ; C, n
        00001B 5227
    70: 	.DB 0b01000010, 0b01100011 ; r, F
        00001C 6342
    71: 
    72: 00001D   D186  rcall OWReset
    73: 00001E   EC0C  ldi R16,0xCC
    74: 00001F   D1A1  rcall OWWriteByte
    75: 000020   EB0E  ldi R16,0xBE
    76: 000021   D19F  rcall OWWriteByte
    77: 000022   2700  clr R16
    78: 000023   D1B8  rcall OWReadByte
    79: 000024   2F60  MOV R22,R16
    80: 000025   D1B6  rcall OWReadByte
    81: 000026   2F70  MOV R23,R16
    82: 000027   D17C  rcall OWReset
    83: 000028   D200  rcall t_convert
    84: 000029   2F07  MOV R16,R23
    85: 00002A   2F16  MOV R17,R22
    86: 00002B   D225  rcall NumToASCII
    87: 00002C   D177  rcall OWReset
    88: 00002D   EC0C  ldi R16,0xCC
    89: 00002E   D192  rcall OWWriteByte
    90: 00002F   E404  ldi R16,0x44
    91: 000030   D190  rcall OWWriteByte
    92: 000031   E001  LDI Temp, 1<<PB0
    93: 000032   2EF0  MOV DHTDAT, Temp
    94: 000033   D0ED  Rcall DHT22Read
    95: 000034   D1B0  RCALL DHT22Convert
    96: 000035   E6E4  LDI ZL,Low(HumidTen)
    97: 000036   E0F0  LDI ZH,High(HumidTen)
    98: 000037   E6AF  LDI XL,Low(Humid2Ten)
    99: 000038   E0B0  LDI XH,High(Humid2Ten)
   100: 000039   E018  LDI R17, 8
   101: 00003A   9101  LD R16, Z+
   102: 00003B   930D  ST X+, R16
   103: 00003C   951A  DEC R17
   104: 00003D   F7E1  BRNE MovDHT
   105: 00003E   E002  LDI Temp, 1<<PB1
   106: 00003F   2EF0  MOV DHTDAT, Temp
   107: 000040   D0E0  Rcall DHT22Read
   108: 000041   D1A3  RCALL DHT22Convert
   109: 	
   110: 000042   9100  LDS R16, HumidTen
        000043   0064
   111: 000044   9502  SWAP R16
   112: 000045   2EC0  MOV R12, R16
   113: 000046   9100  LDS R16, HumidInt
        000047   0065
   114: 000048   0EC0  ADD R12, R16
   115: 000049   9100  LDS R16, HumidDec
        00004A   0066
   116: 00004B   9502  SWAP R16
   117: 00004C   2EB0  MOV R11, R16
   118: 
   119: 00004D   D09B  rcall BCDTo7SEG
   120: 00004E   9100  LDS R16, TimeToOut+2
        00004F   006D
   121: 000050   9300  STS TimeToOut+3, R16
        000051   006E
   122: 000052   9100  LDS R16, TimeToOut+1
        000053   006C
   123: 000054   9300  STS TimeToOut+2, R16
        000055   006D
   124: 000056   9100  LDS R16, TimeToOut
        000057   006B
   125: 000058   9300  STS TimeToOut+1, R16
        000059   006C
   126: 00005A   2700  CLR R16
   127: 00005B   9300  STS TimeToOut, R16
        00005C   006B
   128: 00005D   D05E  rcall Delay
   129: 	
   130: 00005E   9100  LDS R16, Humid2Ten
        00005F   006F
   131: 000060   9502  SWAP R16
   132: 000061   2EC0  MOV R12, R16
   133: 000062   9100  LDS R16, Humid2Int
        000063   0070
   134: 000064   0EC0  ADD R12, R16
   135: 000065   9100  LDS R16, Humid2Dec
        000066   0071
   136: 000067   9502  SWAP R16
   137: 000068   2EB0  MOV R11, R16
   138: 
   139: 000069   D07F  rcall BCDTo7SEG
   140: 00006A   9100  LDS R16, TimeToOut+2
        00006B   006D
   141: 00006C   9300  STS TimeToOut+3, R16
        00006D   006E
   142: 00006E   9100  LDS R16, TimeToOut+1
        00006F   006C
   143: 000070   9300  STS TimeToOut+2, R16
        000071   006D
   144: 000072   9100  LDS R16, TimeToOut
        000073   006B
   145: 000074   9300  STS TimeToOut+1, R16
        000075   006C
   146: 000076   2700  CLR R16
   147: 000077   9300  STS TimeToOut, R16
        000078   006B
   148: 000079   D042  rcall Delay
   149: 	
   150: 00007A   CFA2  RJMP Begin
   151: ;|----------------------------------------------------------------------
   152: ;| Процедура вывода на 7 сегментный индикатор
   153: ;| На входе: разряд в OutByte
   154: ;|           символ в OutByte2
   155: ;|----------------------------------------------------------------------
   156: 00007B   B10C  IN R16, UDR
   157: 00007C   3503  CPI R16, 0x53
   158: 00007D   F4E1  BRNE notrcv
   159: 	
   160: 00007E   E6E4  LDI ZL,Low(HumidTen)
   161: 00007F   E0F0  LDI ZH,High(HumidTen)  ;загрузка начального адреса Влажности
   162: 000080   D01A  RCALL DHTSend
   163: 000081   E009  LDI R16, 0x09	;Tab
   164: 000082   D045  rcall uart_snt
   165: 000083   E6EF  LDI ZL,Low(Humid2Ten)
   166: 000084   E0F0  LDI ZH,High(Humid2Ten)  ;загрузка начального адреса Влажности
   167: 000085   D015  RCALL DHTSend
   168: 	
   169: 	
   170: 000086   E009  LDI R16, 0x09	;Tab
   171: 000087   D040  rcall uart_snt
   172: 000088   E7EA  LDI ZL,Low(NumberInASCII)
   173: 000089   E0F0  LDI ZH,High(NumberInASCII)
   174: 00008A   9101  LD R16, Z+
   175: 00008B   3200  CPI R16, 0x20
   176: 00008C   F009  BREQ PC+1
   177: 00008D   D03A  rcall uart_snt
   178: 00008E   9101  LD R16, Z+
   179: 00008F   3200  CPI R16, 0x20
   180: 000090   F009  BREQ PC+1
   181: 000091   D036  rcall uart_snt
   182: 000092   9101  LD R16, Z+
   183: 000093   D034  rcall uart_snt
   184: 000094   9101  LD R16, Z+
   185: 000095   D032  rcall uart_snt
   186: 000096   8100  LD R16, Z
   187: 000097   D030  rcall uart_snt
   188: 000098   E00A  LDI R16, 0x0A	;На новую строку
   189: 000099   D02E  rcall uart_snt
   190: 
   191: notrcv:
   192: 00009A   9508  RET
   193: 	
   194: DHTSend:
   195: 00009B   9101  LD R16, Z+
   196: 00009C   5D00  SUBI R16, (-48)
   197: 00009D   D02A  RCALL uart_snt
   198: 00009E   9101  LD R16, Z+
   199: 00009F   5D00  SUBI R16, (-48)
   200: 0000A0   D027  RCALL uart_snt
   201: 0000A1   E20E  LDI R16, 0x2E	;Загружаем символ точки
   202: 0000A2   D025  RCALL uart_snt
   203: 0000A3   9101  LD R16, Z+
   204: 0000A4   5D00  SUBI R16, (-48)
   205: 0000A5   D022  RCALL uart_snt
   206: 
   207: 0000A6   E009  LDI R16, 0x09	;Tab
   208: 0000A7   D020  rcall uart_snt
   209: 0000A8   9101  LD R16, Z+
   210: 0000A9   3200  CPI R16, 0x20
   211: 0000AA   F009  BREQ PC+1
   212: 0000AB   D01C  rcall uart_snt
   213: 0000AC   9101  LD R16, Z+
   214: 0000AD   3200  CPI R16, 0x20
   215: 0000AE   F021  BREQ PC+4
   216: 0000AF   F008  BRLO PC+1
   217: 0000B0   C001  RJMP PC+1
   218: 0000B1   5D00  SUBI R16, (-48)
   219: 0000B2   D015  RCALL uart_snt
   220: 0000B3   9101  LD R16, Z+
   221: 0000B4   5D00  SUBI R16, (-48)
   222: 0000B5   D012  RCALL uart_snt
   223: 0000B6   E20E  LDI R16, 0x2E	;Загружаем символ точки
   224: 0000B7   D010  RCALL uart_snt
   225: 0000B8   8100  LD R16, Z
   226: 0000B9   5D00  SUBI R16, (-48)
   227: 0000BA   D00D  RCALL uart_snt
   228: 0000BB   9508  RET
   229: ;|----------------------------------------------------------------------
   230: ;|                               END
   231: ;|----------------------------------------------------------------------
   232: 
   233: 
   234: 0000BC   E000  LDI R16,0;задержка (0,0,24 - 0,5 секунды)
   235: 0000BD   2E30  MOV R3, R16
   236: 0000BE   E10E  LDI R16,30
   237: 0000BF   2E40  MOV R4, R16
   238: 
   239: 0000C0   D049  rcall TimeToSeg
   240: 0000C1   943A  dec R3
   241: 0000C2   F7E9  brne Loop1
   242: 	
   243: 0000C3   995F  SBIC 	UCSRA, RXC	; Пропуск если нет приёма
   244: 0000C4   DFB6  RCALL	uart_rcv
   245: 0000C5   944A  dec R4
   246: 0000C6   F7C9  brne Loop1
   247: 0000C7   9508  RET
   248: 
   249: ; Процедура отправки байта
   250: 0000C8   9B5D  SBIS 	UCSRA,UDRE	; Пропуск если нет флага готовности
   251: 0000C9   CFFE  RJMP	uart_snt 	; ждем готовности - флага UDRE
   252: 
   253: 0000CA   B90C  OUT	UDR, R16	; шлем байт
   254: 0000CB   9508  RET
   255: 
   256: 
   257: ;|----------------------------------------------------------------------
   258: ;| Процедура вывода на 7 сегментный индикатор
   259: ;| На входе: разряд в OutByte
   260: ;|           символ в OutByte2
   261: ;|----------------------------------------------------------------------
   262: Output:
   263: 0000CC   E020  ldi CNT,0
   264: 0000CD   9488  clc
   265: 0000CE   0F44  lsl OutByte
   266: 0000CF   F018  BRLO One		;переход если С=1
   267: 
   268: 0000D0   E004  ldi Temp, 0<<STcp|1<<SHcp|0<<DS
   269: 0000D1   D009  rcall EndWR
   270: 0000D2   C002  rjmp Check
   271: 
   272: 0000D3   E006  ldi Temp, 0<<STcp|1<<SHcp|1<<DS
   273: 0000D4   D006  rcall EndWR
   274: 
   275: 0000D5   E000  ldi Temp, 0<<STcp|0<<SHcp|0<<DS
   276: 0000D6   D004  rcall EndWR
   277: 
   278: 0000D7   9523  inc CNT
   279: 0000D8   3028  cpi CNT,0b00001000
   280: 0000D9   F031  breq STout
   281: 0000DA   CFF3  rjmp Next
   282: 
   283: 0000DB   B31B  in Temp2, SEG7_PORT
   284: 0000DC   7F11  ANDI Temp2, ~(1<<STcp|1<<SHcp|1<<DS)
   285: 0000DD   2B01  OR Temp, Temp2
   286: 0000DE   BB0B  out SEG7_PORT,Temp
   287: 0000DF   9508  ret
   288: 
   289: 0000E0   F01E  BRTS STend
   290: 0000E1   9468  SET
   291: 0000E2   2F45  MOV OutByte, OutByte2
   292: 0000E3   CFE8  rjmp Output
   293: 
   294: 0000E4   E008  ldi Temp, 1<<STcp|0<<SHcp|0<<DS	;Затолкали, теперь выводим.
   295: 0000E5   DFF5  rcall EndWR
   296: 0000E6   E000  ldi Temp, 0<<STcp|0<<SHcp|0<<DS
   297: 0000E7   DFF3  rcall EndWR
   298: 0000E8   9508  ret
   299: ;|----------------------------------------------------------------------
   300: ;|                               END
   301: ;|----------------------------------------------------------------------
   302: 
   303: 
   304: ;|----------------------------------------------------------------------
   305: ;| Процедура преобразования BCD времени в символы для 7 сегментного индикатора
   306: ;| На входе: минуты в R11
   307: ;|           часы в R12
   308: ;| На выходе: В TimeToOut - старший разряд часов,
   309: ;| в TimeToOut+1 - младний разряд часов,
   310: ;| в TimeToOut+2 - старший разряд минут,
   311: ;| в TimeToOut+3 - младний разряд минут
   312: ;|----------------------------------------------------------------------
   313: BCDTo7SEG:
   314: 0000E9   930F  PUSH Temp
   315: 0000EA   2D0C  MOV Temp, R12
   316: 0000EB   9502  SWAP Temp	;Поменять местами тетрады
   317: 0000EC   700F  ANDI Temp, 0b00001111
   318: 0000ED   D014  rcall FSym
   319: 0000EE   9300  STS TimeToOut, Temp
        0000EF   006B
   320: 
   321: 0000F0   2D0C  MOV Temp, R12
   322: 0000F1   700F  ANDI Temp, 0b00001111
   323: 0000F2   D00F  rcall FSym
   324: 0000F3   6008  ORI Temp, 1<<dot
   325: 0000F4   9300  STS TimeToOut+1, Temp
        0000F5   006C
   326: 
   327: 0000F6   2D0B  MOV Temp, R11
   328: 0000F7   9502  SWAP Temp	;Поменять местами тетрады
   329: 0000F8   700F  ANDI Temp, 0b00001111
   330: 0000F9   D008  rcall FSym
   331: 0000FA   9300  STS TimeToOut+2, Temp
        0000FB   006D
   332: 
   333: 0000FC   2D0B  MOV Temp, R11
   334: 0000FD   700F  ANDI Temp, 0b00001111
   335: 0000FE   D003  rcall FSym
   336: 0000FF   9300  STS TimeToOut+3, Temp
        000100   006E
   337: 
   338: 000101   C006  rjmp BCDTo7SEGend
   339: 
   340: FSym:	; Загрузить адрес таблицы символов
   341: 000102   E2EA  LDI ZL, LOW (2*sym_table)
   342: 000103   E0F0  LDI ZH, HIGH(2*sym_table)
   343: 	; Найти нужный символ
   344: 000104   0FE0  ADD ZL, Temp
   345: 	; Загрузить данные символа в R0
   346: 000105   95C8  LPM
   347: 000106   2D00  MOV Temp, R0
   348: 000107   9508  ret
   349: 
   350: BCDTo7SEGend:
   351: 000108   910F  POP Temp
   352: 000109   9508  RET
   353: ;|----------------------------------------------------------------------
   354: ;|                               END
   355: ;|----------------------------------------------------------------------
   356: 
   357: ;|----------------------------------------------------------------------
   358: ;| Процедура вывода времени
   359: ;|----------------------------------------------------------------------
   360: TimeToSeg:
   361: 00010A   B70F  IN Temp, SREG
   362: 00010B   930F  Push Temp
   363: 00010C   E6EB  ldi ZL,Low(TimeToOut)
   364: 00010D   E0F0  ldi ZH,High(TimeToOut)  ;загрузка начального адреса массива
   365: 00010E   9151  LD	OutByte2, Z+
   366: 00010F   EF4E  ldi OutByte, ~(1<<0) ;Первый символ
   367: 000110   94E8  CLT
   368: 000111   DFBA  rcall Output
   369: 
   370: 000112   9151  LD	OutByte2, Z+
   371: 000113   EF4D  ldi OutByte, ~(1<<1) ;Второй символ
   372: 000114   94E8  CLT
   373: 000115   DFB6  rcall Output
   374: 
   375: 000116   9151  LD	OutByte2, Z+
   376: 000117   EF4B  ldi OutByte, ~(1<<2) ;Третий символ
   377: 000118   94E8  CLT
   378: 000119   DFB2  rcall Output
   379: 
   380: 00011A   9151  LD	OutByte2, Z+
   381: 00011B   EF47  ldi OutByte, ~(1<<3) ;Четвертый символ
   382: 00011C   94E8  CLT
   383: 00011D   DFAE  rcall Output
   384: 00011E   910F  POP Temp
   385: 00011F   BF0F  OUT SREG, Temp
   386: 000120   9508  RET
   387: ;|----------------------------------------------------------------------
   388: ;|                               END
   389: ;|----------------------------------------------------------------------
   390: .include "dht22-multi.asm"
  Including file dht22-multi.asm
     1: 	.ifndef XTAL
     2: 		.error "XTAL must be defined!"
     3: 	.endif
     4: 
     5: 	.exit XTAL < 4000000	;XTAL слишком мал, возможна большая погрешность
     6: 
     7: 	.equ CYCL_PER_US=(XTAL/1000000)	; количество такотв на микросекунду
     8: 	.equ C4P=(CYCL_PER_US/4)		; 4 такта на одну микросекунду
     9: ;------------------------------------------------------------------------------
    10: ; Начальные установки для реализации протокола DHT22
    11: ;------------------------------------------------------------------------------
    12: 	.equ	DHTPORT	=	PORTB		; Порт МК, где висит DHT22
    13: 	.equ	DHTPIN	=	PINB		; Пин МК, где висит DHT22
    14: 	.equ	DHTDDR	=	DDRB		; DDR МК, где висит DHT22
    15: 	.def	DHTEMP	=	R14			; Временные данные
    16: 	.def	DHTDAT	=	R15			; Ножка порта, где висит DHT22
    17: 	.def	DHTCount =	R16			; Счетчик
    18: 	.def	DHTData0 =	R17			; Байт данных - Контрольная сумма
    19: 	.def	DHTData1 =	R18			; Байт данных - Младший байт температуры	(DHT22TLB)
    20: 	.def	DHTData2 =	R19			; Байт данных - Старший байт температуры	(DHT22TMB)
    21: 	.def	DHTData3 =	R20			; Байт данных - Младший байт влажности		(DHT22RHLB)
    22: 	.def	DHTData4 =	R21			; Байт данных - Старший байт влажности		(DHT22RHMB)
    23: ; ПЕРЕД ВЫЗОВОМ  DHT22Read ПОДОЖДАТЬ 0,5 СЕКУНДЫ!!!
    24: ;------------------------------------------------------------------------------
    25: 	.DSEG
    26: 	DHT22RHLB:	.byte	1
    27: 	DHT22RHMB:	.byte	1
    28: 	DHT22TLB:	.byte	1
    29: 	DHT22TMB:	.byte	1
    30: 	.CSEG
    31: DHT22Read:
    32: 000121   930F  PUSH DHTCount
    33: 000122   B70F  IN DHTCount, SREG
    34: 000123   94F8  CLI				;Запрещаем прерывания
    35: 000124   930F  PUSH DHTCount
    36: 000125   931F  PUSH DHTData0	;Сохраним содержимое регистров
    37: 000126   932F  PUSH DHTData1
    38: 000127   933F  PUSH DHTData2
    39: 000128   934F  PUSH DHTData3
    40: 000129   935F  PUSH DHTData4
    41: 00012A   94E8  CLT							;Очищаем флаг Т
    42: 00012B   B2E8  IN DHTEMP, DHTPORT
    43: 00012C   28EF  OR DHTEMP, DHTDAT
    44: 00012D   BAE8  OUT DHTPORT, DHTEMP
    45: ;	SBI DHTPORT, DHTDAT
    46: 00012E   B2E7  IN DHTEMP, DHTDDR
    47: 00012F   28EF  OR DHTEMP, DHTDAT
    48: 000130   BAE7  OUT DHTDDR, DHTEMP
    49: ;	SBI DHTDDR, DHTDAT
    50: 	;/////// Start ///////
    51: 000131   B2E8  IN DHTEMP, DHTPORT
    52: 000132   94F0  COM DHTDAT
    53: 000133   20EF  AND DHTEMP, DHTDAT
    54: 000134   BAE8  OUT DHTPORT, DHTEMP
    55: ;	CBI DHTPORT, DHTDAT			; ставим линию в 0
    56: 	
    57: 000135   E0B7  LDI		XH, HIGH(C4P*500)	; выжидаем 500 мкс (1/2 от 1мс)
    58: 000136   EDA0  LDI		XL, LOW(C4P*500)
    59: 000137   D05B  RCALL		DelayDHT22
    60: 000138   E0B7  LDI		XH, HIGH(C4P*500)	; выжидаем 500 мкс (необходимое время реакции устройств на сброс)
    61: 000139   EDA0  LDI		XL, LOW(C4P*500)
    62: 00013A   D058  RCALL		DelayDHT22
    63: 00013B   B2E7  IN DHTEMP, DHTDDR
    64: 00013C   20EF  AND DHTEMP, DHTDAT
    65: 00013D   BAE7  OUT DHTDDR, DHTEMP
    66: ;	CBI DHTDDR, DHTDAT			; ставим линию в 1
    67: 00013E   E0B0  LDI		XH, HIGH(C4P*40)	; выжидаем 40 мкс (необходимое  время реакции устройств на сброс)
    68: 00013F   EAA0  LDI		XL, LOW(C4P*40)
    69: 000140   D052  RCALL		DelayDHT22
    70: 
    71: 000141   B2E7  IN DHTEMP, DHTDDR
    72: 000142   20EF  AND DHTEMP, DHTDAT
    73: 000143   BAE7  OUT DHTDDR, DHTEMP
    74: ;	CBI DHTDDR, DHTDAT			;переключаем на вход
    75: 000144   B2E8  IN DHTEMP, DHTPORT
    76: 000145   20EF  AND DHTEMP, DHTDAT
    77: 000146   BAE8  OUT DHTPORT, DHTEMP
    78: ;	CBI DHTPORT, DHTDAT
    79: 000147   E0B0  LDI		XH, HIGH(C4P*50)	; выжидаем 60 мкс (сенсор прижимает линию в 0 80 мкс)
    80: 000148   ECA8  LDI		XL, LOW(C4P*50)
    81: 000149   D049  RCALL		DelayDHT22
    82: 	
    83: 00014A   94F0  COM DHTDAT
    84: 00014B   B2E6  IN DHTEMP, DHTPIN
    85: 00014C   20EF  AND DHTEMP, DHTDAT
    86: 00014D   F009  BREQ DHTskip1
    87: ;	SBIC DHTPIN, DHTDAT
    88: 00014E   C038  RJMP DHT22ReadError			; Если 1, то датчик не ответил
    89: 
    90: DHTskip1:
    91: 00014F   E0B0  LDI		XH, HIGH(C4P*60)	; выжидаем 80 мкс (сенсор прижимает линию в 1 80 мкс)
    92: 000150   EFA0  LDI		XL, LOW(C4P*60)
    93: 000151   D041  RCALL		DelayDHT22
    94: 	
    95: 000152   B2E6  IN DHTEMP, DHTPIN
    96: 000153   20EF  AND DHTEMP, DHTDAT
    97: 000154   F409  BRNE WaitZero
    98: ;	SBIS DHTPIN, DHTDAT
    99: 000155   C031  RJMP DHT22ReadError			; Если 0, то датчик не ответил
   100: WaitZero:
   101: 000156   B2E6  IN DHTEMP, DHTPIN
   102: 000157   20EF  AND DHTEMP, DHTDAT
   103: 000158   F009  BREQ DHTskip2
   104: ;	SBIC DHTPIN, DHTDAT			; ждем 0 (начала передачи данных)
   105: 000159   CFFC  RJMP WaitZero
   106: 
   107: 	;///////// Передача данных /////////////
   108: DHTskip2:
   109: 00015A   2711  CLR DHTData0
   110: 00015B   2722  CLR DHTData1
   111: 00015C   2733  CLR DHTData2
   112: 00015D   2744  CLR DHTData3
   113: 00015E   2755  CLR DHTData4
   114: 00015F   E208  LDI DHTCount, 40
   115: ReadDhtBit:
   116: 000160   B2E6  IN DHTEMP, DHTPIN
   117: 000161   20EF  AND DHTEMP, DHTDAT
   118: 000162   F409  BRNE DHTskip3
   119: ;	SBIS DHTPIN, DHTDAT			; ждем 1 (начало бита)
   120: 000163   CFFC  RJMP ReadDhtBit
   121: DHTskip3:
   122: 000164   E0B0  LDI		XH, HIGH(C4P*50)	; выжидаем 50 мкс (передача 0 длится 26-28мкс, затем пауза 50мкс. )
   123: 000165   ECA8  LDI		XL, LOW(C4P*50)		; выжидаем 50 мкс (передача 1 длится    70мкс, затем пауза 50мкс. )
   124: 000166   D02C  RCALL		DelayDHT22
   125: 
   126: 000167   B2E6  IN DHTEMP, DHTPIN
   127: 000168   20EF  AND DHTEMP, DHTDAT
   128: 000169   F409  BRNE WaitZero2
   129: ;	SBIS DHTPIN, DHTDAT			; Если ещё 1 - значит отправлено 1
   130: 00016A   C006  RJMP DhtReadZero			; А Если уже 0 - значит отправлен 0
   131: WaitZero2:
   132: 00016B   B2E6  IN DHTEMP, DHTPIN
   133: 00016C   20EF  AND DHTEMP, DHTDAT
   134: 00016D   F009  BREQ DHTskip4
   135: ;	SBIC DHTPIN, DHTDAT			; Сразу дождемся 0
   136: 00016E   CFFC  RJMP WaitZero2
   137: DHTskip4:
   138: 00016F   9408  SEC
   139: 000170   C001  RJMP DhtWrBit
   140: 
   141: 000171   9488  CLC
   142: 
   143: DhtWrBit:				; Записываем полученный бит
   144: 000172   1F11  ROL DHTData0
   145: 000173   1F22  ROL DHTData1
   146: 000174   1F33  ROL DHTData2
   147: 000175   1F44  ROL DHTData3
   148: 000176   1F55  ROL DHTData4
   149: 000177   950A  DEC DHTCount
   150: 000178   F739  BRNE ReadDhtBit
   151: 
   152: 000179   1B12  SUB DHTData0, DHTData1	;Проверка контрольной суммы
   153: 00017A   1B13  SUB DHTData0, DHTData2
   154: 00017B   1B14  SUB DHTData0, DHTData3
   155: 00017C   1B15  SUB DHTData0, DHTData4
   156: 00017D   F449  BRNE DHT22ReadError		;Если не 0, значит контрольная сумма не сошлась
   157: 
   158: 00017E   9340  STS DHT22RHLB, DHTData3
        00017F   0060
   159: 000180   9350  STS DHT22RHMB, DHTData4
        000181   0061
   160: 000182   9320  STS DHT22TLB, DHTData1
        000183   0062
   161: 000184   9330  STS DHT22TMB, DHTData2
        000185   0063
   162: 000186   C001  RJMP DHT22ReadOut
   163: 
   164: DHT22ReadError:
   165: 000187   9468  SET
   166: 
   167: 000188   915F  POP DHTData4	;Вернём содержимое регистров
   168: 000189   914F  POP DHTData3	
   169: 00018A   913F  POP DHTData2
   170: 00018B   912F  POP DHTData1
   171: 00018C   911F  POP DHTData0
   172: 00018D   910F  POP DHTCount
   173: 00018E   F416  BRTC PC+2
   174: 00018F   6400  ORI DHTCount, 1<<6
   175: 000190   BF0F  OUT SREG, DHTCount
   176: 000191   910F  POP DHTCount
   177: 000192   9508  RET
   178: ;-----------------------------------------------------------------------
   179: ;   END
   180: ;-----------------------------------------------------------------------
   181: 
   182: DelayDHT22:
   183: 000193   9711  SBIW	XH:XL, 1			; 2 такта
   184: 000194   F7F1  BRNE	DelayDHT22		; 1/2
   185: 000195   9508  RET							; 4
  Continuing file ish.asm
   391: .include "1-wire.asm"
  Including file 1-wire.asm
     1: ;------------------------------------------------------------------------------
     2: ; http://avr-mcu.dxp.pl
     3: ; (c) Radoslaw Kwiecien, 2008
     4: ; 
     5: ; Перевод StarXXX, http://hardisoft.ru, 2009
     6: ;------------------------------------------------------------------------------
     7: 
     8: 
     9: 
    10: ;------------------------------------------------------------------------------
    11: ; Начальные установки для реализации протокола 1-Wire
    12: ;------------------------------------------------------------------------------
    13: .equ	OW_PORT	= PORTB				; Порт МК, где висит 1-Wire
    14: .equ	OW_PIN	= PINB				; Порт МК, где висит 1-Wire
    15: .equ	OW_DDR	= DDRB				; Порт МК, где висит 1-Wire
    16: .equ	OW_DQ	= PB2				; Ножка порта, где висит 1-Wire
    17: 
    18: .def	OWCount = r17				; Счетчик
    19: ;------------------------------------------------------------------------------
    20: 
    21: 
    22: ;.cseg
    23: 
    24: .include 	"wait.asm"			; Подключаем модуль временных задержек
  Including file wait.asm
     1: ;------------------------------------------------------------------------------
     2: ; Busy-wait loops utilities module
     3: ; For F_CPU >= 4MHz
     4: ; http://avr-mcu.dxp.pl
     5: ; (c) Radoslaw Kwiecien, 2008
     6: ; 
     7: ; Перевод StarXXX, http://hardisoft.ru, 2009
     8: ;------------------------------------------------------------------------------
     9: 
    10: ;------------------------------------------------------------------------------
    11: ; Модуль временных задержек
    12: ;
    13: ; !!! Для работы модуля необходимо объявить константу F_CPU равную тактовой частоте в герцах !!!
    14: ;
    15: ; !!! задержки действительны для тактовой частоты >= 4 МГц !!!
    16: 
    17: 
    18: ; задержки приблизительны! Чем больше задержка, тем точнее,
    19: ; т.е. при частоте 4МГц задержка в 1 микросекунду, учитывая время вызова подпрограммы и возврата из нее составит 2,5 микросекунды
    20: ; задержка в 10 микросекунд составит 11,5 микросекунд
    21: ; задержка в 100 мкс на самом деле будет 101,5 мкс
    22: ; тоесть, к каждой задержке добавится 1,5 мкс - это время на вызов подпрограммы и на выход из нее
    23: ;------------------------------------------------------------------------------
    24: 
    25: 
    26: 
    27: .ifndef XTAL
    28: 	.error "XTAL must be defined!"
    29: .endif
    30: 
    31: 
    32: .exit XTAL < 4000000	;XTAL too low, possible wrong delay
    33: 
    34: .equ CYCLES_PER_US=(XTAL/1000000)	; количество такотв на микросекунду
    35: .equ C4PUS=(CYCLES_PER_US/4)		; 4 такта на одну микросекунду
    36: ;.equ DVUS(x)=(C4PUS*x)		; вычисляет величину для указанного времени в микросекундах, которую нужно передать Wait4xCycles чтобы получить желаемую задержку
    37: 
    38: ;--------------------------------------------------------------------------------------------------------------
    39: ; Подпрограмма задержки. В цикле отъедается 4 такта на каждую итерацию, кроме последней. В последней - 3 такта.
    40: ; Итого, для получения нужной задержки в микросекундах надо вызывать эту функцию предварительно
    41: ; обработав параметр макросом DVUS:
    42: ;	ldi    XH, HIGH(DVUS(500))
    43: ; 	ldi    XL, LOW(DVUS(500))
    44: ; 	rcall  Wait4xCycles ; пауза 500 микросекунд
    45: ;--------------------------------------------------------------------------------------------------------------
    46: ; Input : XH:XL - number of CPU cycles to wait (divided by four)
    47: ;--------------------------------------------------------------------------------------------------------------
    48: Wait4xCycles:
    49: 000196   9711  sbiw	XH:XL, 1			; 2 такта
    50: 000197   F7F1  brne	Wait4xCycles		; 1/2
    51: 000198   9508  ret							; 4
    52: 
    53: 
    54: ;------------------------------------------------------------------------------
    55: ; Подпрограмма генерирует необходимую задержку в милисекундах
    56: ; На входе: r16 = количество милисекунд
    57: ;------------------------------------------------------------------------------
    58: ; Input : r16 - number of miliseconds to wait
    59: ;------------------------------------------------------------------------------
    60: WaitMiliseconds:
    61: 000199   930F  push 	r16
    62: WaitMsLoop: 
    63: 00019A   E0B7  ldi    XH,HIGH(C4PUS*500)
    64: 00019B   EDA0  ldi    XL,LOW(C4PUS*500)
    65: 00019C   DFF9  rcall  Wait4xCycles
    66: 00019D   E0B7  ldi    XH,HIGH(C4PUS*500)
    67: 00019E   EDA0  ldi    XL,LOW(C4PUS*500)
    68: 00019F   DFF6  rcall  Wait4xCycles
    69: 0001A0   950A  dec    r16
    70: 0001A1   F7C1  brne   WaitMsLoop
    71: 0001A2   910F  pop    r16
    72: 0001A3   9508  ret
    73: ;------------------------------------------------------------------------------
    74: ; End of file
    75: ;------------------------------------------------------------------------------
  Continuing file 1-wire.asm
    25: 
    26: 
    27: ;------------------------------------------------------------------------------
    28: ; СБРОС
    29: ; Каждая передача по протоколу 1-Wire начинается с сигнала Reset.
    30: ; После вызова этой процедуры в флаге Т регистра SGER содержится бит 
    31: ; присутствия: 1 - если на шине нет устройств, 0 - если есть
    32: ;------------------------------------------------------------------------------
    33: ; Output : T - presence bit
    34: ;------------------------------------------------------------------------------
    35: OWReset:
    36: 0001A4   98C2  cbi		OW_PORT,OW_DQ		; Выводим в порт 0
    37: 0001A5   9ABA  sbi		OW_DDR,OW_DQ		; Переключаем порт на вывод
    38: 
    39: 0001A6   E0B7  ldi		XH, HIGH(C4PUS*470)	; Ждем 470 микросекунд при придавленной в 0 линии. Это и есть импульс сброса.
    40: 0001A7   E5A8  ldi		XL, LOW(C4PUS*470)
    41: 0001A8   DFED  rcall		Wait4xCycles
    42: 	
    43: 0001A9   98BA  cbi		OW_DDR,OW_DQ		; Переключаем порт на ввод
    44: 
    45: 0001AA   E0B1  ldi		XH, HIGH(C4PUS*70)	; выжидаем 70 мкс (необходимое минимальное время реакции устройств на сброс)
    46: 0001AB   E1A8  ldi		XL, LOW(C4PUS*70)
    47: 0001AC   DFE9  rcall		Wait4xCycles
    48: 
    49: 0001AD   9468  set							; Устанавливаем флаг Т в 1
    50: 0001AE   9BB2  sbis	OW_PIN,OW_DQ		; Если на линии после паузы осталась 1, значит устройств 1-Wire на ней нет. Пропускаем след. команду
    51: 0001AF   94E8  clt							; Линия была в 0 - значит на ней кто-то есть, и ответил нам импульсом PRESENCE
    52: 
    53: 0001B0   E0B3  ldi		XH, HIGH(C4PUS*240)	; Пауза 240 мкс после сброса
    54: 0001B1   ECA0  ldi		XL, LOW(C4PUS*240)
    55: 0001B2   DFE3  rcall		Wait4xCycles
    56: 
    57: 0001B3   9508  ret
    58: 
    59: 
    60: ;------------------------------------------------------------------------------
    61: ; ОТПРАВКА 1 БИТА
    62: ; Эта процедура отправляет 1 бит в линию 1-Wire.
    63: ; Отправляемый бит должен быть помещен в флаг С статусного регистра
    64: ;------------------------------------------------------------------------------
    65: ; Input : C - bit to write
    66: ;------------------------------------------------------------------------------
    67: OWWriteBit:
    68: 0001B4   F418  brcc	OWWriteZero			; Если флаг С = 0, то переход на OWWriteZero
    69: 0001B5   E0B0  ldi		XH, HIGH(C4PUS*1)	; Для посылки 1 линию нужно придавить в 0 всего на 1 мкс
    70: 0001B6   E0A4  ldi		XL, LOW(C4PUS*1)
    71: 0001B7   C002  rjmp	OWWriteOne			; переходим к отправке
    72: OWWriteZero:	
    73: 0001B8   E0B1  ldi		XH, HIGH(C4PUS*120)	; Для посылки 0 линию нужно придавить в 0 на 120 мкс
    74: 0001B9   EEA0  ldi		XL, LOW(C4PUS*120)
    75: OWWriteOne:
    76: 0001BA   9ABA  sbi		OW_DDR, OW_DQ		; Переводим порт на выход, а там уже был 0, соответственно и линия придавливается в 0
    77: 0001BB   DFDA  rcall	Wait4xCycles		; ждем
    78: 0001BC   98BA  cbi		OW_DDR, OW_DQ		; Переводим порт на вход
    79: 	
    80: 0001BD   E0B0  ldi		XH, HIGH(C4PUS*60)	; Должна быть пауза между таймслотами, вообще-то от 1 мкс, но здесь сделали 60 мкс
    81: 0001BE   EFA0  ldi		XL, LOW(C4PUS*60)
    82: 0001BF   DFD6  rcall	Wait4xCycles
    83: 0001C0   9508  ret
    84: 
    85: 
    86: ;------------------------------------------------------------------------------
    87: ; ОТПРАВКА 1 БАЙТА
    88: ; Эта процедура отправляет 1 байт в линию 1-Wire.
    89: ; Отправляемый байт должен быть помещен в регистр r16
    90: ;------------------------------------------------------------------------------
    91: ; Input : r16 - byte to write
    92: ;------------------------------------------------------------------------------
    93: OWWriteByte:
    94: 0001C1   931F  push	OWCount			; Сохраняем регистр счетчика
    95: 0001C2   E010  ldi		OWCount,0		; Взводим в нём нолик
    96: 
    97: OWWriteLoop:				
    98: 0001C3   9507  ror		r16				; Сдвигаем байт вправо через флаг C
    99: 0001C4   DFEF  rcall	OWWriteBit		; отправляем в линию
   100: 0001C5   9513  inc		OWCount			; увеличиваем счетчик
   101: 0001C6   3018  cpi		OWCount,8		; проверяем на 8
   102: 0001C7   F7D9  brne	OWWriteLoop		; если меньше - следующий бит
   103: 0001C8   911F  pop		OWCount			; восстанавливаем регистр-счетчик
   104: 0001C9   9508  ret
   105: 
   106: 
   107: 
   108: ;------------------------------------------------------------------------------
   109: ; ЧТЕНИЕ 1 БИТА
   110: ; Эта процедура читает 1 бит из линии 1-Wire.
   111: ; Принятый бит помещается в флаг С статусного регистра
   112: ;------------------------------------------------------------------------------
   113: ; Output : C - bit from slave
   114: ;------------------------------------------------------------------------------
   115: OWReadBit:
   116: 0001CA   E0B0  ldi		XH, HIGH(C4PUS*1)	; Придавливаем линию в 0 на 1 мкс
   117: 0001CB   E0A4  ldi		XL, LOW(C4PUS*1)
   118: 0001CC   9ABA  sbi		OW_DDR, OW_DQ
   119: 0001CD   DFC8  rcall	Wait4xCycles
   120: 
   121: 0001CE   98BA  cbi		OW_DDR, OW_DQ		; Переводим порт на чтение
   122: 0001CF   E0B0  ldi		XH, HIGH(C4PUS*5)	; ждем 5 мкс
   123: 0001D0   E1A4  ldi		XL, LOW(C4PUS*5)
   124: 0001D1   DFC4  rcall	Wait4xCycles
   125: 
   126: 0001D2   94E8  clt							; Сбрасываем флаг Т
   127: 0001D3   99B2  sbic	OW_PIN,OW_DQ		; Если на линии 0 - то пропускаем следующую команду
   128: 0001D4   9468  set
   129: 
   130: 								; Итак, сейчас в регистре Т полученный бит
   131: 
   132: 0001D5   E0B0  ldi		XH, HIGH(C4PUS*50)	; выжидаем 50 мкс для окончания таймслота
   133: 0001D6   ECA8  ldi		XL, LOW(C4PUS*50)
   134: 0001D7   DFBE  rcall	Wait4xCycles
   135: 								; переносим флаг Т в флаг С
   136: 0001D8   9408  sec
   137: 0001D9   F00E  brts	OWReadBitEnd
   138: 0001DA   9488  clc
   139: 
   140: OWReadBitEnd:
   141: 0001DB   9508  ret
   142: 
   143: 
   144: 
   145: ;------------------------------------------------------------------------------
   146: ; ЧТЕНИЕ 1 БАЙТА
   147: ; Эта процедура читает 1 байт из линии 1-Wire.
   148: ; Принятый байт помещается регистр r16
   149: ;------------------------------------------------------------------------------
   150: ; Output : r16 - byte from slave
   151: ;------------------------------------------------------------------------------
   152: OWReadByte:
   153: 0001DC   931F  push	OWCount			; Сохраняем регистр-счетчик
   154: 0001DD   E010  ldi		OWCount,0		; и обнуляем его
   155: OWReadLoop:
   156: 0001DE   DFEB  rcall	OWReadBit		; читаем бит
   157: 0001DF   9507  ror		r16				; запихиваем его в r16 сдвигом вправо из флага С
   158: 0001E0   9513  inc		OWCount			; увеличиваем счетчик
   159: 0001E1   3018  cpi		OWCount,8		; уже 8?
   160: 0001E2   F7D9  brne	OWReadLoop		; нет - продолжаем считывать
   161: 0001E3   911F  pop		OWCount			; восстанавливаем регистр-счетчик
   162: 0001E4   9508  ret
   163: ;------------------------------------------------------------------------------
   164: ;
   165: ;------------------------------------------------------------------------------
   166: 
   167: 
   168: 
   169: 
   170: 
   171: ;.include 	"1-Wire Search.asm"		; Подключаем модуль поиска устройств на шине 1-Wire
   172: 
   173: 
   174: 
   175: 
  Continuing file ish.asm
   392: ;|---------------------------------------------------------------------------
   393: ;| Процедура разбивки байта на десятичные разряды
   394: ;| Также если 7й бит R16 = 1, то выводится знак "-"
   395: ;| На входе: целая часть в R16
   396: ;|         дробная часть в R17
   397: ;| На выходе: В NumberInASCII - старший разряд или "-",
   398: ;| в NumberInASCII+1 - средний разряд или "-",
   399: ;| в NumberInASCII+2 - младший разряд
   400: ;| в NumberInASCII+3 - символ точки
   401: ;| в NumberInASCII+4 - дробная часть
   402: ;| Также используется флаг Т
   403: ;|---------------------------------------------------------------------------
   404: 0001E5   930F  PUSH R16
   405: 0001E6   931F  PUSH R17
   406: 0001E7   932F  PUSH R18
   407: 0001E8   933F  PUSH R19
   408: 0001E9   934F  PUSH R20
   409: 0001EA   2722  CLR R18
   410: 0001EB   2733  CLR R19
   411: 0001EC   2744  CLR R20
   412: 0001ED   94E8  CLT
   413: 0001EE   9100  LDS R16, DHT22RHMB
        0001EF   0061
   414: 0001F0   9110  LDS R17, DHT22RHLB
        0001F1   0060
   415: 0001F2   3614  CPI R17,100
   416: 0001F3   0703  CPC R16, R19
   417: 0001F4   F020  BRLO DHTless100
   418: 0001F5   9523  INC R18
   419: 0001F6   5614  SUBI R17, 100
   420: 0001F7   4000  SBCI R16, 0
   421: 0001F8   CFF9  RJMP DHTmore100
   422: 
   423: 0001F9   301A  CPI R17,10
   424: 0001FA   F018  BRLO DHTless10
   425: 0001FB   9503  INC R16
   426: 0001FC   501A  SUBI R17, 10
   427: 0001FD   CFFB  RJMP DHTless100
   428: 
   429: 0001FE   F08E  BRTS DHTsaveT
   430: 0001FF   9320  STS HumidTen, R18
        000200   0064
   431: 000201   9300  STS HumidInt, R16
        000202   0065
   432: 000203   9310  STS HumidDec, R17
        000204   0066
   433: 000205   9468  SET 
   434: 000206   2722  CLR R18
   435: 000207   9100  LDS R16, DHT22TMB
        000208   0063
   436: 000209   9110  LDS R17, DHT22TLB
        00020A   0062
   437: 00020B   FF07  SBRS R16, 7
   438: 00020C   CFE5  RJMP DHTmore100
   439: 	;Флаг и удаление минуса
   440: 00020D   E042  LDI R20, 1<<1
   441: 00020E   770F  ANDI R16, ~(1<<7)
   442: 00020F   CFE2  RJMP DHTmore100
   443: 000210   E230  LDI R19, 0x20
   444: 000211   2322  TST R18
   445: 000212   F409  BRNE SignWR
   446: 000213   E220  LDI R18, 0x20
   447: 000214   2344  TST R20
   448: 000215   F029  BREQ DHTwrT
   449: 000216   3220  CPI R18, 0x20
   450: 000217   F011  BREQ Dhtbr
   451: 000218   E23D  LDI R19, 0x2D
   452: 000219   C001  RJMP DHTwrT
   453: 00021A   E22D  LDI R18, 0x2D
   454: 
   455: DHTwrT:
   456: 00021B   9330  STS TermSign, R19
        00021C   0067
   457: 00021D   9320  STS TermTen, R18
        00021E   0068
   458: 00021F   9300  STS TermInt, R16
        000220   0069
   459: 000221   9310  STS TermDec, R17
        000222   006A
   460: 000223   914F  POP R20
   461: 000224   913F  POP R19
   462: 000225   912F  POP R18
   463: 000226   911F  POP R17
   464: 000227   910F  POP R16
   465: 000228   9508  RET
   466: ;|---------------------------------------------------------------------------
   467: ;|                               END
   468: ;|---------------------------------------------------------------------------
   469: 
   470: ;|---------------------------------------------------------------------------
   471: ;| Процедура преобразования температуры
   472: ;| На входе: Младший байт в R22, Старший байт в R23
   473: ;| На выходе: дробная часть в R22, Целая часть со знаком в R23
   474: ;|---------------------------------------------------------------------------
   475: 000229   930F  PUSH R16
   476: 00022A   931F  PUSH R17
   477: 00022B   FF77  SBRS R23,7	;Если число положительное, то переходим к преобразованию дробной части
   478: 00022C   C007  rjmp IfPositiv
   479: 00022D   2700  CLR R16
   480: 00022E   2711  CLR R17
   481: 00022F   1B06  SUB R16, R22	;Переводим из дополнительного кода
   482: 000230   0B17  SBC R17, R23
   483: 000231   2F60  MOV R22, R16
   484: 000232   2F71  MOV R23, R17
   485: 000233   6078  ORI R23,1<<3	;ставим знак "-"
   486: 
   487: IfPositiv:
   488: 000234   2F06  mov R16, R22
   489: 000235   9506  lsr R16
   490: 000236   9506  lsr R16
   491: 000237   9506  lsr R16
   492: 000238   9506  lsr R16
   493: 000239   0F77  lsl R23
   494: 00023A   0F77  lsl R23
   495: 00023B   0F77  lsl R23
   496: 00023C   0F77  lsl R23
   497: 00023D   2B70  OR R23,R16	;Склеиваем целые части младшего и старшего байтов в один байт
   498: 
   499: 00023E   706F  ANDI R22,0b00001111	;Преобразуем дробную часть
   500: 00023F   2F06  mov R16, R22	;Нужно умножить на 10, для этого:
   501: 000240   0F00  lsl R16		;Умножаем на 2
   502: 000241   0F66  lsl R22
   503: 000242   0F66  lsl R22
   504: 000243   0F66  lsl R22		;Умножаем на 8
   505: 000244   0F60  ADD R22,R16	;Складываем и умножение на 10 готово
   506: 000245   9566  lsr R22
   507: 000246   9566  lsr R22
   508: 000247   9566  lsr R22
   509: 000248   9566  lsr R22		;Делим на 16
   510: 000249   3870  CPI R23, 1<<7	;Проверка на -0, если -0.0 надо убрать минус
   511: 00024A   F419  BRNE end_t_convert
   512: 00024B   2366  TST R22		;Проверка на -0.0
   513: 00024C   F409  BRNE end_t_convert
   514: 00024D   2777  CLR R23
   515: 
   516: end_t_convert:
   517: 00024E   911F  POP R17
   518: 00024F   910F  POP R16
   519: 000250   9508  RET
   520: ;|---------------------------------------------------------------------------
   521: ;|                               END
   522: ;|---------------------------------------------------------------------------
   523: 
   524: ;|---------------------------------------------------------------------------
   525: ;| Процедура разбивки байта на десятичные разряды с преобразованием в ASCII
   526: ;| Также если 7й бит R16 = 1, то выводится знак "-"
   527: ;| На входе: целая часть в R16
   528: ;|         дробная часть в R17
   529: ;| На выходе: В NumberInASCII - старший разряд или "-",
   530: ;| в NumberInASCII+1 - средний разряд или "-",
   531: ;| в NumberInASCII+2 - младший разряд
   532: ;| в NumberInASCII+3 - символ точки
   533: ;| в NumberInASCII+4 - дробная часть
   534: ;| Также используется флаг Т
   535: ;|---------------------------------------------------------------------------
   536: 000251   94E8  CLT		;сбрасываем флаг T
   537: 000252   930F  PUSH R16
   538: 000253   932F  PUSH R18
   539: 000254   931F  PUSH R17
   540: 000255   2711  CLR R17
   541: 000256   2722  CLR R18
   542: 000257   FF07  SBRS R16,7	;Если число положительное, то переходим к преобразованию
   543: 000258   C002  rjmp not_neg
   544: 000259   9468  SET		; Число отрицательное, ставим флаг Т
   545: 00025A   770F  ANDI R16, 0b01111111	; Убираем из числа знак -
   546: 00025B   3604  CPI R16, 100
   547: 00025C   F018  BRLO LoTh100 ;если меньше 100
   548: 00025D   5604  SUBI R16, 100
   549: 00025E   9523  INC R18
   550: 00025F   CFFB  RJMP not_neg
   551: 
   552: 
   553: 000260   2322  TST R18
   554: 000261   F431  BRNE R1NZ ; Разряд 1 не ноль
   555: 000262   6012  ORI R17, 1<<1; Запоминаем что старший разряд "Пробел", вдруг пригодится :-)
   556: 000263   E220  LDI R18, 0x20	;Загружаем символ пробела
   557: 000264   9320  STS NumberInASCII, R18
        000265   007A
   558: 000266   2722  CLR R18
   559: 000267   C004  RJMP CalcDec
   560: 
   561: 000268   5D20  SUBI R18, (-48)	; Прибавляем 48 для получения символа
   562: 000269   9320  STS NumberInASCII, R18
        00026A   007A
   563: 00026B   2722  CLR R18
   564: 
   565: 00026C   300A  CPI R16, 10	;Считаем десятки
   566: 00026D   F018  BRLO LoTh10 ;если меньше 10
   567: 00026E   500A  SUBI R16, 10
   568: 00026F   9523  INC R18
   569: 000270   CFFB  RJMP CalcDec
   570: 
   571: 000271   2322  TST R18
   572: 000272   F441  BRNE R2NZ ; Разряд 2 не ноль
   573: 000273   FF11  SBRS R17,1	;Если первый регистр не 0, тогда записываем 0 а не пробел
   574: 000274   C006  rjmp R2NZ
   575: 
   576: 000275   6011  ORI R17, 1<<0; Запоминаем что средний разряд =0, вдруг пригодится :-)
   577: 000276   E220  LDI R18, 0x20	;Загружаем символ пробела
   578: 000277   9320  STS NumberInASCII+1, R18
        000278   007B
   579: 000279   2722  CLR R18
   580: 00027A   C004  RJMP CalcOne
   581: 
   582: 00027B   5D20  SUBI R18, (-48)	; Прибавляем 48 для получения символа
   583: 00027C   9320  STS NumberInASCII+1, R18
        00027D   007B
   584: 00027E   2722  CLR R18
   585: 
   586: 00027F   5D00  SUBI R16, (-48)	; Прибавляем 48 для получения символа
   587: 000280   9300  STS NumberInASCII+2, R16
        000281   007C
   588: 
   589: 000282   F45E  BRTC EndNTA	;Проверка на -, если минуса нет - заканчиваем
   590: 000283   FF10  SBRS R17,0	;Если второй разряд не 0, тогда записываем 0 а не пробел
   591: 000284   C005  rjmp R1IsZ
   592: 
   593: 000285   94E8  CLT
   594: 000286   E22D  LDI R18, 0x2D	;Загружаем символ минуса
   595: 000287   9320  STS NumberInASCII+1, R18	; пишем минус во второй разряд
        000288   007B
   596: 000289   C004  RJMP EndNTA
   597: 
   598: 
   599: 00028A   94E8  CLT
   600: 00028B   E22D  LDI R18, 0x2D	;Загружаем символ минуса
   601: 00028C   9320  STS NumberInASCII, R18	;В первый разряд
        00028D   007A
   602: 
   603: EndNTA:
   604: 
   605: 00028E   911F  POP R17	;Вывод дробной части
   606: 00028F   E22E  LDI R18, 0x2E	;Загружаем символ точки
   607: 000290   9320  STS NumberInASCII+3, R18	; пишем минус во второй разряд
        000291   007D
   608: 000292   5D10  SUBI R17, (-48)	; Прибавляем 48 для получения символа
   609: 000293   9310  STS NumberInASCII+4, R17
        000294   007E
   610: 
   611: 
   612: 
   613: 
   614: 000295   912F  POP R18
   615: 000296   910F  POP R16
   616: 000297   9508  RET
   617: ;|---------------------------------------------------------------------------
   618: ;|                               END
   619: ;|---------------------------------------------------------------------------
   620: 
   621: .DSEG
   622: HumidTen:	.byte	1
   623: HumidInt:	.byte	1
   624: HumidDec:	.byte	1
   625: TermSign:	.byte	1
   626: TermTen:	.byte	1
   627: TermInt:	.byte	1
   628: TermDec:	.byte	1
   629: TimeToOut:	.byte	4
   630: 
   631: Humid2Ten:	.byte	1
   632: Humid2Int:	.byte	1
   633: Humid2Dec:	.byte	1
   634: Term2Sign:	.byte	1
   635: Term2Ten:	.byte	1
   636: Term2Int:	.byte	1
   637: Term2Dec:	.byte	1
   638: Time2ToOut:	.byte	4
   639: 
   640: 
   641: NumberInASCII:	.byte	5
 -> Warning 011: C-style instructions in file, lines ignored!
 -> Warning 001: 9 symbol(s) defined, but not used!

Program             :      656 words.
Constants           :        8 words.
Total program memory:      664 words.
Eeprom space        :        0 bytes.
Data segment        :       31 bytes.
Compilation completed, no errors.
Compilation endet 19.03.2015, 20:19:18
