gavrasm Gerd's AVR assembler version 3.4 (C)2014 by DG4FAC
----------------------------------------------------------
Source file: ish.asm
Hex file:    ish.hex
Eeprom file: ish.eep
Compiled:    11.02.2015, 13:29:52
Pass:        2
     1: .include "/home/marik/Project/m32Adef.inc"
  Including file /home/marik/Project/m32Adef.inc
     1: ;***** THIS IS A MACHINE GENERATED FILE - DO NOT EDIT ********************
     2: ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32A.xml ***********
     3: ;*************************************************************************
     4: ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
     5: ;* 
     6: ;* Number            : AVR000
     7: ;* File Name         : "m32Adef.inc"
     8: ;* Title             : Register/Bit Definitions for the ATmega32A
     9: ;* Date              : 2011-02-09
    10: ;* Version           : 2.35
    11: ;* Support E-mail    : avr@atmel.com
    12: ;* Target MCU        : ATmega32A
    13: ;* 
    14: ;* DESCRIPTION
    15: ;* When including this file in the assembly program file, all I/O register 
    16: ;* names and I/O register bit names appearing in the data book can be used.
    17: ;* In addition, the six registers forming the three data pointers X, Y and 
    18: ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
    19: ;* SRAM is also defined 
    20: ;* 
    21: ;* The Register names are represented by their hexadecimal address.
    22: ;* 
    23: ;* The Register Bit names are represented by their bit number (0-7).
    24: ;* 
    25: ;* Please observe the difference in using the bit names with instructions
    26: ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
    27: ;* (skip if bit in register set/cleared). The following example illustrates
    28: ;* this:
    29: ;* 
    30: ;* in    r16,PORTB             ;read PORTB latch
    31: ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
    32: ;* out   PORTB,r16             ;output to PORTB
    33: ;* 
    34: ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
    35: ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
    36: ;* rjmp  TOV0_is_set           ;jump if set
    37: ;* ...                         ;otherwise do something else
    38: ;*************************************************************************
    39: 
    40: #ifndef _M32ADEF_INC_
    41: #define _M32ADEF_INC_
    42: 
    43: 
    44: #pragma partinc 0
    45: 
    46: ; ***** SPECIFY DEVICE ***************************************************
    47: .device ATmega32A
    48: #pragma AVRPART ADMIN PART_NAME ATmega32A
    49: .equ	SIGNATURE_000	= 0x1e
    50: .equ	SIGNATURE_001	= 0x95
    51: .equ	SIGNATURE_002	= 0x02
    52: 
    53: #pragma AVRPART CORE CORE_VERSION V2E
    54: 
    55: 
    56: ; ***** I/O REGISTER DEFINITIONS *****************************************
    57: ; NOTE:
    58: ; Definitions marked "MEMORY MAPPED"are extended I/O ports
    59: ; and cannot be used with IN/OUT instructions
    60: .equ	SREG	= 0x3f
    61: .equ	SPL	= 0x3d
    62: .equ	SPH	= 0x3e
    63: .equ	OCR0	= 0x3c
    64: .equ	GICR	= 0x3b
    65: .equ	GIFR	= 0x3a
    66: .equ	TIMSK	= 0x39
    67: .equ	TIFR	= 0x38
    68: .equ	SPMCR	= 0x37
    69: .equ	TWCR	= 0x36
    70: .equ	MCUCR	= 0x35
    71: .equ	MCUCSR	= 0x34
    72: .equ	TCCR0	= 0x33
    73: .equ	TCNT0	= 0x32
    74: .equ	OSCCAL	= 0x31
    75: .equ	OCDR	= 0x31
    76: .equ	SFIOR	= 0x30
    77: .equ	TCCR1A	= 0x2f
    78: .equ	TCCR1B	= 0x2e
    79: .equ	TCNT1L	= 0x2c
    80: .equ	TCNT1H	= 0x2d
    81: .equ	OCR1AL	= 0x2a
    82: .equ	OCR1AH	= 0x2b
    83: .equ	OCR1BL	= 0x28
    84: .equ	OCR1BH	= 0x29
    85: .equ	ICR1L	= 0x26
    86: .equ	ICR1H	= 0x27
    87: .equ	TCCR2	= 0x25
    88: .equ	TCNT2	= 0x24
    89: .equ	OCR2	= 0x23
    90: .equ	ASSR	= 0x22
    91: .equ	WDTCR	= 0x21
    92: .equ	UBRRH	= 0x20
    93: .equ	UCSRC	= 0x20
    94: .equ	EEARL	= 0x1e
    95: .equ	EEARH	= 0x1f
    96: .equ	EEDR	= 0x1d
    97: .equ	EECR	= 0x1c
    98: .equ	PORTA	= 0x1b
    99: .equ	DDRA	= 0x1a
   100: .equ	PINA	= 0x19
   101: .equ	PORTB	= 0x18
   102: .equ	DDRB	= 0x17
   103: .equ	PINB	= 0x16
   104: .equ	PORTC	= 0x15
   105: .equ	DDRC	= 0x14
   106: .equ	PINC	= 0x13
   107: .equ	PORTD	= 0x12
   108: .equ	DDRD	= 0x11
   109: .equ	PIND	= 0x10
   110: .equ	SPDR	= 0x0f
   111: .equ	SPSR	= 0x0e
   112: .equ	SPCR	= 0x0d
   113: .equ	UDR	= 0x0c
   114: .equ	UCSRA	= 0x0b
   115: .equ	UCSRB	= 0x0a
   116: .equ	UBRRL	= 0x09
   117: .equ	ACSR	= 0x08
   118: .equ	ADMUX	= 0x07
   119: .equ	ADCSRA	= 0x06
   120: .equ	ADCH	= 0x05
   121: .equ	ADCL	= 0x04
   122: .equ	TWDR	= 0x03
   123: .equ	TWAR	= 0x02
   124: .equ	TWSR	= 0x01
   125: .equ	TWBR	= 0x00
   126: 
   127: 
   128: ; ***** BIT DEFINITIONS **************************************************
   129: 
   130: ; ***** EEPROM ***********************
   131: ; EEDR - EEPROM Data Register
   132: .equ	EEDR0	= 0	; EEPROM Data Register bit 0
   133: .equ	EEDR1	= 1	; EEPROM Data Register bit 1
   134: .equ	EEDR2	= 2	; EEPROM Data Register bit 2
   135: .equ	EEDR3	= 3	; EEPROM Data Register bit 3
   136: .equ	EEDR4	= 4	; EEPROM Data Register bit 4
   137: .equ	EEDR5	= 5	; EEPROM Data Register bit 5
   138: .equ	EEDR6	= 6	; EEPROM Data Register bit 6
   139: .equ	EEDR7	= 7	; EEPROM Data Register bit 7
   140: 
   141: ; EECR - EEPROM Control Register
   142: .equ	EERE	= 0	; EEPROM Read Enable
   143: .equ	EEWE	= 1	; EEPROM Write Enable
   144: .equ	EEMWE	= 2	; EEPROM Master Write Enable
   145: .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
   146: 
   147: 
   148: ; ***** WATCHDOG *********************
   149: ; WDTCR - Watchdog Timer Control Register
   150: .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
   151: .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
   152: .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
   153: .equ	WDE	= 3	; Watch Dog Enable
   154: .equ	WDTOE	= 4	; RW
   155: .equ	WDDE	= WDTOE	; For compatibility
   156: 
   157: 
   158: ; ***** EXTERNAL_INTERRUPT ***********
   159: ; GICR - General Interrupt Control Register
   160: .equ	GIMSK	= GICR	; For compatibility
   161: .equ	IVCE	= 0	; Interrupt Vector Change Enable
   162: .equ	IVSEL	= 1	; Interrupt Vector Select
   163: .equ	INT2	= 5	; External Interrupt Request 2 Enable
   164: .equ	INT0	= 6	; External Interrupt Request 0 Enable
   165: .equ	INT1	= 7	; External Interrupt Request 1 Enable
   166: 
   167: ; GIFR - General Interrupt Flag Register
   168: .equ	INTF2	= 5	; External Interrupt Flag 2
   169: .equ	INTF0	= 6	; External Interrupt Flag 0
   170: .equ	INTF1	= 7	; External Interrupt Flag 1
   171: 
   172: ; MCUCR - General Interrupt Control Register
   173: .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
   174: .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
   175: .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
   176: .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
   177: 
   178: ; MCUCSR - MCU Control And Status Register
   179: .equ	ISC2	= 6	; Interrupt Sense Control 2
   180: 
   181: 
   182: ; ***** TIMER_COUNTER_0 **************
   183: ; TCCR0 - Timer/Counter Control Register
   184: .equ	CS00	= 0	; Clock Select 1
   185: .equ	CS01	= 1	; Clock Select 1
   186: .equ	CS02	= 2	; Clock Select 2
   187: .equ	WGM01	= 3	; Waveform Generation Mode 1
   188: .equ	CTC0	= WGM01	; For compatibility
   189: .equ	COM00	= 4	; Compare match Output Mode 0
   190: .equ	COM01	= 5	; Compare Match Output Mode 1
   191: .equ	WGM00	= 6	; Waveform Generation Mode
   192: .equ	PWM0	= WGM00	; For compatibility
   193: .equ	FOC0	= 7	; Force Output Compare
   194: 
   195: ; TCNT0 - Timer/Counter Register
   196: .equ	TCNT0_0	= 0	; 
   197: .equ	TCNT0_1	= 1	; 
   198: .equ	TCNT0_2	= 2	; 
   199: .equ	TCNT0_3	= 3	; 
   200: .equ	TCNT0_4	= 4	; 
   201: .equ	TCNT0_5	= 5	; 
   202: .equ	TCNT0_6	= 6	; 
   203: .equ	TCNT0_7	= 7	; 
   204: 
   205: ; OCR0 - Output Compare Register
   206: .equ	OCR0_0	= 0	; 
   207: .equ	OCR0_1	= 1	; 
   208: .equ	OCR0_2	= 2	; 
   209: .equ	OCR0_3	= 3	; 
   210: .equ	OCR0_4	= 4	; 
   211: .equ	OCR0_5	= 5	; 
   212: .equ	OCR0_6	= 6	; 
   213: .equ	OCR0_7	= 7	; 
   214: 
   215: ; TIMSK - Timer/Counter Interrupt Mask Register
   216: .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
   217: .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
   218: 
   219: ; TIFR - Timer/Counter Interrupt Flag register
   220: .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
   221: .equ	OCF0	= 1	; Output Compare Flag 0
   222: 
   223: 
   224: ; ***** TIMER_COUNTER_2 **************
   225: ; TIMSK - Timer/Counter Interrupt Mask register
   226: .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
   227: .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
   228: 
   229: ; TIFR - Timer/Counter Interrupt Flag Register
   230: .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
   231: .equ	OCF2	= 7	; Output Compare Flag 2
   232: 
   233: ; TCCR2 - Timer/Counter2 Control Register
   234: .equ	CS20	= 0	; Clock Select bit 0
   235: .equ	CS21	= 1	; Clock Select bit 1
   236: .equ	CS22	= 2	; Clock Select bit 2
   237: .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
   238: .equ	CTC2	= WGM21	; For compatibility
   239: .equ	COM20	= 4	; Compare Output Mode bit 0
   240: .equ	COM21	= 5	; Compare Output Mode bit 1
   241: .equ	WGM20	= 6	; Pulse Width Modulator Enable
   242: .equ	PWM2	= WGM20	; For compatibility
   243: .equ	FOC2	= 7	; Force Output Compare
   244: 
   245: ; TCNT2 - Timer/Counter2
   246: .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
   247: .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
   248: .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
   249: .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
   250: .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
   251: .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
   252: .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
   253: .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
   254: 
   255: ; OCR2 - Timer/Counter2 Output Compare Register
   256: .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
   257: .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
   258: .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
   259: .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
   260: .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
   261: .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
   262: .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
   263: .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
   264: 
   265: ; ASSR - Asynchronous Status Register
   266: .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
   267: .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
   268: .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
   269: .equ	AS2	= 3	; Asynchronous Timer/counter2
   270: 
   271: 
   272: ; ***** TIMER_COUNTER_1 **************
   273: ; TIMSK - Timer/Counter Interrupt Mask Register
   274: .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
   275: .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
   276: .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
   277: .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
   278: 
   279: ; TIFR - Timer/Counter Interrupt Flag register
   280: .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
   281: .equ	OCF1B	= 3	; Output Compare Flag 1B
   282: .equ	OCF1A	= 4	; Output Compare Flag 1A
   283: .equ	ICF1	= 5	; Input Capture Flag 1
   284: 
   285: ; TCCR1A - Timer/Counter1 Control Register A
   286: .equ	WGM10	= 0	; Waveform Generation Mode
   287: .equ	PWM10	= WGM10	; For compatibility
   288: .equ	WGM11	= 1	; Waveform Generation Mode
   289: .equ	PWM11	= WGM11	; For compatibility
   290: .equ	FOC1B	= 2	; Force Output Compare 1B
   291: .equ	FOC1A	= 3	; Force Output Compare 1A
   292: .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
   293: .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
   294: .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
   295: .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
   296: 
   297: ; TCCR1B - Timer/Counter1 Control Register B
   298: .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
   299: .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
   300: .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
   301: .equ	WGM12	= 3	; Waveform Generation Mode
   302: .equ	CTC10	= WGM12	; For compatibility
   303: .equ	CTC1	= WGM12	; For compatibility
   304: .equ	WGM13	= 4	; Waveform Generation Mode
   305: .equ	CTC11	= WGM13	; For compatibility
   306: .equ	ICES1	= 6	; Input Capture 1 Edge Select
   307: .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
   308: 
   309: 
   310: ; ***** SPI **************************
   311: ; SPDR - SPI Data Register
   312: .equ	SPDR0	= 0	; SPI Data Register bit 0
   313: .equ	SPDR1	= 1	; SPI Data Register bit 1
   314: .equ	SPDR2	= 2	; SPI Data Register bit 2
   315: .equ	SPDR3	= 3	; SPI Data Register bit 3
   316: .equ	SPDR4	= 4	; SPI Data Register bit 4
   317: .equ	SPDR5	= 5	; SPI Data Register bit 5
   318: .equ	SPDR6	= 6	; SPI Data Register bit 6
   319: .equ	SPDR7	= 7	; SPI Data Register bit 7
   320: 
   321: ; SPSR - SPI Status Register
   322: .equ	SPI2X	= 0	; Double SPI Speed Bit
   323: .equ	WCOL	= 6	; Write Collision Flag
   324: .equ	SPIF	= 7	; SPI Interrupt Flag
   325: 
   326: ; SPCR - SPI Control Register
   327: .equ	SPR0	= 0	; SPI Clock Rate Select 0
   328: .equ	SPR1	= 1	; SPI Clock Rate Select 1
   329: .equ	CPHA	= 2	; Clock Phase
   330: .equ	CPOL	= 3	; Clock polarity
   331: .equ	MSTR	= 4	; Master/Slave Select
   332: .equ	DORD	= 5	; Data Order
   333: .equ	SPE	= 6	; SPI Enable
   334: .equ	SPIE	= 7	; SPI Interrupt Enable
   335: 
   336: 
   337: ; ***** USART ************************
   338: ; UDR - USART I/O Data Register
   339: .equ	UDR0	= 0	; USART I/O Data Register bit 0
   340: .equ	UDR1	= 1	; USART I/O Data Register bit 1
   341: .equ	UDR2	= 2	; USART I/O Data Register bit 2
   342: .equ	UDR3	= 3	; USART I/O Data Register bit 3
   343: .equ	UDR4	= 4	; USART I/O Data Register bit 4
   344: .equ	UDR5	= 5	; USART I/O Data Register bit 5
   345: .equ	UDR6	= 6	; USART I/O Data Register bit 6
   346: .equ	UDR7	= 7	; USART I/O Data Register bit 7
   347: 
   348: ; UCSRA - USART Control and Status Register A
   349: .equ	USR	= UCSRA	; For compatibility
   350: .equ	MPCM	= 0	; Multi-processor Communication Mode
   351: .equ	U2X	= 1	; Double the USART transmission speed
   352: .equ	UPE	= 2	; Parity Error
   353: .equ	PE	= UPE	; For compatibility
   354: .equ	DOR	= 3	; Data overRun
   355: .equ	FE	= 4	; Framing Error
   356: .equ	UDRE	= 5	; USART Data Register Empty
   357: .equ	TXC	= 6	; USART Transmitt Complete
   358: .equ	RXC	= 7	; USART Receive Complete
   359: 
   360: ; UCSRB - USART Control and Status Register B
   361: .equ	UCR	= UCSRB	; For compatibility
   362: .equ	TXB8	= 0	; Transmit Data Bit 8
   363: .equ	RXB8	= 1	; Receive Data Bit 8
   364: .equ	UCSZ2	= 2	; Character Size
   365: .equ	CHR9	= UCSZ2	; For compatibility
   366: .equ	TXEN	= 3	; Transmitter Enable
   367: .equ	RXEN	= 4	; Receiver Enable
   368: .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
   369: .equ	TXCIE	= 6	; TX Complete Interrupt Enable
   370: .equ	RXCIE	= 7	; RX Complete Interrupt Enable
   371: 
   372: ; UCSRC - USART Control and Status Register C
   373: .equ	UCPOL	= 0	; Clock Polarity
   374: .equ	UCSZ0	= 1	; Character Size
   375: .equ	UCSZ1	= 2	; Character Size
   376: .equ	USBS	= 3	; Stop Bit Select
   377: .equ	UPM0	= 4	; Parity Mode Bit 0
   378: .equ	UPM1	= 5	; Parity Mode Bit 1
   379: .equ	UMSEL	= 6	; USART Mode Select
   380: .equ	URSEL	= 7	; Register Select
   381: 
   382: .equ	UBRRHI	= UBRRH	; For compatibility
   383: 
   384: ; ***** ANALOG_COMPARATOR ************
   385: ; SFIOR - Special Function IO Register
   386: .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
   387: 
   388: ; ACSR - Analog Comparator Control And Status Register
   389: .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
   390: .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
   391: .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
   392: .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
   393: .equ	ACI	= 4	; Analog Comparator Interrupt Flag
   394: .equ	ACO	= 5	; Analog Compare Output
   395: .equ	ACBG	= 6	; Analog Comparator Bandgap Select
   396: .equ	ACD	= 7	; Analog Comparator Disable
   397: 
   398: 
   399: ; ***** AD_CONVERTER *****************
   400: ; ADMUX - The ADC multiplexer Selection Register
   401: .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
   402: .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
   403: .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
   404: .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
   405: .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
   406: .equ	ADLAR	= 5	; Left Adjust Result
   407: .equ	REFS0	= 6	; Reference Selection Bit 0
   408: .equ	REFS1	= 7	; Reference Selection Bit 1
   409: 
   410: ; ADCSRA - The ADC Control and Status register
   411: .equ	ADCSR	= ADCSRA	; For compatibility
   412: .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
   413: .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
   414: .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
   415: .equ	ADIE	= 3	; ADC Interrupt Enable
   416: .equ	ADIF	= 4	; ADC Interrupt Flag
   417: .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if
   418: .equ	ADFR	= ADATE	; For compatibility
   419: .equ	ADSC	= 6	; ADC Start Conversion
   420: .equ	ADEN	= 7	; ADC Enable
   421: 
   422: ; ADCH - ADC Data Register High Byte
   423: .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
   424: .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
   425: .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
   426: .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
   427: .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
   428: .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
   429: .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
   430: .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
   431: 
   432: ; ADCL - ADC Data Register Low Byte
   433: .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
   434: .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
   435: .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
   436: .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
   437: .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
   438: .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
   439: .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
   440: .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
   441: 
   442: ; SFIOR - Special Function IO Register
   443: .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
   444: .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
   445: .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
   446: 
   447: 
   448: ; ***** PORTA ************************
   449: ; PORTA - Port A Data Register
   450: .equ	PORTA0	= 0	; Port A Data Register bit 0
   451: .equ	PA0	= 0	; For compatibility
   452: .equ	PORTA1	= 1	; Port A Data Register bit 1
   453: .equ	PA1	= 1	; For compatibility
   454: .equ	PORTA2	= 2	; Port A Data Register bit 2
   455: .equ	PA2	= 2	; For compatibility
   456: .equ	PORTA3	= 3	; Port A Data Register bit 3
   457: .equ	PA3	= 3	; For compatibility
   458: .equ	PORTA4	= 4	; Port A Data Register bit 4
   459: .equ	PA4	= 4	; For compatibility
   460: .equ	PORTA5	= 5	; Port A Data Register bit 5
   461: .equ	PA5	= 5	; For compatibility
   462: .equ	PORTA6	= 6	; Port A Data Register bit 6
   463: .equ	PA6	= 6	; For compatibility
   464: .equ	PORTA7	= 7	; Port A Data Register bit 7
   465: .equ	PA7	= 7	; For compatibility
   466: 
   467: ; DDRA - Port A Data Direction Register
   468: .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
   469: .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
   470: .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
   471: .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
   472: .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
   473: .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
   474: .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
   475: .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
   476: 
   477: ; PINA - Port A Input Pins
   478: .equ	PINA0	= 0	; Input Pins, Port A bit 0
   479: .equ	PINA1	= 1	; Input Pins, Port A bit 1
   480: .equ	PINA2	= 2	; Input Pins, Port A bit 2
   481: .equ	PINA3	= 3	; Input Pins, Port A bit 3
   482: .equ	PINA4	= 4	; Input Pins, Port A bit 4
   483: .equ	PINA5	= 5	; Input Pins, Port A bit 5
   484: .equ	PINA6	= 6	; Input Pins, Port A bit 6
   485: .equ	PINA7	= 7	; Input Pins, Port A bit 7
   486: 
   487: 
   488: ; ***** PORTB ************************
   489: ; PORTB - Port B Data Register
   490: .equ	PORTB0	= 0	; Port B Data Register bit 0
   491: .equ	PB0	= 0	; For compatibility
   492: .equ	PORTB1	= 1	; Port B Data Register bit 1
   493: .equ	PB1	= 1	; For compatibility
   494: .equ	PORTB2	= 2	; Port B Data Register bit 2
   495: .equ	PB2	= 2	; For compatibility
   496: .equ	PORTB3	= 3	; Port B Data Register bit 3
   497: .equ	PB3	= 3	; For compatibility
   498: .equ	PORTB4	= 4	; Port B Data Register bit 4
   499: .equ	PB4	= 4	; For compatibility
   500: .equ	PORTB5	= 5	; Port B Data Register bit 5
   501: .equ	PB5	= 5	; For compatibility
   502: .equ	PORTB6	= 6	; Port B Data Register bit 6
   503: .equ	PB6	= 6	; For compatibility
   504: .equ	PORTB7	= 7	; Port B Data Register bit 7
   505: .equ	PB7	= 7	; For compatibility
   506: 
   507: ; DDRB - Port B Data Direction Register
   508: .equ	DDB0	= 0	; Port B Data Direction Register bit 0
   509: .equ	DDB1	= 1	; Port B Data Direction Register bit 1
   510: .equ	DDB2	= 2	; Port B Data Direction Register bit 2
   511: .equ	DDB3	= 3	; Port B Data Direction Register bit 3
   512: .equ	DDB4	= 4	; Port B Data Direction Register bit 4
   513: .equ	DDB5	= 5	; Port B Data Direction Register bit 5
   514: .equ	DDB6	= 6	; Port B Data Direction Register bit 6
   515: .equ	DDB7	= 7	; Port B Data Direction Register bit 7
   516: 
   517: ; PINB - Port B Input Pins
   518: .equ	PINB0	= 0	; Port B Input Pins bit 0
   519: .equ	PINB1	= 1	; Port B Input Pins bit 1
   520: .equ	PINB2	= 2	; Port B Input Pins bit 2
   521: .equ	PINB3	= 3	; Port B Input Pins bit 3
   522: .equ	PINB4	= 4	; Port B Input Pins bit 4
   523: .equ	PINB5	= 5	; Port B Input Pins bit 5
   524: .equ	PINB6	= 6	; Port B Input Pins bit 6
   525: .equ	PINB7	= 7	; Port B Input Pins bit 7
   526: 
   527: 
   528: ; ***** PORTC ************************
   529: ; PORTC - Port C Data Register
   530: .equ	PORTC0	= 0	; Port C Data Register bit 0
   531: .equ	PC0	= 0	; For compatibility
   532: .equ	PORTC1	= 1	; Port C Data Register bit 1
   533: .equ	PC1	= 1	; For compatibility
   534: .equ	PORTC2	= 2	; Port C Data Register bit 2
   535: .equ	PC2	= 2	; For compatibility
   536: .equ	PORTC3	= 3	; Port C Data Register bit 3
   537: .equ	PC3	= 3	; For compatibility
   538: .equ	PORTC4	= 4	; Port C Data Register bit 4
   539: .equ	PC4	= 4	; For compatibility
   540: .equ	PORTC5	= 5	; Port C Data Register bit 5
   541: .equ	PC5	= 5	; For compatibility
   542: .equ	PORTC6	= 6	; Port C Data Register bit 6
   543: .equ	PC6	= 6	; For compatibility
   544: .equ	PORTC7	= 7	; Port C Data Register bit 7
   545: .equ	PC7	= 7	; For compatibility
   546: 
   547: ; DDRC - Port C Data Direction Register
   548: .equ	DDC0	= 0	; Port C Data Direction Register bit 0
   549: .equ	DDC1	= 1	; Port C Data Direction Register bit 1
   550: .equ	DDC2	= 2	; Port C Data Direction Register bit 2
   551: .equ	DDC3	= 3	; Port C Data Direction Register bit 3
   552: .equ	DDC4	= 4	; Port C Data Direction Register bit 4
   553: .equ	DDC5	= 5	; Port C Data Direction Register bit 5
   554: .equ	DDC6	= 6	; Port C Data Direction Register bit 6
   555: .equ	DDC7	= 7	; Port C Data Direction Register bit 7
   556: 
   557: ; PINC - Port C Input Pins
   558: .equ	PINC0	= 0	; Port C Input Pins bit 0
   559: .equ	PINC1	= 1	; Port C Input Pins bit 1
   560: .equ	PINC2	= 2	; Port C Input Pins bit 2
   561: .equ	PINC3	= 3	; Port C Input Pins bit 3
   562: .equ	PINC4	= 4	; Port C Input Pins bit 4
   563: .equ	PINC5	= 5	; Port C Input Pins bit 5
   564: .equ	PINC6	= 6	; Port C Input Pins bit 6
   565: .equ	PINC7	= 7	; Port C Input Pins bit 7
   566: 
   567: 
   568: ; ***** PORTD ************************
   569: ; PORTD - Port D Data Register
   570: .equ	PORTD0	= 0	; Port D Data Register bit 0
   571: .equ	PD0	= 0	; For compatibility
   572: .equ	PORTD1	= 1	; Port D Data Register bit 1
   573: .equ	PD1	= 1	; For compatibility
   574: .equ	PORTD2	= 2	; Port D Data Register bit 2
   575: .equ	PD2	= 2	; For compatibility
   576: .equ	PORTD3	= 3	; Port D Data Register bit 3
   577: .equ	PD3	= 3	; For compatibility
   578: .equ	PORTD4	= 4	; Port D Data Register bit 4
   579: .equ	PD4	= 4	; For compatibility
   580: .equ	PORTD5	= 5	; Port D Data Register bit 5
   581: .equ	PD5	= 5	; For compatibility
   582: .equ	PORTD6	= 6	; Port D Data Register bit 6
   583: .equ	PD6	= 6	; For compatibility
   584: .equ	PORTD7	= 7	; Port D Data Register bit 7
   585: .equ	PD7	= 7	; For compatibility
   586: 
   587: ; DDRD - Port D Data Direction Register
   588: .equ	DDD0	= 0	; Port D Data Direction Register bit 0
   589: .equ	DDD1	= 1	; Port D Data Direction Register bit 1
   590: .equ	DDD2	= 2	; Port D Data Direction Register bit 2
   591: .equ	DDD3	= 3	; Port D Data Direction Register bit 3
   592: .equ	DDD4	= 4	; Port D Data Direction Register bit 4
   593: .equ	DDD5	= 5	; Port D Data Direction Register bit 5
   594: .equ	DDD6	= 6	; Port D Data Direction Register bit 6
   595: .equ	DDD7	= 7	; Port D Data Direction Register bit 7
   596: 
   597: ; PIND - Port D Input Pins
   598: .equ	PIND0	= 0	; Port D Input Pins bit 0
   599: .equ	PIND1	= 1	; Port D Input Pins bit 1
   600: .equ	PIND2	= 2	; Port D Input Pins bit 2
   601: .equ	PIND3	= 3	; Port D Input Pins bit 3
   602: .equ	PIND4	= 4	; Port D Input Pins bit 4
   603: .equ	PIND5	= 5	; Port D Input Pins bit 5
   604: .equ	PIND6	= 6	; Port D Input Pins bit 6
   605: .equ	PIND7	= 7	; Port D Input Pins bit 7
   606: 
   607: 
   608: ; ***** CPU **************************
   609: ; SREG - Status Register
   610: .equ	SREG_C	= 0	; Carry Flag
   611: .equ	SREG_Z	= 1	; Zero Flag
   612: .equ	SREG_N	= 2	; Negative Flag
   613: .equ	SREG_V	= 3	; Two's Complement Overflow Flag
   614: .equ	SREG_S	= 4	; Sign Bit
   615: .equ	SREG_H	= 5	; Half Carry Flag
   616: .equ	SREG_T	= 6	; Bit Copy Storage
   617: .equ	SREG_I	= 7	; Global Interrupt Enable
   618: 
   619: ; MCUCR - MCU Control Register
   620: ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
   621: ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
   622: ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
   623: ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
   624: .equ	SM0	= 4	; Sleep Mode Select
   625: .equ	SM1	= 5	; Sleep Mode Select
   626: .equ	SM2	= 6	; Sleep Mode Select
   627: .equ	SE	= 7	; Sleep Enable
   628: 
   629: ; MCUCSR - MCU Control And Status Register
   630: .equ	MCUSR	= MCUCSR	; For compatibility
   631: .equ	PORF	= 0	; Power-on reset flag
   632: .equ	EXTRF	= 1	; External Reset Flag
   633: .equ	BORF	= 2	; Brown-out Reset Flag
   634: .equ	WDRF	= 3	; Watchdog Reset Flag
   635: .equ	JTRF	= 4	; JTAG Reset Flag
   636: .equ	JTD	= 7	; JTAG Interface Disable
   637: 
   638: ; OSCCAL - Oscillator Calibration Value
   639: .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
   640: .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
   641: .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
   642: .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
   643: .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
   644: .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
   645: .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
   646: .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
   647: 
   648: ; SFIOR - Special Function IO Register
   649: .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
   650: .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
   651: .equ	PUD	= 2	; Pull-up Disable
   652: 
   653: 
   654: ; ***** BOOT_LOAD ********************
   655: ; SPMCR - Store Program Memory Control Register
   656: .equ	SPMEN	= 0	; Store Program Memory Enable
   657: .equ	PGERS	= 1	; Page Erase
   658: .equ	PGWRT	= 2	; Page Write
   659: .equ	BLBSET	= 3	; Boot Lock Bit Set
   660: .equ	RWWSRE	= 4	; Read While Write secion read enable
   661: .equ	ASRE	= RWWSRE	; For compatibility
   662: .equ	RWWSB	= 6	; Read While Write Section Busy
   663: .equ	ASB	= RWWSB	; For compatibility
   664: .equ	SPMIE	= 7	; SPM Interrupt Enable
   665: 
   666: 
   667: ; ***** TWI **************************
   668: ; TWBR - TWI Bit Rate register
   669: .equ	TWBR0	= 0	; 
   670: .equ	TWBR1	= 1	; 
   671: .equ	TWBR2	= 2	; 
   672: .equ	TWBR3	= 3	; 
   673: .equ	TWBR4	= 4	; 
   674: .equ	TWBR5	= 5	; 
   675: .equ	TWBR6	= 6	; 
   676: .equ	TWBR7	= 7	; 
   677: 
   678: ; TWCR - TWI Control Register
   679: .equ	TWIE	= 0	; TWI Interrupt Enable
   680: .equ	TWEN	= 2	; TWI Enable Bit
   681: .equ	TWWC	= 3	; TWI Write Collition Flag
   682: .equ	TWSTO	= 4	; TWI Stop Condition Bit
   683: .equ	TWSTA	= 5	; TWI Start Condition Bit
   684: .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
   685: .equ	TWINT	= 7	; TWI Interrupt Flag
   686: 
   687: ; TWSR - TWI Status Register
   688: .equ	TWPS0	= 0	; TWI Prescaler bits
   689: .equ	TWPS1	= 1	; TWI Prescaler bits
   690: .equ	TWS3	= 3	; TWI Status
   691: .equ	TWS4	= 4	; TWI Status
   692: .equ	TWS5	= 5	; TWI Status
   693: .equ	TWS6	= 6	; TWI Status
   694: .equ	TWS7	= 7	; TWI Status
   695: 
   696: ; TWDR - TWI Data register
   697: .equ	TWD0	= 0	; TWI Data Register Bit 0
   698: .equ	TWD1	= 1	; TWI Data Register Bit 1
   699: .equ	TWD2	= 2	; TWI Data Register Bit 2
   700: .equ	TWD3	= 3	; TWI Data Register Bit 3
   701: .equ	TWD4	= 4	; TWI Data Register Bit 4
   702: .equ	TWD5	= 5	; TWI Data Register Bit 5
   703: .equ	TWD6	= 6	; TWI Data Register Bit 6
   704: .equ	TWD7	= 7	; TWI Data Register Bit 7
   705: 
   706: ; TWAR - TWI (Slave) Address register
   707: .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
   708: .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
   709: .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
   710: .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
   711: .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
   712: .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
   713: .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
   714: .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
   715: 
   716: 
   717: 
   718: ; ***** LOCKSBITS ********************************************************
   719: .equ	LB1	= 0	; Lock bit
   720: .equ	LB2	= 1	; Lock bit
   721: .equ	BLB01	= 2	; Boot Lock bit
   722: .equ	BLB02	= 3	; Boot Lock bit
   723: .equ	BLB11	= 4	; Boot lock bit
   724: .equ	BLB12	= 5	; Boot lock bit
   725: 
   726: 
   727: ; ***** FUSES ************************************************************
   728: ; LOW fuse bits
   729: .equ	CKSEL0	= 0	; Select Clock Source
   730: .equ	CKSEL1	= 1	; Select Clock Source
   731: .equ	CKSEL2	= 2	; Select Clock Source
   732: .equ	CKSEL3	= 3	; Select Clock Source
   733: .equ	BODEN	= 6	; Brown out detector enable
   734: .equ	BODLEVEL	= 7	; Brown out detector trigger level
   735: 
   736: ; HIGH fuse bits
   737: .equ	BOOTRST	= 0	; Select Reset Vector
   738: .equ	BOOTSZ0	= 1	; Select Boot Size
   739: .equ	BOOTSZ1	= 2	; Select Boot Size
   740: .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
   741: .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
   742: .equ	JTAGEN	= 6	; Enable JTAG
   743: .equ	OCDEN	= 7	; Enable OCD
   744: 
   745: 
   746: 
   747: ; ***** CPU REGISTER DEFINITIONS *****************************************
   748: .def	XH	= r27
   749: .def	XL	= r26
   750: .def	YH	= r29
   751: .def	YL	= r28
   752: .def	ZH	= r31
   753: .def	ZL	= r30
   754: 
   755: 
   756: 
   757: ; ***** DATA MEMORY DECLARATIONS *****************************************
   758: .equ	FLASHEND	= 0x3fff	; Note: Word address
   759: .equ	IOEND	= 0x003f
   760: .equ	SRAM_START	= 0x0060
   761: .equ	SRAM_SIZE	= 2048
   762: .equ	RAMEND	= 0x085f
   763: .equ	XRAMEND	= 0x0000
   764: .equ	E2END	= 0x03ff
   765: .equ	EEPROMEND	= 0x03ff
   766: .equ	EEADRBITS	= 10
   767: #pragma AVRPART MEMORY PROG_FLASH 32768
   768: #pragma AVRPART MEMORY EEPROM 1024
   769: #pragma AVRPART MEMORY INT_SRAM SIZE 2048
   770: #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
   771: 
   772: 
   773: 
   774: ; ***** BOOTLOADER DECLARATIONS ******************************************
   775: .equ	NRWW_START_ADDR	= 0x3800
   776: .equ	NRWW_STOP_ADDR	= 0x3fff
   777: .equ	RWW_START_ADDR	= 0x0
   778: .equ	RWW_STOP_ADDR	= 0x37ff
   779: .equ	PAGESIZE	= 64
   780: .equ	FIRSTBOOTSTART	= 0x3f00
   781: .equ	SECONDBOOTSTART	= 0x3e00
   782: .equ	THIRDBOOTSTART	= 0x3c00
   783: .equ	FOURTHBOOTSTART	= 0x3800
   784: .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
   785: .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
   786: 
   787: 
   788: 
   789: ; ***** INTERRUPT VECTORS ************************************************
   790: .equ	INT0addr	= 0x0002	; External Interrupt Request 0
   791: .equ	INT1addr	= 0x0004	; External Interrupt Request 1
   792: .equ	INT2addr	= 0x0006	; External Interrupt Request 2
   793: .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
   794: .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
   795: .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
   796: .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
   797: .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
   798: .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
   799: .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
   800: .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
   801: .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
   802: .equ	URXCaddr	= 0x001a	; USART, Rx Complete
   803: .equ	UDREaddr	= 0x001c	; USART Data Register Empty
   804: .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
   805: .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
   806: .equ	ERDYaddr	= 0x0022	; EEPROM Ready
   807: .equ	ACIaddr	= 0x0024	; Analog Comparator
   808: .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
   809: .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
   810: 
   811: .equ	INT_VECTORS_SIZE	= 42	; size in words
   812: 
   813: #endif  /* _M32ADEF_INC_ */
   814: 
   815: ; ***** END OF FILE ******************************************************
   816: 
  Continuing file ish.asm
     2: ; Internal Hardware Init  ======================================
     3: 		.equ 	XTAL = 16000000 	
     4: 		.equ 	baudrate = 9600  
     5: 		.equ 	bauddivider = XTAL/(16*baudrate)-1
     6: 
     7: .def     Flag=R5	;флаг
     8: .def     Th0=R6		;Час выключения
     9: .def     Tm0=R7		;Минута выключения
    10: .def     Th1=R8		;Час включения
    11: .def     Tm1=R9		;Минута включения
    12: .def     ThC=R12	;Час Текущий (считанный)
    13: .def     TmC=R11	;Минута Текущая (считанная)
    14: .def     MenuCNT=R10;Счетчик меню
    15: 
    16: .def     Temp=R16
    17: .def     Temp2=R17
    18: .def     CNT=R18
    19: .def     OutByte=R20
    20: .def     OutByte2=R21
    21: .def     IncBCD=R23
    22: 
    23: .equ	KeyPin=PINA
    24: .equ	MenuKey=PA5
    25: .equ	OkKey=PA6
    26: .equ	Light=PA7	; Управление светом на порте PA7
    27: .equ	SEG7_DDR=DDRA
    28: .equ	SEG7_PORT=PortA
    29: .equ	DS=PA1
    30: .equ	SHcp=PA2
    31: .equ	STcp=PA3
    32: .equ	dot=3
    33: 
    34: .cseg
    35: .org 0
    36: 
    37: 000000   C015  rjmp	RESET		;
    38: 000001   C013  rjmp	EXT_INT0	;
    39: 000002   C012  rjmp	EXT_INT1	;
    40: 000003   C011  rjmp	EXT_INT2	;
    41: 000004   C010  rjmp	TIM2_COMP	;
    42: 000005   C00F  rjmp	TIM2_OVF	;
    43: 000006   C00E  rjmp	TIM1_CAPT	;
    44: 000007   C00D  rjmp	TIM1_COMPA	;
    45: 000008   C00C  rjmp	TIM1_COMPB	;
    46: 000009   C00B  rjmp	TIM1_OVF	;
    47: 00000A   C00A  rjmp	TIM0_COMP	;
    48: 00000B   C009  rjmp	TIM0_OVF	;
    49: 00000C   C008  rjmp	SPI_STC		;
    50: 00000D   C007  rjmp	USART_RXC	;
    51: 00000E   C006  rjmp	USART_UDRE	;
    52: 00000F   C005  rjmp	USART_TXC	;
    53: 000010   C004  rjmp	ADC		;
    54: 000011   C003  rjmp	EE_RDY		;
    55: 000012   C002  rjmp	ANA_COMP	;
    56: 000013   C001  rjmp	TWI		;
    57: 000014   C000  rjmp	SPM_RDY		;
    58: 
    59: 
    60: ;RESET:
    61: EXT_INT0:
    62: EXT_INT1:
    63: EXT_INT2:
    64: TIM2_COMP:
    65: TIM2_OVF:
    66: TIM1_CAPT:
    67: TIM1_COMPA:
    68: TIM1_COMPB:
    69: TIM1_OVF:
    70: TIM0_COMP:
    71: TIM0_OVF:
    72: SPI_STC:
    73: USART_RXC:
    74: USART_UDRE:
    75: USART_TXC:
    76: ADC:
    77: EE_RDY:
    78: ANA_COMP:
    79: TWI:
    80: SPM_RDY:
    81: 000015   9518  reti
    82: 
    83: 
    84: 
    85: RESET:	
    86: 000016   E50F  ldi R16,low(RAMEND) ;инициализация стека
    87: 000017   BF0D  out SPL,R16
    88: 000018   E008  ldi R16,high(RAMEND)
    89: 000019   BF0E  out SPH, R16
    90: 
    91: 00001A   95A8  WDR
    92: 00001B   E00F  LDI Temp, 1<<WDE|1<<WDP2|1<<WDP1|1<<WDP0
    93: 00001C   BD01  OUT WDTCR, Temp
    94: 00001D   95A8  WDR
    95: 
    96: 00001E   E607  LDI 	R16, low(bauddivider)
    97: 00001F   B909  OUT 	UBRRL,R16
    98: 000020   E000  LDI 	R16, high(bauddivider)
    99: 000021   BD00  OUT 	UBRRH,R16
   100:  
   101: 000022   E000  LDI 	R16,0
   102: 000023   B90B  OUT 	UCSRA, R16
   103:  
   104: ; Прерывания запрещены, прием-передача разрешен.
   105: 000024   E108  LDI 	R16, (1<<RXEN)|(1<<TXEN)|(0<<RXCIE)|(0<<TXCIE)|(0<<UDRIE)
   106: 000025   B90A  OUT 	UCSRB, R16	
   107:  
   108: ; Формат кадра - 8 бит, пишем в регистр UCSRC, за это отвечает бит селектор
   109: 000026   E806  LDI 	R16, (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1)
   110: 000027   BD00  OUT 	UCSRC, R16
   111: 
   112: 000028   9478  SEI
   113:  
   114: 000029   E800  LDI R16, 1<<7
   115: 00002A   BB01  OUT DDRD, R16
   116: 
   117: 00002B   E800  ldi R16,1<<Light	;настройка порта A
   118: 00002C   BB0A  out DDRA,R16
   119: 
   120: 00002D   E00E  ldi Temp, 1<<DS|1<<SHcp|1<<STcp  ;настройка порта SEG7
   121: 00002E   B31A  in Temp2, SEG7_DDR
   122: 00002F   7F11  ANDI Temp2, ~(1<<STcp|1<<SHcp|1<<DS)
   123: 000030   2B01  OR Temp, Temp2
   124: 000031   BB0A  out SEG7_DDR,Temp
   125: 
   126: 000032   E000  ldi R16,0b00000000	;Гасим свет
   127: 000033   BB0B  out PORTA,R16
   128: 
   129: 
   130: 	
   131: 000034   2711  CLR R17
   132: 000035   2722  CLR R18
   133: 000036   D1F5  RCALL EEPROM_read
   134: 000037   2E60  MOV Th0,R16		;Час выключения
   135: 000038   9513  INC R17
   136: 000039   D1F2  RCALL EEPROM_read
   137: 00003A   2E70  MOV Tm0,R16		;Минута выключения
   138: 00003B   9513  INC R17
   139: 00003C   D1EF  RCALL EEPROM_read
   140: 00003D   2E80  MOV Th1,R16		;Час включения
   141: 00003E   9513  INC R17
   142: 00003F   D1EC  RCALL EEPROM_read
   143: 000040   2E90  MOV Tm1,R16		;Минута включения
   144: 
   145: 000041   D003  RCALL CheckFlag
   146: 
   147: 
   148: 000042   E800  LDI R16,128	;НАстройка TWI
   149: 000043   B900  OUT TWBR, R16
   150: 000044   C014  RJMP Begin
   151: 
   152: ;|----------------------------------------------------------------------
   153: CheckFlag:	;Выставить флаг =1 если T0 > T1, иначе =0
   154: 000045   2700  CLR R16
   155: 000046   D1AC  RCALL CpTime
   156: 000047   F010  BRLO FlagZero
   157: 000048   E001  LDI R16, 1
   158: 000049   C001  RJMP FlagWrite
   159: 00004A   E000  LDI R16, 0
   160: 00004B   2E50  MOV Flag, R16
   161: 00004C   9508  RET
   162: ;|----------------------------------------------------------------------
   163: 
   164: 	.include 	"TWI_macro.inc"
  Including file TWI_macro.inc
     1: ;===============================================================================================
     2: ; TWI Init
     3: 
     4: 	.equ	DS1307		= 0b11010000	;Адрес часов
     5: 
     6: 	.equ	Start		= 0x08		;Прошел старт
     7: 	.equ	Restart		= 0x10		;Прошел Рестарт
     8: 	.equ	SLA_W_ACK	= 0x18		;Адрес + запись принят, получен ACK
     9: 	.equ	Byte_ACK	= 0x28		;Байт отправлен, получен ACK
    10: 	.equ	SLA_R_ACK	= 0x40		;Адрес + чтение принят, получен ACK
    11: 	.equ	RecB		= 0x50		;Байт получен, передан ACK
    12: 	.equ	RecB_NACK	= 0x58		;Байт получен, передан NACK
    13: 
    14: ;===============================================================================================
    15: ;Start
    16: 	.MACRO	TWI_START
    17: 	LDI R16, 1<<TWEN|1<<TWSTA|1<<TWINT	;START
    18: 	OUT TWCR, R16
    19: 
    20: 	rcall wait1	;Ждем прерывания
    21: 	IN R16, TWSR
    22: 	ANDI R16, 0XF8
    23: 	CPI R16, Start	;ПРОВЕРКА СТАРТА
    24: 	BREQ NoError
    25: 	LDI R16,1
    26: 	Mov R14,R16
    27: NoError:
    28: 	.ENDM
    29: 
    30: ;===============================================================================================
    31: ;ReStart
    32: 	.MACRO	TWI_RESTART
    33: 	LDI R16, 1<<TWEN|1<<TWSTA|1<<TWINT	;RESTART
    34: 	OUT TWCR, R16
    35: 
    36: 	rcall wait1	;Ждем прерывания
    37: 	IN R16, TWSR
    38: 	ANDI R16, 0XF8
    39: 	CPI R16, Restart	;ПРОВЕРКА СТАРТА
    40: 	BREQ NoError
    41: 	LDI R16,5
    42: 	Mov R14,R16
    43: NoError:
    44: 	.ENDM
    45: 
    46: ;===============================================================================================
    47: ;Stop
    48: 	.MACRO	TWI_STOP
    49: 	LDI R16, 1<<TWEN|1<<TWSTO|1<<TWINT	;STOP
    50: 	OUT TWCR, R16
    51: 	.ENDM
    52: 
    53: ;===============================================================================================
    54: ;SLA_W
    55: 	.MACRO	TWI_SLA_W
    56: 	LDI R16,DS1307	;АДРЕС УСТРОЙСТВА
    57: 	OUT TWDR, R16
    58: 	LDI R16, 1<<TWINT|1<<TWEN
    59: 	OUT TWCR, R16
    60: 
    61: 	rcall wait1	;Ждем прерывания
    62: 	IN R16, TWSR
    63: 	ANDI R16, 0XF8
    64: 	CPI R16, SLA_W_ACK	;ПРОВЕРКА ОТВЕТА НА АДРЕС
    65: 	BREQ NoError2
    66: 	LDI R16,3
    67: 	Mov R14,R16
    68: NoError2:
    69: 	.ENDM
    70: 
    71: 
    72: ;===============================================================================================
    73: ;SLA_R
    74: 	.MACRO	TWI_SLA_R
    75: 	LDI R16,DS1307|1<<0	;АДРЕС УСТРОЙСТВА
    76: 	OUT TWDR, R16
    77: 	LDI R16, 1<<TWINT|1<<TWEN
    78: 	OUT TWCR, R16
    79: 
    80: 	rcall wait1	;Ждем прерывания
    81: 	IN R16, TWSR
    82: 	ANDI R16, 0XF8
    83: 	CPI R16, SLA_R_ACK	;ПРОВЕРКА ОТВЕТА НА АДРЕС
    84: 	BREQ NoError3
    85: 	LDI R16,7
    86: 	Mov R14,R16
    87: NoError3:
    88: 	.ENDM
    89: 
    90: ;===============================================================================================
    91: ;Send Byte
    92: 	.MACRO	TWI_SEND_B
    93: 	LDI R16,@0	;АДРЕС СЛОВА
    94: 	OUT TWDR, R16
    95: 	LDI R16, 1<<TWINT|1<<TWEN
    96: 	OUT TWCR, R16
    97: 
    98: 	rcall wait1	;Ждем прерывания
    99: 	IN R16, TWSR
   100: 	ANDI R16, 0XF8
   101: 	CPI R16, Byte_ACK	;ПРОВЕРКА ПРИНЯТИЯ БАЙТА
   102: 	BREQ NoError4
   103: 	LDI R16,15
   104: 	Mov R14,R16
   105: NoError4:
   106: 	.ENDM
   107: 
   108: ;===============================================================================================
   109: ;Send R16
   110: 	.MACRO	TWI_SEND_R16
   111: 	OUT TWDR, R16
   112: 	LDI R16, 1<<TWINT|1<<TWEN
   113: 	OUT TWCR, R16
   114: 
   115: 	rcall wait1	;Ждем прерывания
   116: 	IN R16, TWSR
   117: 	ANDI R16, 0XF8
   118: 	CPI R16, Byte_ACK	;ПРОВЕРКА ПРИНЯТИЯ БАЙТА
   119: 	BREQ NoError7
   120: 	LDI R16,15
   121: 	Mov R14,R16
   122: NoError7:
   123: 	.ENDM
   124: 
   125: 
   126: ;===============================================================================================
   127: ;Receive Byte + ACK
   128: 	.MACRO	TWI_READ_B_ACK
   129: 	LDI R16, 1<<TWINT|1<<TWEN|1<<TWEA	;Бум читать
   130: 	OUT TWCR, R16
   131: 	rcall wait1	;Ждем прерывания
   132: 	IN R16, TWSR
   133: 	ANDI R16, 0XF8
   134: 	CPI R16, RecB	;ПРОВЕРКА ЧТЕНИЯ
   135: 	BREQ NoError5
   136: 	LDI R16,31
   137: 	Mov R14,R16
   138: NoError5:	
   139: 	IN R16, TWDR
   140: .ENDM
   141: 
   142: ;===============================================================================================
   143: ;Receive Byte + NACK
   144: 	.MACRO	TWI_READ_B_NACK
   145: 	LDI R16, 1<<TWINT|1<<TWEN|0<<TWEA	;Бум читать
   146: 	OUT TWCR, R16
   147: 	rcall wait1	;Ждем прерывания
   148: 	IN R16, TWSR
   149: 	ANDI R16, 0XF8
   150: 	CPI R16, RecB_NACK	;ПРОВЕРКА ЧТЕНИЯ
   151: 	BREQ NoError6
   152: 	LDI R16,63
   153: 	Mov R14,R16
   154: NoError6:	
   155: 	IN R16, TWDR
   156: .ENDM
   157: ;===============================================================================================
   158: 
   159: 
   160: 
   161: 00004D   B706  IN R16, TWCR		;Ждем прерывания
   162: 00004E   FF07  SBRS R16, TWINT
   163: 00004F   CFFD  RJMP wait1
   164: 000050   9508  RET
  Continuing file ish.asm
   165: 
   166: sym_table:
   167: 	; Таблица символов 7SEG дисплея
   168: 	; Q0 = A, Q1 = E, Q2 = D, Q3 = dot,
   169: 	; Q4 = C, Q5 = F, Q6 = G,   Q7 = B
   170: 
   171: 	.DB 0b10110111, 0b10010000 ; 0, 1
        000051 90B7
   172: 	.DB 0b11000111, 0b11010101 ; 2, 3
        000052 D5C7
   173: 	.DB 0b11110000, 0b01110101 ; 4, 5
        000053 75F0
   174: 	.DB 0b01110111, 0b10010001 ; 6, 7
        000054 9177
   175: 	.DB 0b11110111, 0b11110101 ; 8, 9
        000055 F5F7
   176: 	.DB 0b00010110, 0b01100110 ; u, t
        000056 6616
   177: 	.DB 0b00100111, 0b01010010 ; C, n
        000057 5227
   178: 	.DB 0b01000010, 0b01100011 ; r, F
        000058 6342
   179: 
   180: 
   181: 000059   D14D  RCALL ReadTime
   182: 00005A   FE50  SBRS Flag, 0
   183: 00005B   C007  RJMP FL0	;Если флаг  не выставлен, переходим к сравнению, когда T0<T1
   184: 
   185: 00005C   E002  LDI R16, 1<<1		;Сравниваем текущее время с T1
   186: 00005D   D195  rcall CpTime
   187: 00005E   F078  BRLO Light_Off	; Если Т1 больше - выключаем
   188: 00005F   E001  LDI R16, 1<<0		;Сравниваем текущее время с T0
   189: 000060   D192  rcall CpTime
   190: 000061   F460  BRSH Light_Off	; Если Тc больше - выключаем
   191: 000062   C007  rjmp Light_ON
   192: 
   193: FL0:	; Флаг =0
   194: 000063   E002  LDI R16, 1<<1		;Сравниваем текущее время с T1
   195: 000064   D18E  rcall CpTime
   196: 000065   F420  BRSH Light_On	; Если Тc больше - включаем
   197: 000066   E001  LDI R16, 1<<0		;Сравниваем текущее время с T0
   198: 000067   D18B  rcall CpTime
   199: 000068   F428  BRSH Light_Off	; Если Тc больше - выключаем
   200: 000069   C000  rjmp Light_ON
   201: 
   202: 
   203: 
   204: 00006A   B30B  in R16,PORTA ; Включаем свет
   205: 00006B   6800  ori R16, 1<<Light
   206: 00006C   BB0B  out PORTA, R16
   207: 00006D   C003  rjmp Bezdel
   208: 
   209: 00006E   B30B  in R16,PORTA ; Выключаем свет
   210: 00006F   770F  andi R16, ~(1<<Light)
   211: 000070   BB0B  out PORTA, R16
   212: 
   213: Bezdel:
   214: 000071   D1EE  rcall BCDTo7SEG
   215: 000072   95A8  WDR
   216: 
   217: 000073   D1A0  rcall Delay
   218: 000074   0000  nop
   219: 000075   CFE3  RJMP Begin
   220: 
   221: ;|----------------------------------------------------------------------
   222: ;| Настройка
   223: ;|----------------------------------------------------------------------
   224: MenuWays: .dw	TCurrent, SetThC, SetTmC, TCurrentWR, TOff, SetTh0, SetTm0, TOffWR, TOn, SetTh1, SetTm1, TOnWR, SetExit	;Для переходов по меню
        000076 00BD 00CA 00DB 00E7 012A 0135 0146 0152
        00007E 0163 016C 017D 0189 0199
   225: 
   226: 000083   24AA  CLR MenuCNT
   227: 000084   94E8  CLT
   228: 000085   910F  POP R16
   229: 000086   910F  POP R16
   230: 000087   2D4A  MOV R20, MenuCNT
   231: 000088   0F44  LSL R20
   232: 000089   EEEC  LDI	ZL, low(MenuWays*2)		; Загружаем адрес нашей таблицы.
   233: 00008A   E0F0  LDI	ZH, High(MenuWays*2)
   234: 00008B   2755  CLR	R21
   235: 00008C   0FE4  ADD	ZL, R20
   236: 00008D   1FF5  ADC	ZH, R21
   237: 00008E   9145  LPM	R20,Z+
   238: 00008F   9154  LPM	R21,Z
   239: ;	MOVW	 ZH:ZL, R21:R20
   240: 000090   2FF5  MOV ZH, R21
   241: 000091   2FE4  MOV ZL, R20
   242: 000092   9409  IJMP
   243: 
   244: 000093   94E8  CLT
   245: 000094   2D1A  MOV R17, MenuCNT
   246: 000095   7013  ANDI R17, 1<<0|1<<1
   247: 000096   F011  BREQ ADD4
   248: 000097   94A3  INC MenuCNT
   249: 000098   CFEE  RJMP MenuRoute
   250: 000099   2D1A  MOV R17, MenuCNT
   251: 00009A   5F1C  SUBI R17, 0xFC		;R17 + 4
   252: 00009B   2EA1  MOV MenuCNT, R17
   253: 00009C   CFEA  RJMP MenuRoute
   254: 
   255: 
   256: 00009D   2D1A  MOV R17, MenuCNT
   257: 00009E   7013  ANDI R17, 1<<0|1<<1
   258: 00009F   F011  BREQ MenuInc
   259: 0000A0   D192  Rcall BCDInc		; Инкремент числа в BCD
   260: 0000A1   CFE5  RJMP MenuRoute
   261: 0000A2   94A3  INC MenuCNT
   262: 0000A3   CFE3  RJMP MenuRoute
   263: 
   264: 0000A4   E000  LDI R16,0x00      ;задержка (0:6 - 0,2 секунды)
   265: 0000A5   2E30  MOV R3, R16
   266: 0000A6   E006  LDI R16,0x06
   267: 0000A7   2E40  MOV R4, R16
   268: 0000A8   D1D8  rcall TimeToSeg
   269: 0000A9   943A  dec R3
   270: 0000AA   F7E9  brne Loop2
   271: 0000AB   944A  dec R4
   272: 0000AC   F7D9  brne Loop2
   273: 0000AD   95A8  WDR
   274: 0000AE   E000  LDI R16,0x00      ;задержка (0:6 - 0,2 секунды)
   275: 0000AF   2E30  MOV R3, R16
   276: 0000B0   E708  LDI R16,120
   277: 0000B1   2E40  MOV R4, R16
   278: 0000B2   D1CE  rcall TimeToSeg
   279: 0000B3   943A  dec R3
   280: 0000B4   F7E9  brne Loop3
   281: 0000B5   9BCD  SBIS KeyPin, MenuKey	; Изменить!!!
   282: 0000B6   CFDC  RJMP MenuPressed
   283: 0000B7   9BCE  SBIS KeyPin, OkKey	; Изменить!!!
   284: 0000B8   CFE4  RJMP OkPressed
   285: 0000B9   95A8  WDR
   286: 0000BA   944A  dec R4
   287: 0000BB   F7B1  brne Loop3
   288: 
   289: 0000BC   CF9C  RJMP Begin
   290: 
   291: 
   292: 0000BD   EB0C  LDI R16, 0xBC		; Отобразить tCur
   293: 0000BE   2EC0  MOV R12, R16
   294: 0000BF   EA0E  LDI R16, 0xAE
   295: 0000C0   2EB0  MOV R11, R16
   296: 0000C1   D19E  rcall BCDTo7SEG
   297: 0000C2   9100  LDS R16, TimeToOut+1
        0000C3   0061
   298: 0000C4   7F07  ANDI R16, ~(1<<dot)
   299: 0000C5   9300  STS TimeToOut+1, R16
        0000C6   0061
   300: 0000C7   D0D5  RCALL Delay05
   301: 0000C8   95A8  WDR
   302: 0000C9   CFDA  RJMP Indication
   303: 
   304: 0000CA   F01E  BRTS ThCTS			; Настройка часов
   305: 0000CB   9468  SET
   306: 0000CC   D0DA  RCALL ReadTime
   307: 0000CD   2D7C  MOV IncBCD, R12
   308: 0000CE   2EC7  MOV R12, IncBCD
   309: 0000CF   D190  rcall BCDTo7SEG
   310: 0000D0   9110  LDS R17, TimeToOut+1
        0000D1   0061
   311: 0000D2   7F17  ANDI R17, ~(1<<dot)
   312: 0000D3   9310  STS TimeToOut+1, R17
        0000D4   0061
   313: 0000D5   2711  CLR R17
   314: 0000D6   9310  STS TimeToOut+2, R17
        0000D7   0062
   315: 0000D8   9310  STS TimeToOut+3, R17
        0000D9   0063
   316: 0000DA   CFC9  RJMP Indication
   317: 
   318: 
   319: 0000DB   F01E  BRTS TmCTS			; Настройка минут
   320: 0000DC   9468  SET
   321: 0000DD   2F67  MOV R22, IncBCD
   322: 0000DE   2D7B  MOV IncBCD, R11
   323: 0000DF   2EB7  MOV R11, IncBCD
   324: 0000E0   D17F  rcall BCDTo7SEG
   325: 0000E1   2711  CLR R17
   326: 0000E2   9310  STS TimeToOut, R17
        0000E3   0060
   327: 0000E4   9310  STS TimeToOut+1, R17
        0000E5   0061
   328: 0000E6   CFBD  RJMP Indication
   329: 
   330: TCurrentWR:				; Сохранение времени в DS1307
   331: 	TWI_START
   332: 	TWI_SLA_W
   333: 	TWI_SEND_B 0x00
   334: 	TWI_SEND_B 0x00	;БАЙТ ДАННЫХ (СЕКУНДЫ)
   335: 000111   2F07  MOV R16, IncBCD
   336: 	TWI_SEND_R16	;БАЙТ ДАННЫХ (МИНУТЫ)
   337: 00011C   2F06  MOV R16, R22
   338: 	TWI_SEND_R16	;БАЙТ ДАННЫХ (ЧАСЫ)
   339: 	TWI_STOP
   340: 000129   94A3  INC MenuCNT
   341: 
   342: 
   343: 00012A   EB00  LDI R16, 0xB0		; Отобразить tOFF
   344: 00012B   2EC0  MOV R12, R16
   345: 00012C   EF0F  LDI R16, 0xFF
   346: 00012D   2EB0  MOV R11, R16
   347: 00012E   D131  rcall BCDTo7SEG
   348: 00012F   9100  LDS R16, TimeToOut+1
        000130   0061
   349: 000131   7F07  ANDI R16, ~(1<<dot)
   350: 000132   9300  STS TimeToOut+1, R16
        000133   0061
   351: 000134   CF6F  RJMP Indication
   352: 
   353: 000135   F01E  BRTS Th0TS			; Настройка часа выключения
   354: 000136   9468  SET
   355: 000137   2D76  MOV IncBCD, Th0
   356: 000138   24BB  CLR R11
   357: 000139   2EC7  MOV R12, IncBCD
   358: 00013A   D125  rcall BCDTo7SEG
   359: 00013B   9110  LDS R17, TimeToOut+1
        00013C   0061
   360: 00013D   7F17  ANDI R17, ~(1<<dot)
   361: 00013E   9310  STS TimeToOut+1, R17
        00013F   0061
   362: 000140   2711  CLR R17
   363: 000141   9310  STS TimeToOut+2, R17
        000142   0062
   364: 000143   9310  STS TimeToOut+3, R17
        000144   0063
   365: 000145   CF5E  RJMP Indication
   366: 
   367: 000146   F01E  BRTS Tm0TS			; Настройка минуты выключения
   368: 000147   9468  SET
   369: 000148   2F67  MOV R22, IncBCD
   370: 000149   2D77  MOV IncBCD, Tm0
   371: 00014A   2EB7  MOV R11, IncBCD
   372: 00014B   D114  rcall BCDTo7SEG
   373: 00014C   2711  CLR R17
   374: 00014D   9310  STS TimeToOut, R17
        00014E   0060
   375: 00014F   9310  STS TimeToOut+1, R17
        000150   0061
   376: 000151   CF52  RJMP Indication
   377: 
   378: 000152   2E77  MOV Tm0, IncBCD
   379: 000153   2E66  MOV Th0, R22
   380: 000154   2700  CLR R16
   381: 000155   D09D  RCALL CpTime	; Проверка на совпадение времени
   382: 000156   F419  BRNE WRt0		; Если Т0 и Т1 совпадает, увеличиваем Th0 на 1
   383: 000157   2D76  MOV IncBCD, Th0
   384: 000158   D0DA  Rcall BCDInc
   385: 000159   2E67  MOV Th0, IncBCD
   386: 00015A   2711  CLR R17
   387: 00015B   2722  CLR R18
   388: 00015C   2D06  MOV R16, Th0
   389: 00015D   D0C6  RCALL EEPROM_write
   390: 00015E   9513  INC R17
   391: 00015F   2D07  MOV R16, Tm0
   392: 000160   D0C3  RCALL EEPROM_write
   393: 000161   DEE3  RCALL CheckFlag
   394: 000162   94A3  INC MenuCNT
   395: 
   396: 
   397: 
   398: 000163   EB00  LDI R16, 0xB0		; Отобразить t On
   399: 000164   2EC0  MOV R12, R16
   400: 000165   E00D  LDI  R16, 0x0D
   401: 000166   2EB0  MOV R11, R16
   402: 000167   D0F8  rcall BCDTo7SEG
   403: 000168   2700  CLR R16
   404: 000169   9300  STS TimeToOut+1, R16
        00016A   0061
   405: 00016B   CF38  RJMP Indication
   406: 
   407: 00016C   F01E  BRTS Th1TS			; Настройка часа включения
   408: 00016D   9468  SET
   409: 00016E   2D78  MOV IncBCD, Th1
   410: 00016F   24BB  CLR R11
   411: 000170   2EC7  MOV R12, IncBCD
   412: 000171   D0EE  rcall BCDTo7SEG
   413: 000172   9110  LDS R17, TimeToOut+1
        000173   0061
   414: 000174   7F17  ANDI R17, ~(1<<dot)
   415: 000175   9310  STS TimeToOut+1, R17
        000176   0061
   416: 000177   2711  CLR R17
   417: 000178   9310  STS TimeToOut+2, R17
        000179   0062
   418: 00017A   9310  STS TimeToOut+3, R17
        00017B   0063
   419: 00017C   CF27  RJMP Indication
   420: 
   421: 00017D   F01E  BRTS Tm1TS			; Настройка минуты включения
   422: 00017E   9468  SET
   423: 00017F   2F67  MOV R22, IncBCD
   424: 000180   2D79  MOV IncBCD, Tm1
   425: 000181   2EB7  MOV R11, IncBCD
   426: 000182   D0DD  rcall BCDTo7SEG
   427: 000183   2711  CLR R17
   428: 000184   9310  STS TimeToOut, R17
        000185   0060
   429: 000186   9310  STS TimeToOut+1, R17
        000187   0061
   430: 000188   CF1B  RJMP Indication
   431: 
   432: 000189   2E97  MOV Tm1, IncBCD
   433: 00018A   2E86  MOV Th1, R22
   434: 00018B   2700  CLR R16
   435: 00018C   D066  RCALL CpTime	; Проверка на совпадение времени
   436: 00018D   F419  BRNE WRt1		; Если Т0 и Т1 совпадает, увеличиваем Th1 на 1
   437: 00018E   2D78  MOV IncBCD, Th1
   438: 00018F   D0A3  Rcall BCDInc
   439: 000190   2E87  MOV Th1, IncBCD
   440: 000191   E012  LDI R17, 0x02
   441: 000192   2722  CLR R18
   442: 000193   2D08  MOV R16, Th1
   443: 000194   D08F  RCALL EEPROM_write
   444: 000195   9513  INC R17
   445: 000196   2D09  MOV R16, Tm1
   446: 000197   D08C  RCALL EEPROM_write
   447: 000198   DEAC  RCALL CheckFlag
   448: 	
   449: 000199   D00D  RCALL ReadTime
   450: 00019A   D0C5  RCALL BCDTo7SEG
   451: 00019B   D001  RCALL Delay05
   452: 	
   453: 00019C   CEBC  RJMP Begin
   454: 
   455: 00019D   E000  LDI R16,0x00      ;задержка (0:6 - 0,2 секунды)
   456: 00019E   2E30  MOV R3, R16
   457: 00019F   E007  LDI R16,0x07
   458: 0001A0   2E40  MOV R4, R16
   459: 0001A1   D0DF  rcall TimeToSeg
   460: 0001A2   943A  dec R3
   461: 0001A3   F7E9  brne Loop4
   462: 0001A4   944A  dec R4
   463: 0001A5   F7D9  brne Loop4
   464: 0001A6   9508  RET
   465: ;|----------------------------------------------------------------------
   466: ;| Конец настройки
   467: ;|----------------------------------------------------------------------
   468: 
   469: ;|----------------------------------------------------------------------
   470: ;| Чтение времени
   471: ;|----------------------------------------------------------------------
   472: ReadTime:	
   473: 	TWI_START
   474: 	TWI_SLA_W
   475: 	TWI_SEND_B 0x01
   476: 	TWI_RESTART
   477: 	TWI_SLA_R
   478: 	TWI_READ_B_ACK
   479: 0001E4   2EB0  MOV R11,R16	;Записали минуты в R11
   480: 	TWI_READ_B_NACK
   481: 0001EF   2EC0  MOV R12,R16	;Записали Часы в R12
   482: 	TWI_STOP
   483: 0001F2   9508  RET
   484: ;|----------------------------------------------------------------------
   485: ;|                               END
   486: ;|----------------------------------------------------------------------
   487: 
   488: 
   489: ;|----------------------------------------------------------------------
   490: ;| Сравнение текущего времени с заданным.
   491: ;| Если флаг R16 = 1 сравнивается с Т0, Если R16 = 2 с Т1
   492: ;| Иначе сравнивается Т0 с Т1
   493: ;| На выходе:	C=1 если Tc<Tdest
   494: ;|		C=0 если Tc>=Tdest
   495: ;|		Z=1 если Tc=Tdest
   496: ;|----------------------------------------------------------------------
   497: CpTime:	
   498: 0001F3   92CF  PUSH ThC
   499: 0001F4   92BF  PUSH TmC
   500: 0001F5   FD00  SBRC R16,0
   501: 0001F6   C005  RJMP CPWithT0
   502: 0001F7   FD01  SBRC R16,1
   503: 0001F8   C006  RJMP CPWithT1
   504: 
   505: 0001F9   2CC6  MOV ThC, Th0	;Сравниваем Т0 с Т1
   506: 0001FA   2CB7  MOV TmC, Tm0
   507: 0001FB   C003  RJMP CPWithT1
   508: 
   509: CPWithT0:	; Сравниваем с T0
   510: 0001FC   2D06  MOV R16, Th0
   511: 0001FD   2D17  MOV R17, Tm0
   512: 0001FE   C002  rjmp CpStart
   513: 
   514: CPWithT1:	; Сравниваем с T1
   515: 0001FF   2D08  MOV R16, Th1
   516: 000200   2D19  MOV R17, Tm1
   517: 
   518: CpStart:
   519: 000201   16C0  CP ThC, R16
   520: 000202   F048  BRLO CpTimeLO ;TimeCur<T
   521: 000203   150C  CP R16, ThC
   522: 000204   F050  BRLO CpTimeSH ;TimeCur>T
   523: 000205   16B1  CP TmC, R17
   524: 000206   F028  BRLO CpTimeLO ;TimeCur<T
   525: 000207   151B  CP R17, TmC
   526: 000208   F030  BRLO CpTimeSH ;TimeCur>T
   527: 
   528: 000209   9488  CLC	;Если равны
   529: 00020A   9418  SEZ
   530: 00020B   C005  RJMP CpTimeEnd
   531: 
   532: 00020C   9408  SEC	;Если TimeCur < T
   533: 00020D   9498  CLZ
   534: 00020E   C002  RJMP CpTimeEnd
   535: 
   536: 00020F   9488  CLC	;Если TimeCur > T
   537: 000210   9498  CLZ
   538: 
   539: CpTimeEnd:
   540: 000211   90BF  POP TmC
   541: 000212   90CF  POP ThC
   542: 000213   9508  RET
   543: ;|----------------------------------------------------------------------
   544: ;|                               END
   545: ;|----------------------------------------------------------------------
   546: 
   547: 
   548: 
   549: 000214   E000  LDI R16,0;задержка (0,0,24 - 0,5 секунды)
   550: 000215   2E30  MOV R3, R16
   551: 000216   E10E  LDI R16,30
   552: 000217   2E40  MOV R4, R16
   553: 
   554: 000218   D068  rcall TimeToSeg
   555: 000219   943A  dec R3
   556: 00021A   F7E9  brne Loop1
   557: 00021B   9BCD  SBIS KeyPin, MenuKey	; Изменить!!!
   558: 00021C   CE66  RJMP Setting
   559: 00021D   944A  dec R4
   560: 00021E   F7C9  brne Loop1
   561: 00021F   9508  RET
   562: 
   563: ; Процедура отправки байта
   564: 000220   9B5D  SBIS 	UCSRA,UDRE	; Пропуск если нет флага готовности
   565: 000221   CFFE  RJMP	uart_snt 	; ждем готовности - флага UDRE
   566: 000222   B90C  OUT	UDR, R16	; шлем байт
   567: 000223   9508  RET
   568: 
   569: 
   570: EEPROM_write:
   571: 000224   99E1  sbic EECR,EEWE
   572: 000225   CFFE  rjmp EEPROM_write
   573: ; Set up address (r18:r17) in address register
   574: 000226   BB2F  out EEARH, r18
   575: 000227   BB1E  out EEARL, r17
   576: ; Write data (r16) to data register
   577: 000228   BB0D  out EEDR,r16
   578: ; Write logical one to EEMWE
   579: 000229   9AE2  sbi EECR,EEMWE
   580: ; Start eeprom write by setting EEWE
   581: 00022A   9AE1  sbi EECR,EEWE
   582: 00022B   9508  ret
   583: 
   584: 
   585: EEPROM_read:
   586: ; Wait for completion of previous write
   587: 00022C   99E1  sbic EECR,EEWE
   588: 00022D   CFFE  rjmp EEPROM_read
   589: ; Set up address (r18:r17) in address register
   590: 00022E   BB2F  out EEARH, r18
   591: 00022F   BB1E  out EEARL, r17
   592: ; Start eeprom read by writing EERE
   593: 000230   9AE0  sbi EECR,EERE
   594: ; Read data from data register
   595: 000231   B30D  in r16,EEDR
   596: 000232   9508  ret
   597: 
   598: 
   599: ;|----------------------------------------------------------------------
   600: ;| Инкремент Числа BCD
   601: ;| На входе: число в IncBCD
   602: ;| Счетчик меню MenuCNT
   603: ;|----------------------------------------------------------------------
   604: 000233   9573  INC IncBCD
   605: 000234   2F17  MOV R17, IncBCD
   606: 000235   701F  ANDI R17, 0x0F	;отбросить старшую тетраду
   607: 000236   301A  CPI R17, 0x0A
   608: 000237   F010  BRLO BCDnoHalfC	;нет полупереносв
   609: 000238   7F70  ANDI IncBCD, 0xF0	;очистить младшую тетраду
   610: 000239   5F70  SUBI IncBCD, 0xF0	;инкремент старшей тетрады
   611: 00023A   3670  CPI IncBCD, 0x60
   612: 00023B   F008  BRLO BCDOK
   613: 00023C   2777  CLR IncBCD
   614: 00023D   FEA0  SBRS MenuCNT, 0
   615: 00023E   C003  RJMP BCDend
   616: 00023F   3274  CPI IncBCD, 0x24
   617: 000240   F008  BRLO BCDend
   618: 000241   2777  CLR IncBCD
   619: BCDend:
   620: 000242   9508  RET
   621: ;|----------------------------------------------------------------------
   622: ;|                               END
   623: ;|----------------------------------------------------------------------
   624: 
   625: 
   626: ;|----------------------------------------------------------------------
   627: ;| Процедура вывода на 7 сегментный индикатор
   628: ;| На входе: разряд в OutByte
   629: ;|           символ в OutByte2
   630: ;|----------------------------------------------------------------------
   631: Output:
   632: 000243   E020  ldi CNT,0
   633: 000244   9488  clc
   634: 000245   0F44  lsl OutByte
   635: 000246   F018  BRLO One		;переход если С=1
   636: 
   637: 000247   E004  ldi Temp, 0<<STcp|1<<SHcp|0<<DS
   638: 000248   D009  rcall EndWR
   639: 000249   C002  rjmp Check
   640: 
   641: 00024A   E006  ldi Temp, 0<<STcp|1<<SHcp|1<<DS
   642: 00024B   D006  rcall EndWR
   643: 
   644: 00024C   E000  ldi Temp, 0<<STcp|0<<SHcp|0<<DS
   645: 00024D   D004  rcall EndWR
   646: 
   647: 00024E   9523  inc CNT
   648: 00024F   3028  cpi CNT,0b00001000
   649: 000250   F031  breq STout
   650: 000251   CFF3  rjmp Next
   651: 
   652: 000252   B31B  in Temp2, SEG7_PORT
   653: 000253   7F11  ANDI Temp2, ~(1<<STcp|1<<SHcp|1<<DS)
   654: 000254   2B01  OR Temp, Temp2
   655: 000255   BB0B  out SEG7_PORT,Temp
   656: 000256   9508  ret
   657: 
   658: 000257   F01E  BRTS STend
   659: 000258   9468  SET
   660: 000259   2F45  MOV OutByte, OutByte2
   661: 00025A   CFE8  rjmp Output
   662: 
   663: 00025B   E008  ldi Temp, 1<<STcp|0<<SHcp|0<<DS	;Затолкали, теперь выводим.
   664: 00025C   DFF5  rcall EndWR
   665: 00025D   E000  ldi Temp, 0<<STcp|0<<SHcp|0<<DS
   666: 00025E   DFF3  rcall EndWR
   667: 00025F   9508  ret
   668: ;|----------------------------------------------------------------------
   669: ;|                               END
   670: ;|----------------------------------------------------------------------
   671: 
   672: 
   673: 
   674: 
   675: 
   676: ;|----------------------------------------------------------------------
   677: ;| Процедура преобразования BCD времени в символы для 7 сегментного индикатора
   678: ;| На входе: минуты в R11
   679: ;|           часы в R12
   680: ;| На выходе: В TimeToOut - старший разряд часов,
   681: ;| в TimeToOut+1 - младний разряд часов,
   682: ;| в TimeToOut+2 - старший разряд минут,
   683: ;| в TimeToOut+3 - младний разряд минут
   684: ;|----------------------------------------------------------------------
   685: BCDTo7SEG:
   686: 000260   930F  PUSH Temp
   687: 000261   2D0C  MOV Temp, R12
   688: 000262   9502  SWAP Temp	;Поменять местами тетрады
   689: 000263   700F  ANDI Temp, 0b00001111
   690: 000264   D014  rcall FSym
   691: 000265   9300  STS TimeToOut, Temp
        000266   0060
   692: 
   693: 000267   2D0C  MOV Temp, R12
   694: 000268   700F  ANDI Temp, 0b00001111
   695: 000269   D00F  rcall FSym
   696: 00026A   6008  ORI Temp, 1<<dot
   697: 00026B   9300  STS TimeToOut+1, Temp
        00026C   0061
   698: 
   699: 00026D   2D0B  MOV Temp, R11
   700: 00026E   9502  SWAP Temp	;Поменять местами тетрады
   701: 00026F   700F  ANDI Temp, 0b00001111
   702: 000270   D008  rcall FSym
   703: 000271   9300  STS TimeToOut+2, Temp
        000272   0062
   704: 
   705: 000273   2D0B  MOV Temp, R11
   706: 000274   700F  ANDI Temp, 0b00001111
   707: 000275   D003  rcall FSym
   708: 000276   9300  STS TimeToOut+3, Temp
        000277   0063
   709: 
   710: 000278   C006  rjmp BCDTo7SEGend
   711: 
   712: FSym:	; Загрузить адрес таблицы символов
   713: 000279   EAE2  LDI ZL, LOW (2*sym_table)
   714: 00027A   E0F0  LDI ZH, HIGH(2*sym_table)
   715: 	; Найти нужный символ
   716: 00027B   0FE0  ADD ZL, Temp
   717: 	; Загрузить данные символа в R0
   718: 00027C   95C8  LPM
   719: 00027D   2D00  MOV Temp, R0
   720: 00027E   9508  ret
   721: 
   722: BCDTo7SEGend:
   723: 00027F   910F  POP Temp
   724: 000280   9508  RET
   725: ;|----------------------------------------------------------------------
   726: ;|                               END
   727: ;|----------------------------------------------------------------------
   728: 
   729: ;|----------------------------------------------------------------------
   730: ;| Процедура вывода времени
   731: ;|----------------------------------------------------------------------
   732: TimeToSeg:
   733: 000281   B70F  IN Temp, SREG
   734: 000282   930F  Push Temp
   735: 000283   E6E0  ldi ZL,Low(TimeToOut)
   736: 000284   E0F0  ldi ZH,High(TimeToOut)  ;загрузка начального адреса массива
   737: 000285   9151  LD	OutByte2, Z+
   738: 000286   EF4E  ldi OutByte, ~(1<<0) ;Первый символ
   739: 000287   94E8  CLT
   740: 000288   DFBA  rcall Output
   741: 
   742: 000289   9151  LD	OutByte2, Z+
   743: 00028A   EF4D  ldi OutByte, ~(1<<1) ;Второй символ
   744: 00028B   94E8  CLT
   745: 00028C   DFB6  rcall Output
   746: 
   747: 00028D   9151  LD	OutByte2, Z+
   748: 00028E   EF4B  ldi OutByte, ~(1<<2) ;Третий символ
   749: 00028F   94E8  CLT
   750: 000290   DFB2  rcall Output
   751: 
   752: 000291   9151  LD	OutByte2, Z+
   753: 000292   EF47  ldi OutByte, ~(1<<3) ;Четвертый символ
   754: 000293   94E8  CLT
   755: 000294   DFAE  rcall Output
   756: 000295   910F  POP Temp
   757: 000296   BF0F  OUT SREG, Temp
   758: 000297   9508  RET
   759: ;|----------------------------------------------------------------------
   760: ;|                               END
   761: ;|----------------------------------------------------------------------
   762: 
   763: .DSEG
   764: TimeToOut:	.byte	4
 -> Warning 011: C-style instructions in file, lines ignored!
 -> Warning 001: 2 symbol(s) defined, but not used!

Program             :      643 words.
Constants           :       21 words.
Total program memory:      664 words.
Eeprom space        :        0 bytes.
Data segment        :        4 bytes.
Compilation completed, no errors.
Compilation endet 11.02.2015, 13:29:52
