gavrasm Gerd's AVR assembler version 3.4 (C)2014 by DG4FAC
----------------------------------------------------------
Source file: ish.asm
Hex file:    ish.hex
Eeprom file: ish.eep
Compiled:    02.02.2015, 19:08:57
Pass:        2
     1: .include "/home/marik/Project/m32Adef.inc"
  Including file /home/marik/Project/m32Adef.inc
     1: ;***** THIS IS A MACHINE GENERATED FILE - DO NOT EDIT ********************
     2: ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32A.xml ***********
     3: ;*************************************************************************
     4: ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
     5: ;* 
     6: ;* Number            : AVR000
     7: ;* File Name         : "m32Adef.inc"
     8: ;* Title             : Register/Bit Definitions for the ATmega32A
     9: ;* Date              : 2011-02-09
    10: ;* Version           : 2.35
    11: ;* Support E-mail    : avr@atmel.com
    12: ;* Target MCU        : ATmega32A
    13: ;* 
    14: ;* DESCRIPTION
    15: ;* When including this file in the assembly program file, all I/O register 
    16: ;* names and I/O register bit names appearing in the data book can be used.
    17: ;* In addition, the six registers forming the three data pointers X, Y and 
    18: ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
    19: ;* SRAM is also defined 
    20: ;* 
    21: ;* The Register names are represented by their hexadecimal address.
    22: ;* 
    23: ;* The Register Bit names are represented by their bit number (0-7).
    24: ;* 
    25: ;* Please observe the difference in using the bit names with instructions
    26: ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
    27: ;* (skip if bit in register set/cleared). The following example illustrates
    28: ;* this:
    29: ;* 
    30: ;* in    r16,PORTB             ;read PORTB latch
    31: ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
    32: ;* out   PORTB,r16             ;output to PORTB
    33: ;* 
    34: ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
    35: ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
    36: ;* rjmp  TOV0_is_set           ;jump if set
    37: ;* ...                         ;otherwise do something else
    38: ;*************************************************************************
    39: 
    40: #ifndef _M32ADEF_INC_
    41: #define _M32ADEF_INC_
    42: 
    43: 
    44: #pragma partinc 0
    45: 
    46: ; ***** SPECIFY DEVICE ***************************************************
    47: .device ATmega32A
    48: #pragma AVRPART ADMIN PART_NAME ATmega32A
    49: .equ	SIGNATURE_000	= 0x1e
    50: .equ	SIGNATURE_001	= 0x95
    51: .equ	SIGNATURE_002	= 0x02
    52: 
    53: #pragma AVRPART CORE CORE_VERSION V2E
    54: 
    55: 
    56: ; ***** I/O REGISTER DEFINITIONS *****************************************
    57: ; NOTE:
    58: ; Definitions marked "MEMORY MAPPED"are extended I/O ports
    59: ; and cannot be used with IN/OUT instructions
    60: .equ	SREG	= 0x3f
    61: .equ	SPL	= 0x3d
    62: .equ	SPH	= 0x3e
    63: .equ	OCR0	= 0x3c
    64: .equ	GICR	= 0x3b
    65: .equ	GIFR	= 0x3a
    66: .equ	TIMSK	= 0x39
    67: .equ	TIFR	= 0x38
    68: .equ	SPMCR	= 0x37
    69: .equ	TWCR	= 0x36
    70: .equ	MCUCR	= 0x35
    71: .equ	MCUCSR	= 0x34
    72: .equ	TCCR0	= 0x33
    73: .equ	TCNT0	= 0x32
    74: .equ	OSCCAL	= 0x31
    75: .equ	OCDR	= 0x31
    76: .equ	SFIOR	= 0x30
    77: .equ	TCCR1A	= 0x2f
    78: .equ	TCCR1B	= 0x2e
    79: .equ	TCNT1L	= 0x2c
    80: .equ	TCNT1H	= 0x2d
    81: .equ	OCR1AL	= 0x2a
    82: .equ	OCR1AH	= 0x2b
    83: .equ	OCR1BL	= 0x28
    84: .equ	OCR1BH	= 0x29
    85: .equ	ICR1L	= 0x26
    86: .equ	ICR1H	= 0x27
    87: .equ	TCCR2	= 0x25
    88: .equ	TCNT2	= 0x24
    89: .equ	OCR2	= 0x23
    90: .equ	ASSR	= 0x22
    91: .equ	WDTCR	= 0x21
    92: .equ	UBRRH	= 0x20
    93: .equ	UCSRC	= 0x20
    94: .equ	EEARL	= 0x1e
    95: .equ	EEARH	= 0x1f
    96: .equ	EEDR	= 0x1d
    97: .equ	EECR	= 0x1c
    98: .equ	PORTA	= 0x1b
    99: .equ	DDRA	= 0x1a
   100: .equ	PINA	= 0x19
   101: .equ	PORTB	= 0x18
   102: .equ	DDRB	= 0x17
   103: .equ	PINB	= 0x16
   104: .equ	PORTC	= 0x15
   105: .equ	DDRC	= 0x14
   106: .equ	PINC	= 0x13
   107: .equ	PORTD	= 0x12
   108: .equ	DDRD	= 0x11
   109: .equ	PIND	= 0x10
   110: .equ	SPDR	= 0x0f
   111: .equ	SPSR	= 0x0e
   112: .equ	SPCR	= 0x0d
   113: .equ	UDR	= 0x0c
   114: .equ	UCSRA	= 0x0b
   115: .equ	UCSRB	= 0x0a
   116: .equ	UBRRL	= 0x09
   117: .equ	ACSR	= 0x08
   118: .equ	ADMUX	= 0x07
   119: .equ	ADCSRA	= 0x06
   120: .equ	ADCH	= 0x05
   121: .equ	ADCL	= 0x04
   122: .equ	TWDR	= 0x03
   123: .equ	TWAR	= 0x02
   124: .equ	TWSR	= 0x01
   125: .equ	TWBR	= 0x00
   126: 
   127: 
   128: ; ***** BIT DEFINITIONS **************************************************
   129: 
   130: ; ***** EEPROM ***********************
   131: ; EEDR - EEPROM Data Register
   132: .equ	EEDR0	= 0	; EEPROM Data Register bit 0
   133: .equ	EEDR1	= 1	; EEPROM Data Register bit 1
   134: .equ	EEDR2	= 2	; EEPROM Data Register bit 2
   135: .equ	EEDR3	= 3	; EEPROM Data Register bit 3
   136: .equ	EEDR4	= 4	; EEPROM Data Register bit 4
   137: .equ	EEDR5	= 5	; EEPROM Data Register bit 5
   138: .equ	EEDR6	= 6	; EEPROM Data Register bit 6
   139: .equ	EEDR7	= 7	; EEPROM Data Register bit 7
   140: 
   141: ; EECR - EEPROM Control Register
   142: .equ	EERE	= 0	; EEPROM Read Enable
   143: .equ	EEWE	= 1	; EEPROM Write Enable
   144: .equ	EEMWE	= 2	; EEPROM Master Write Enable
   145: .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
   146: 
   147: 
   148: ; ***** WATCHDOG *********************
   149: ; WDTCR - Watchdog Timer Control Register
   150: .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
   151: .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
   152: .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
   153: .equ	WDE	= 3	; Watch Dog Enable
   154: .equ	WDTOE	= 4	; RW
   155: .equ	WDDE	= WDTOE	; For compatibility
   156: 
   157: 
   158: ; ***** EXTERNAL_INTERRUPT ***********
   159: ; GICR - General Interrupt Control Register
   160: .equ	GIMSK	= GICR	; For compatibility
   161: .equ	IVCE	= 0	; Interrupt Vector Change Enable
   162: .equ	IVSEL	= 1	; Interrupt Vector Select
   163: .equ	INT2	= 5	; External Interrupt Request 2 Enable
   164: .equ	INT0	= 6	; External Interrupt Request 0 Enable
   165: .equ	INT1	= 7	; External Interrupt Request 1 Enable
   166: 
   167: ; GIFR - General Interrupt Flag Register
   168: .equ	INTF2	= 5	; External Interrupt Flag 2
   169: .equ	INTF0	= 6	; External Interrupt Flag 0
   170: .equ	INTF1	= 7	; External Interrupt Flag 1
   171: 
   172: ; MCUCR - General Interrupt Control Register
   173: .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
   174: .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
   175: .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
   176: .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
   177: 
   178: ; MCUCSR - MCU Control And Status Register
   179: .equ	ISC2	= 6	; Interrupt Sense Control 2
   180: 
   181: 
   182: ; ***** TIMER_COUNTER_0 **************
   183: ; TCCR0 - Timer/Counter Control Register
   184: .equ	CS00	= 0	; Clock Select 1
   185: .equ	CS01	= 1	; Clock Select 1
   186: .equ	CS02	= 2	; Clock Select 2
   187: .equ	WGM01	= 3	; Waveform Generation Mode 1
   188: .equ	CTC0	= WGM01	; For compatibility
   189: .equ	COM00	= 4	; Compare match Output Mode 0
   190: .equ	COM01	= 5	; Compare Match Output Mode 1
   191: .equ	WGM00	= 6	; Waveform Generation Mode
   192: .equ	PWM0	= WGM00	; For compatibility
   193: .equ	FOC0	= 7	; Force Output Compare
   194: 
   195: ; TCNT0 - Timer/Counter Register
   196: .equ	TCNT0_0	= 0	; 
   197: .equ	TCNT0_1	= 1	; 
   198: .equ	TCNT0_2	= 2	; 
   199: .equ	TCNT0_3	= 3	; 
   200: .equ	TCNT0_4	= 4	; 
   201: .equ	TCNT0_5	= 5	; 
   202: .equ	TCNT0_6	= 6	; 
   203: .equ	TCNT0_7	= 7	; 
   204: 
   205: ; OCR0 - Output Compare Register
   206: .equ	OCR0_0	= 0	; 
   207: .equ	OCR0_1	= 1	; 
   208: .equ	OCR0_2	= 2	; 
   209: .equ	OCR0_3	= 3	; 
   210: .equ	OCR0_4	= 4	; 
   211: .equ	OCR0_5	= 5	; 
   212: .equ	OCR0_6	= 6	; 
   213: .equ	OCR0_7	= 7	; 
   214: 
   215: ; TIMSK - Timer/Counter Interrupt Mask Register
   216: .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
   217: .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
   218: 
   219: ; TIFR - Timer/Counter Interrupt Flag register
   220: .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
   221: .equ	OCF0	= 1	; Output Compare Flag 0
   222: 
   223: 
   224: ; ***** TIMER_COUNTER_2 **************
   225: ; TIMSK - Timer/Counter Interrupt Mask register
   226: .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
   227: .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
   228: 
   229: ; TIFR - Timer/Counter Interrupt Flag Register
   230: .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
   231: .equ	OCF2	= 7	; Output Compare Flag 2
   232: 
   233: ; TCCR2 - Timer/Counter2 Control Register
   234: .equ	CS20	= 0	; Clock Select bit 0
   235: .equ	CS21	= 1	; Clock Select bit 1
   236: .equ	CS22	= 2	; Clock Select bit 2
   237: .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
   238: .equ	CTC2	= WGM21	; For compatibility
   239: .equ	COM20	= 4	; Compare Output Mode bit 0
   240: .equ	COM21	= 5	; Compare Output Mode bit 1
   241: .equ	WGM20	= 6	; Pulse Width Modulator Enable
   242: .equ	PWM2	= WGM20	; For compatibility
   243: .equ	FOC2	= 7	; Force Output Compare
   244: 
   245: ; TCNT2 - Timer/Counter2
   246: .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
   247: .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
   248: .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
   249: .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
   250: .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
   251: .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
   252: .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
   253: .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
   254: 
   255: ; OCR2 - Timer/Counter2 Output Compare Register
   256: .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
   257: .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
   258: .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
   259: .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
   260: .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
   261: .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
   262: .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
   263: .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
   264: 
   265: ; ASSR - Asynchronous Status Register
   266: .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
   267: .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
   268: .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
   269: .equ	AS2	= 3	; Asynchronous Timer/counter2
   270: 
   271: 
   272: ; ***** TIMER_COUNTER_1 **************
   273: ; TIMSK - Timer/Counter Interrupt Mask Register
   274: .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
   275: .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
   276: .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
   277: .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
   278: 
   279: ; TIFR - Timer/Counter Interrupt Flag register
   280: .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
   281: .equ	OCF1B	= 3	; Output Compare Flag 1B
   282: .equ	OCF1A	= 4	; Output Compare Flag 1A
   283: .equ	ICF1	= 5	; Input Capture Flag 1
   284: 
   285: ; TCCR1A - Timer/Counter1 Control Register A
   286: .equ	WGM10	= 0	; Waveform Generation Mode
   287: .equ	PWM10	= WGM10	; For compatibility
   288: .equ	WGM11	= 1	; Waveform Generation Mode
   289: .equ	PWM11	= WGM11	; For compatibility
   290: .equ	FOC1B	= 2	; Force Output Compare 1B
   291: .equ	FOC1A	= 3	; Force Output Compare 1A
   292: .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
   293: .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
   294: .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
   295: .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
   296: 
   297: ; TCCR1B - Timer/Counter1 Control Register B
   298: .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
   299: .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
   300: .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
   301: .equ	WGM12	= 3	; Waveform Generation Mode
   302: .equ	CTC10	= WGM12	; For compatibility
   303: .equ	CTC1	= WGM12	; For compatibility
   304: .equ	WGM13	= 4	; Waveform Generation Mode
   305: .equ	CTC11	= WGM13	; For compatibility
   306: .equ	ICES1	= 6	; Input Capture 1 Edge Select
   307: .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
   308: 
   309: 
   310: ; ***** SPI **************************
   311: ; SPDR - SPI Data Register
   312: .equ	SPDR0	= 0	; SPI Data Register bit 0
   313: .equ	SPDR1	= 1	; SPI Data Register bit 1
   314: .equ	SPDR2	= 2	; SPI Data Register bit 2
   315: .equ	SPDR3	= 3	; SPI Data Register bit 3
   316: .equ	SPDR4	= 4	; SPI Data Register bit 4
   317: .equ	SPDR5	= 5	; SPI Data Register bit 5
   318: .equ	SPDR6	= 6	; SPI Data Register bit 6
   319: .equ	SPDR7	= 7	; SPI Data Register bit 7
   320: 
   321: ; SPSR - SPI Status Register
   322: .equ	SPI2X	= 0	; Double SPI Speed Bit
   323: .equ	WCOL	= 6	; Write Collision Flag
   324: .equ	SPIF	= 7	; SPI Interrupt Flag
   325: 
   326: ; SPCR - SPI Control Register
   327: .equ	SPR0	= 0	; SPI Clock Rate Select 0
   328: .equ	SPR1	= 1	; SPI Clock Rate Select 1
   329: .equ	CPHA	= 2	; Clock Phase
   330: .equ	CPOL	= 3	; Clock polarity
   331: .equ	MSTR	= 4	; Master/Slave Select
   332: .equ	DORD	= 5	; Data Order
   333: .equ	SPE	= 6	; SPI Enable
   334: .equ	SPIE	= 7	; SPI Interrupt Enable
   335: 
   336: 
   337: ; ***** USART ************************
   338: ; UDR - USART I/O Data Register
   339: .equ	UDR0	= 0	; USART I/O Data Register bit 0
   340: .equ	UDR1	= 1	; USART I/O Data Register bit 1
   341: .equ	UDR2	= 2	; USART I/O Data Register bit 2
   342: .equ	UDR3	= 3	; USART I/O Data Register bit 3
   343: .equ	UDR4	= 4	; USART I/O Data Register bit 4
   344: .equ	UDR5	= 5	; USART I/O Data Register bit 5
   345: .equ	UDR6	= 6	; USART I/O Data Register bit 6
   346: .equ	UDR7	= 7	; USART I/O Data Register bit 7
   347: 
   348: ; UCSRA - USART Control and Status Register A
   349: .equ	USR	= UCSRA	; For compatibility
   350: .equ	MPCM	= 0	; Multi-processor Communication Mode
   351: .equ	U2X	= 1	; Double the USART transmission speed
   352: .equ	UPE	= 2	; Parity Error
   353: .equ	PE	= UPE	; For compatibility
   354: .equ	DOR	= 3	; Data overRun
   355: .equ	FE	= 4	; Framing Error
   356: .equ	UDRE	= 5	; USART Data Register Empty
   357: .equ	TXC	= 6	; USART Transmitt Complete
   358: .equ	RXC	= 7	; USART Receive Complete
   359: 
   360: ; UCSRB - USART Control and Status Register B
   361: .equ	UCR	= UCSRB	; For compatibility
   362: .equ	TXB8	= 0	; Transmit Data Bit 8
   363: .equ	RXB8	= 1	; Receive Data Bit 8
   364: .equ	UCSZ2	= 2	; Character Size
   365: .equ	CHR9	= UCSZ2	; For compatibility
   366: .equ	TXEN	= 3	; Transmitter Enable
   367: .equ	RXEN	= 4	; Receiver Enable
   368: .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
   369: .equ	TXCIE	= 6	; TX Complete Interrupt Enable
   370: .equ	RXCIE	= 7	; RX Complete Interrupt Enable
   371: 
   372: ; UCSRC - USART Control and Status Register C
   373: .equ	UCPOL	= 0	; Clock Polarity
   374: .equ	UCSZ0	= 1	; Character Size
   375: .equ	UCSZ1	= 2	; Character Size
   376: .equ	USBS	= 3	; Stop Bit Select
   377: .equ	UPM0	= 4	; Parity Mode Bit 0
   378: .equ	UPM1	= 5	; Parity Mode Bit 1
   379: .equ	UMSEL	= 6	; USART Mode Select
   380: .equ	URSEL	= 7	; Register Select
   381: 
   382: .equ	UBRRHI	= UBRRH	; For compatibility
   383: 
   384: ; ***** ANALOG_COMPARATOR ************
   385: ; SFIOR - Special Function IO Register
   386: .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
   387: 
   388: ; ACSR - Analog Comparator Control And Status Register
   389: .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
   390: .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
   391: .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
   392: .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
   393: .equ	ACI	= 4	; Analog Comparator Interrupt Flag
   394: .equ	ACO	= 5	; Analog Compare Output
   395: .equ	ACBG	= 6	; Analog Comparator Bandgap Select
   396: .equ	ACD	= 7	; Analog Comparator Disable
   397: 
   398: 
   399: ; ***** AD_CONVERTER *****************
   400: ; ADMUX - The ADC multiplexer Selection Register
   401: .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
   402: .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
   403: .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
   404: .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
   405: .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
   406: .equ	ADLAR	= 5	; Left Adjust Result
   407: .equ	REFS0	= 6	; Reference Selection Bit 0
   408: .equ	REFS1	= 7	; Reference Selection Bit 1
   409: 
   410: ; ADCSRA - The ADC Control and Status register
   411: .equ	ADCSR	= ADCSRA	; For compatibility
   412: .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
   413: .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
   414: .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
   415: .equ	ADIE	= 3	; ADC Interrupt Enable
   416: .equ	ADIF	= 4	; ADC Interrupt Flag
   417: .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if
   418: .equ	ADFR	= ADATE	; For compatibility
   419: .equ	ADSC	= 6	; ADC Start Conversion
   420: .equ	ADEN	= 7	; ADC Enable
   421: 
   422: ; ADCH - ADC Data Register High Byte
   423: .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
   424: .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
   425: .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
   426: .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
   427: .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
   428: .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
   429: .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
   430: .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
   431: 
   432: ; ADCL - ADC Data Register Low Byte
   433: .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
   434: .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
   435: .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
   436: .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
   437: .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
   438: .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
   439: .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
   440: .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
   441: 
   442: ; SFIOR - Special Function IO Register
   443: .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
   444: .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
   445: .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
   446: 
   447: 
   448: ; ***** PORTA ************************
   449: ; PORTA - Port A Data Register
   450: .equ	PORTA0	= 0	; Port A Data Register bit 0
   451: .equ	PA0	= 0	; For compatibility
   452: .equ	PORTA1	= 1	; Port A Data Register bit 1
   453: .equ	PA1	= 1	; For compatibility
   454: .equ	PORTA2	= 2	; Port A Data Register bit 2
   455: .equ	PA2	= 2	; For compatibility
   456: .equ	PORTA3	= 3	; Port A Data Register bit 3
   457: .equ	PA3	= 3	; For compatibility
   458: .equ	PORTA4	= 4	; Port A Data Register bit 4
   459: .equ	PA4	= 4	; For compatibility
   460: .equ	PORTA5	= 5	; Port A Data Register bit 5
   461: .equ	PA5	= 5	; For compatibility
   462: .equ	PORTA6	= 6	; Port A Data Register bit 6
   463: .equ	PA6	= 6	; For compatibility
   464: .equ	PORTA7	= 7	; Port A Data Register bit 7
   465: .equ	PA7	= 7	; For compatibility
   466: 
   467: ; DDRA - Port A Data Direction Register
   468: .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
   469: .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
   470: .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
   471: .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
   472: .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
   473: .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
   474: .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
   475: .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
   476: 
   477: ; PINA - Port A Input Pins
   478: .equ	PINA0	= 0	; Input Pins, Port A bit 0
   479: .equ	PINA1	= 1	; Input Pins, Port A bit 1
   480: .equ	PINA2	= 2	; Input Pins, Port A bit 2
   481: .equ	PINA3	= 3	; Input Pins, Port A bit 3
   482: .equ	PINA4	= 4	; Input Pins, Port A bit 4
   483: .equ	PINA5	= 5	; Input Pins, Port A bit 5
   484: .equ	PINA6	= 6	; Input Pins, Port A bit 6
   485: .equ	PINA7	= 7	; Input Pins, Port A bit 7
   486: 
   487: 
   488: ; ***** PORTB ************************
   489: ; PORTB - Port B Data Register
   490: .equ	PORTB0	= 0	; Port B Data Register bit 0
   491: .equ	PB0	= 0	; For compatibility
   492: .equ	PORTB1	= 1	; Port B Data Register bit 1
   493: .equ	PB1	= 1	; For compatibility
   494: .equ	PORTB2	= 2	; Port B Data Register bit 2
   495: .equ	PB2	= 2	; For compatibility
   496: .equ	PORTB3	= 3	; Port B Data Register bit 3
   497: .equ	PB3	= 3	; For compatibility
   498: .equ	PORTB4	= 4	; Port B Data Register bit 4
   499: .equ	PB4	= 4	; For compatibility
   500: .equ	PORTB5	= 5	; Port B Data Register bit 5
   501: .equ	PB5	= 5	; For compatibility
   502: .equ	PORTB6	= 6	; Port B Data Register bit 6
   503: .equ	PB6	= 6	; For compatibility
   504: .equ	PORTB7	= 7	; Port B Data Register bit 7
   505: .equ	PB7	= 7	; For compatibility
   506: 
   507: ; DDRB - Port B Data Direction Register
   508: .equ	DDB0	= 0	; Port B Data Direction Register bit 0
   509: .equ	DDB1	= 1	; Port B Data Direction Register bit 1
   510: .equ	DDB2	= 2	; Port B Data Direction Register bit 2
   511: .equ	DDB3	= 3	; Port B Data Direction Register bit 3
   512: .equ	DDB4	= 4	; Port B Data Direction Register bit 4
   513: .equ	DDB5	= 5	; Port B Data Direction Register bit 5
   514: .equ	DDB6	= 6	; Port B Data Direction Register bit 6
   515: .equ	DDB7	= 7	; Port B Data Direction Register bit 7
   516: 
   517: ; PINB - Port B Input Pins
   518: .equ	PINB0	= 0	; Port B Input Pins bit 0
   519: .equ	PINB1	= 1	; Port B Input Pins bit 1
   520: .equ	PINB2	= 2	; Port B Input Pins bit 2
   521: .equ	PINB3	= 3	; Port B Input Pins bit 3
   522: .equ	PINB4	= 4	; Port B Input Pins bit 4
   523: .equ	PINB5	= 5	; Port B Input Pins bit 5
   524: .equ	PINB6	= 6	; Port B Input Pins bit 6
   525: .equ	PINB7	= 7	; Port B Input Pins bit 7
   526: 
   527: 
   528: ; ***** PORTC ************************
   529: ; PORTC - Port C Data Register
   530: .equ	PORTC0	= 0	; Port C Data Register bit 0
   531: .equ	PC0	= 0	; For compatibility
   532: .equ	PORTC1	= 1	; Port C Data Register bit 1
   533: .equ	PC1	= 1	; For compatibility
   534: .equ	PORTC2	= 2	; Port C Data Register bit 2
   535: .equ	PC2	= 2	; For compatibility
   536: .equ	PORTC3	= 3	; Port C Data Register bit 3
   537: .equ	PC3	= 3	; For compatibility
   538: .equ	PORTC4	= 4	; Port C Data Register bit 4
   539: .equ	PC4	= 4	; For compatibility
   540: .equ	PORTC5	= 5	; Port C Data Register bit 5
   541: .equ	PC5	= 5	; For compatibility
   542: .equ	PORTC6	= 6	; Port C Data Register bit 6
   543: .equ	PC6	= 6	; For compatibility
   544: .equ	PORTC7	= 7	; Port C Data Register bit 7
   545: .equ	PC7	= 7	; For compatibility
   546: 
   547: ; DDRC - Port C Data Direction Register
   548: .equ	DDC0	= 0	; Port C Data Direction Register bit 0
   549: .equ	DDC1	= 1	; Port C Data Direction Register bit 1
   550: .equ	DDC2	= 2	; Port C Data Direction Register bit 2
   551: .equ	DDC3	= 3	; Port C Data Direction Register bit 3
   552: .equ	DDC4	= 4	; Port C Data Direction Register bit 4
   553: .equ	DDC5	= 5	; Port C Data Direction Register bit 5
   554: .equ	DDC6	= 6	; Port C Data Direction Register bit 6
   555: .equ	DDC7	= 7	; Port C Data Direction Register bit 7
   556: 
   557: ; PINC - Port C Input Pins
   558: .equ	PINC0	= 0	; Port C Input Pins bit 0
   559: .equ	PINC1	= 1	; Port C Input Pins bit 1
   560: .equ	PINC2	= 2	; Port C Input Pins bit 2
   561: .equ	PINC3	= 3	; Port C Input Pins bit 3
   562: .equ	PINC4	= 4	; Port C Input Pins bit 4
   563: .equ	PINC5	= 5	; Port C Input Pins bit 5
   564: .equ	PINC6	= 6	; Port C Input Pins bit 6
   565: .equ	PINC7	= 7	; Port C Input Pins bit 7
   566: 
   567: 
   568: ; ***** PORTD ************************
   569: ; PORTD - Port D Data Register
   570: .equ	PORTD0	= 0	; Port D Data Register bit 0
   571: .equ	PD0	= 0	; For compatibility
   572: .equ	PORTD1	= 1	; Port D Data Register bit 1
   573: .equ	PD1	= 1	; For compatibility
   574: .equ	PORTD2	= 2	; Port D Data Register bit 2
   575: .equ	PD2	= 2	; For compatibility
   576: .equ	PORTD3	= 3	; Port D Data Register bit 3
   577: .equ	PD3	= 3	; For compatibility
   578: .equ	PORTD4	= 4	; Port D Data Register bit 4
   579: .equ	PD4	= 4	; For compatibility
   580: .equ	PORTD5	= 5	; Port D Data Register bit 5
   581: .equ	PD5	= 5	; For compatibility
   582: .equ	PORTD6	= 6	; Port D Data Register bit 6
   583: .equ	PD6	= 6	; For compatibility
   584: .equ	PORTD7	= 7	; Port D Data Register bit 7
   585: .equ	PD7	= 7	; For compatibility
   586: 
   587: ; DDRD - Port D Data Direction Register
   588: .equ	DDD0	= 0	; Port D Data Direction Register bit 0
   589: .equ	DDD1	= 1	; Port D Data Direction Register bit 1
   590: .equ	DDD2	= 2	; Port D Data Direction Register bit 2
   591: .equ	DDD3	= 3	; Port D Data Direction Register bit 3
   592: .equ	DDD4	= 4	; Port D Data Direction Register bit 4
   593: .equ	DDD5	= 5	; Port D Data Direction Register bit 5
   594: .equ	DDD6	= 6	; Port D Data Direction Register bit 6
   595: .equ	DDD7	= 7	; Port D Data Direction Register bit 7
   596: 
   597: ; PIND - Port D Input Pins
   598: .equ	PIND0	= 0	; Port D Input Pins bit 0
   599: .equ	PIND1	= 1	; Port D Input Pins bit 1
   600: .equ	PIND2	= 2	; Port D Input Pins bit 2
   601: .equ	PIND3	= 3	; Port D Input Pins bit 3
   602: .equ	PIND4	= 4	; Port D Input Pins bit 4
   603: .equ	PIND5	= 5	; Port D Input Pins bit 5
   604: .equ	PIND6	= 6	; Port D Input Pins bit 6
   605: .equ	PIND7	= 7	; Port D Input Pins bit 7
   606: 
   607: 
   608: ; ***** CPU **************************
   609: ; SREG - Status Register
   610: .equ	SREG_C	= 0	; Carry Flag
   611: .equ	SREG_Z	= 1	; Zero Flag
   612: .equ	SREG_N	= 2	; Negative Flag
   613: .equ	SREG_V	= 3	; Two's Complement Overflow Flag
   614: .equ	SREG_S	= 4	; Sign Bit
   615: .equ	SREG_H	= 5	; Half Carry Flag
   616: .equ	SREG_T	= 6	; Bit Copy Storage
   617: .equ	SREG_I	= 7	; Global Interrupt Enable
   618: 
   619: ; MCUCR - MCU Control Register
   620: ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
   621: ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
   622: ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
   623: ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
   624: .equ	SM0	= 4	; Sleep Mode Select
   625: .equ	SM1	= 5	; Sleep Mode Select
   626: .equ	SM2	= 6	; Sleep Mode Select
   627: .equ	SE	= 7	; Sleep Enable
   628: 
   629: ; MCUCSR - MCU Control And Status Register
   630: .equ	MCUSR	= MCUCSR	; For compatibility
   631: .equ	PORF	= 0	; Power-on reset flag
   632: .equ	EXTRF	= 1	; External Reset Flag
   633: .equ	BORF	= 2	; Brown-out Reset Flag
   634: .equ	WDRF	= 3	; Watchdog Reset Flag
   635: .equ	JTRF	= 4	; JTAG Reset Flag
   636: .equ	JTD	= 7	; JTAG Interface Disable
   637: 
   638: ; OSCCAL - Oscillator Calibration Value
   639: .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
   640: .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
   641: .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
   642: .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
   643: .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
   644: .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
   645: .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
   646: .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
   647: 
   648: ; SFIOR - Special Function IO Register
   649: .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
   650: .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
   651: .equ	PUD	= 2	; Pull-up Disable
   652: 
   653: 
   654: ; ***** BOOT_LOAD ********************
   655: ; SPMCR - Store Program Memory Control Register
   656: .equ	SPMEN	= 0	; Store Program Memory Enable
   657: .equ	PGERS	= 1	; Page Erase
   658: .equ	PGWRT	= 2	; Page Write
   659: .equ	BLBSET	= 3	; Boot Lock Bit Set
   660: .equ	RWWSRE	= 4	; Read While Write secion read enable
   661: .equ	ASRE	= RWWSRE	; For compatibility
   662: .equ	RWWSB	= 6	; Read While Write Section Busy
   663: .equ	ASB	= RWWSB	; For compatibility
   664: .equ	SPMIE	= 7	; SPM Interrupt Enable
   665: 
   666: 
   667: ; ***** TWI **************************
   668: ; TWBR - TWI Bit Rate register
   669: .equ	TWBR0	= 0	; 
   670: .equ	TWBR1	= 1	; 
   671: .equ	TWBR2	= 2	; 
   672: .equ	TWBR3	= 3	; 
   673: .equ	TWBR4	= 4	; 
   674: .equ	TWBR5	= 5	; 
   675: .equ	TWBR6	= 6	; 
   676: .equ	TWBR7	= 7	; 
   677: 
   678: ; TWCR - TWI Control Register
   679: .equ	TWIE	= 0	; TWI Interrupt Enable
   680: .equ	TWEN	= 2	; TWI Enable Bit
   681: .equ	TWWC	= 3	; TWI Write Collition Flag
   682: .equ	TWSTO	= 4	; TWI Stop Condition Bit
   683: .equ	TWSTA	= 5	; TWI Start Condition Bit
   684: .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
   685: .equ	TWINT	= 7	; TWI Interrupt Flag
   686: 
   687: ; TWSR - TWI Status Register
   688: .equ	TWPS0	= 0	; TWI Prescaler bits
   689: .equ	TWPS1	= 1	; TWI Prescaler bits
   690: .equ	TWS3	= 3	; TWI Status
   691: .equ	TWS4	= 4	; TWI Status
   692: .equ	TWS5	= 5	; TWI Status
   693: .equ	TWS6	= 6	; TWI Status
   694: .equ	TWS7	= 7	; TWI Status
   695: 
   696: ; TWDR - TWI Data register
   697: .equ	TWD0	= 0	; TWI Data Register Bit 0
   698: .equ	TWD1	= 1	; TWI Data Register Bit 1
   699: .equ	TWD2	= 2	; TWI Data Register Bit 2
   700: .equ	TWD3	= 3	; TWI Data Register Bit 3
   701: .equ	TWD4	= 4	; TWI Data Register Bit 4
   702: .equ	TWD5	= 5	; TWI Data Register Bit 5
   703: .equ	TWD6	= 6	; TWI Data Register Bit 6
   704: .equ	TWD7	= 7	; TWI Data Register Bit 7
   705: 
   706: ; TWAR - TWI (Slave) Address register
   707: .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
   708: .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
   709: .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
   710: .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
   711: .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
   712: .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
   713: .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
   714: .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
   715: 
   716: 
   717: 
   718: ; ***** LOCKSBITS ********************************************************
   719: .equ	LB1	= 0	; Lock bit
   720: .equ	LB2	= 1	; Lock bit
   721: .equ	BLB01	= 2	; Boot Lock bit
   722: .equ	BLB02	= 3	; Boot Lock bit
   723: .equ	BLB11	= 4	; Boot lock bit
   724: .equ	BLB12	= 5	; Boot lock bit
   725: 
   726: 
   727: ; ***** FUSES ************************************************************
   728: ; LOW fuse bits
   729: .equ	CKSEL0	= 0	; Select Clock Source
   730: .equ	CKSEL1	= 1	; Select Clock Source
   731: .equ	CKSEL2	= 2	; Select Clock Source
   732: .equ	CKSEL3	= 3	; Select Clock Source
   733: .equ	BODEN	= 6	; Brown out detector enable
   734: .equ	BODLEVEL	= 7	; Brown out detector trigger level
   735: 
   736: ; HIGH fuse bits
   737: .equ	BOOTRST	= 0	; Select Reset Vector
   738: .equ	BOOTSZ0	= 1	; Select Boot Size
   739: .equ	BOOTSZ1	= 2	; Select Boot Size
   740: .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
   741: .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
   742: .equ	JTAGEN	= 6	; Enable JTAG
   743: .equ	OCDEN	= 7	; Enable OCD
   744: 
   745: 
   746: 
   747: ; ***** CPU REGISTER DEFINITIONS *****************************************
   748: .def	XH	= r27
   749: .def	XL	= r26
   750: .def	YH	= r29
   751: .def	YL	= r28
   752: .def	ZH	= r31
   753: .def	ZL	= r30
   754: 
   755: 
   756: 
   757: ; ***** DATA MEMORY DECLARATIONS *****************************************
   758: .equ	FLASHEND	= 0x3fff	; Note: Word address
   759: .equ	IOEND	= 0x003f
   760: .equ	SRAM_START	= 0x0060
   761: .equ	SRAM_SIZE	= 2048
   762: .equ	RAMEND	= 0x085f
   763: .equ	XRAMEND	= 0x0000
   764: .equ	E2END	= 0x03ff
   765: .equ	EEPROMEND	= 0x03ff
   766: .equ	EEADRBITS	= 10
   767: #pragma AVRPART MEMORY PROG_FLASH 32768
   768: #pragma AVRPART MEMORY EEPROM 1024
   769: #pragma AVRPART MEMORY INT_SRAM SIZE 2048
   770: #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
   771: 
   772: 
   773: 
   774: ; ***** BOOTLOADER DECLARATIONS ******************************************
   775: .equ	NRWW_START_ADDR	= 0x3800
   776: .equ	NRWW_STOP_ADDR	= 0x3fff
   777: .equ	RWW_START_ADDR	= 0x0
   778: .equ	RWW_STOP_ADDR	= 0x37ff
   779: .equ	PAGESIZE	= 64
   780: .equ	FIRSTBOOTSTART	= 0x3f00
   781: .equ	SECONDBOOTSTART	= 0x3e00
   782: .equ	THIRDBOOTSTART	= 0x3c00
   783: .equ	FOURTHBOOTSTART	= 0x3800
   784: .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
   785: .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
   786: 
   787: 
   788: 
   789: ; ***** INTERRUPT VECTORS ************************************************
   790: .equ	INT0addr	= 0x0002	; External Interrupt Request 0
   791: .equ	INT1addr	= 0x0004	; External Interrupt Request 1
   792: .equ	INT2addr	= 0x0006	; External Interrupt Request 2
   793: .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
   794: .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
   795: .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
   796: .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
   797: .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
   798: .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
   799: .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
   800: .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
   801: .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
   802: .equ	URXCaddr	= 0x001a	; USART, Rx Complete
   803: .equ	UDREaddr	= 0x001c	; USART Data Register Empty
   804: .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
   805: .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
   806: .equ	ERDYaddr	= 0x0022	; EEPROM Ready
   807: .equ	ACIaddr	= 0x0024	; Analog Comparator
   808: .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
   809: .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
   810: 
   811: .equ	INT_VECTORS_SIZE	= 42	; size in words
   812: 
   813: #endif  /* _M32ADEF_INC_ */
   814: 
   815: ; ***** END OF FILE ******************************************************
   816: 
  Continuing file ish.asm
     2: ; Internal Hardware Init  ======================================
     3: 		.equ 	XTAL = 16000000 	
     4: 		.equ 	baudrate = 9600  
     5: 		.equ 	bauddivider = XTAL/(16*baudrate)-1
     6: 
     7: .cseg
     8: .org 0
     9: 000000   E50F  ldi R16,low(RAMEND) ;инициализация стека
    10: 000001   BF0D  out SPL,R16
    11: 000002   E008  ldi R16,high(RAMEND)
    12: 000003   BF0E  out SPH, R16
    13: 
    14: 000004   E607  LDI 	R16, low(bauddivider)
    15: 000005   B909  OUT 	UBRRL,R16
    16: 000006   E000  LDI 	R16, high(bauddivider)
    17: 000007   BD00  OUT 	UBRRH,R16
    18:  
    19: 000008   E000  LDI 	R16,0
    20: 000009   B90B  OUT 	UCSRA, R16
    21:  
    22: ; Прерывания запрещены, прием-передача разрешен.
    23: 00000A   E108  LDI 	R16, (1<<RXEN)|(1<<TXEN)|(0<<RXCIE)|(0<<TXCIE)|(0<<UDRIE)
    24: 00000B   B90A  OUT 	UCSRB, R16	
    25:  
    26: ; Формат кадра - 8 бит, пишем в регистр UCSRC, за это отвечает бит селектор
    27: 00000C   E806  LDI 	R16, (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1)
    28: 00000D   BD00  OUT 	UCSRC, R16
    29: 
    30: 
    31: 00000E   E800  LDI R16,128	;НАстройка TWI
    32: 00000F   B900  OUT TWBR, R16
    33: 000010   24EE  CLR R14
    34: 
    35: 000011   C004  RJMP ReadTime
    36: 	.include 	"TWI_macro.inc"
  Including file TWI_macro.inc
     1: ;===============================================================================================
     2: ; TWI Init
     3: 
     4: 	.equ	DS1307		= 0b11010000	;Адрес часов
     5: 
     6: 	.equ	Start		= 0x08		;Прошел старт
     7: 	.equ	Restart		= 0x10		;Прошел Рестарт
     8: 	.equ	SLA_W_ACK	= 0x18		;Адрес + запись принят, получен ACK
     9: 	.equ	Byte_ACK	= 0x28		;Байт отправлен, получен ACK
    10: 	.equ	SLA_R_ACK	= 0x40		;Адрес + чтение принят, получен ACK
    11: 	.equ	RecB		= 0x50		;Байт получен, передан ACK
    12: 	.equ	RecB_NACK	= 0x58		;Байт получен, передан NACK
    13: 
    14: ;===============================================================================================
    15: ;Start
    16: 	.MACRO	TWI_START
    17: 	LDI R16, 1<<TWEN|1<<TWSTA|1<<TWINT	;START
    18: 	OUT TWCR, R16
    19: 
    20: 	rcall wait1	;Ждем прерывания
    21: 	IN R16, TWSR
    22: 	ANDI R16, 0XF8
    23: 	CPI R16, Start	;ПРОВЕРКА СТАРТА
    24: 	BREQ NoError
    25: 	LDI R16,1
    26: 	Mov R14,R16
    27: NoError:
    28: 	.ENDM
    29: 
    30: ;===============================================================================================
    31: ;ReStart
    32: 	.MACRO	TWI_RESTART
    33: 	LDI R16, 1<<TWEN|1<<TWSTA|1<<TWINT	;RESTART
    34: 	OUT TWCR, R16
    35: 
    36: 	rcall wait1	;Ждем прерывания
    37: 	IN R16, TWSR
    38: 	ANDI R16, 0XF8
    39: 	CPI R16, Restart	;ПРОВЕРКА СТАРТА
    40: 	BREQ NoError
    41: 	LDI R16,5
    42: 	Mov R14,R16
    43: NoError:
    44: 	.ENDM
    45: 
    46: ;===============================================================================================
    47: ;Stop
    48: 	.MACRO	TWI_STOP
    49: 	LDI R16, 1<<TWEN|1<<TWSTO|1<<TWINT	;STOP
    50: 	OUT TWCR, R16
    51: 	.ENDM
    52: 
    53: ;===============================================================================================
    54: ;SLA_W
    55: 	.MACRO	TWI_SLA_W
    56: 	LDI R16,DS1307	;АДРЕС УСТРОЙСТВА
    57: 	OUT TWDR, R16
    58: 	LDI R16, 1<<TWINT|1<<TWEN
    59: 	OUT TWCR, R16
    60: 
    61: 	rcall wait1	;Ждем прерывания
    62: 	IN R16, TWSR
    63: 	ANDI R16, 0XF8
    64: 	CPI R16, SLA_W_ACK	;ПРОВЕРКА ОТВЕТА НА АДРЕС
    65: 	BREQ NoError2
    66: 	LDI R16,3
    67: 	Mov R14,R16
    68: NoError2:
    69: 	.ENDM
    70: 
    71: 
    72: ;===============================================================================================
    73: ;SLA_R
    74: 	.MACRO	TWI_SLA_R
    75: 	LDI R16,DS1307|1<<0	;АДРЕС УСТРОЙСТВА
    76: 	OUT TWDR, R16
    77: 	LDI R16, 1<<TWINT|1<<TWEN
    78: 	OUT TWCR, R16
    79: 
    80: 	rcall wait1	;Ждем прерывания
    81: 	IN R16, TWSR
    82: 	ANDI R16, 0XF8
    83: 	CPI R16, SLA_R_ACK	;ПРОВЕРКА ОТВЕТА НА АДРЕС
    84: 	BREQ NoError3
    85: 	LDI R16,7
    86: 	Mov R14,R16
    87: NoError3:
    88: 	.ENDM
    89: 
    90: ;===============================================================================================
    91: ;Send Byte
    92: 	.MACRO	TWI_SEND_B
    93: 	LDI R16,@0	;АДРЕС СЛОВА
    94: 	OUT TWDR, R16
    95: 	LDI R16, 1<<TWINT|1<<TWEN
    96: 	OUT TWCR, R16
    97: 
    98: 	rcall wait1	;Ждем прерывания
    99: 	IN R16, TWSR
   100: 	ANDI R16, 0XF8
   101: 	CPI R16, Byte_ACK	;ПРОВЕРКА ПРИНЯТИЯ БАЙТА
   102: 	BREQ NoError4
   103: 	LDI R16,15
   104: 	Mov R14,R16
   105: NoError4:
   106: 	.ENDM
   107: 
   108: ;===============================================================================================
   109: ;Receive Byte + ACK
   110: 	.MACRO	TWI_READ_B_ACK
   111: 	LDI R16, 1<<TWINT|1<<TWEN|1<<TWEA	;Бум читать
   112: 	OUT TWCR, R16
   113: 	rcall wait1	;Ждем прерывания
   114: 	IN R16, TWSR
   115: 	ANDI R16, 0XF8
   116: 	CPI R16, RecB	;ПРОВЕРКА ЧТЕНИЯ
   117: 	BREQ NoError5
   118: 	LDI R16,31
   119: 	Mov R14,R16
   120: NoError5:	
   121: 	IN R16, TWDR
   122: .ENDM
   123: 
   124: ;===============================================================================================
   125: ;Receive Byte + NACK
   126: 	.MACRO	TWI_READ_B_NACK
   127: 	LDI R16, 1<<TWINT|1<<TWEN|0<<TWEA	;Бум читать
   128: 	OUT TWCR, R16
   129: 	rcall wait1	;Ждем прерывания
   130: 	IN R16, TWSR
   131: 	ANDI R16, 0XF8
   132: 	CPI R16, RecB_NACK	;ПРОВЕРКА ЧТЕНИЯ
   133: 	BREQ NoError6
   134: 	LDI R16,63
   135: 	Mov R14,R16
   136: NoError6:	
   137: 	IN R16, TWDR
   138: .ENDM
   139: ;===============================================================================================
   140: 
   141: 
   142: 
   143: 000012   B706  IN R16, TWCR		;Ждем прерывания
   144: 000013   FF07  SBRS R16, TWINT
   145: 000014   CFFD  RJMP wait1
   146: 000015   9508  RET
  Continuing file ish.asm
    37: 
    38: ReadTime: TWI_START
    39: 00001F   FCE0  SBRC R14,0
    40: 000020   C05C  RJMP ERROR
    41: 
    42: 	TWI_SLA_W
    43: 00002C   FCE0  SBRC R14,0
    44: 00002D   C04F  RJMP ERROR
    45: 
    46: 	TWI_SEND_B 0x00
    47: 000039   FCE0  SBRC R14,0
    48: 00003A   C042  RJMP ERROR
    49: 
    50: 	TWI_RESTART
    51: 000044   FCE0  SBRC R14,0
    52: 000045   C037  RJMP ERROR
    53: 
    54: 	TWI_SLA_R
    55: 000051   FCE0  SBRC R14,0
    56: 000052   C02A  RJMP ERROR
    57: 
    58: 	TWI_READ_B_ACK
    59: 00005D   FCE0  SBRC R14,0
    60: 00005E   C01E  RJMP ERROR
    61: 00005F   2EA0  MOV R10,R16	;Записали секунды в R10
    62: 
    63: 	TWI_READ_B_ACK
    64: 00006A   FCE0  SBRC R14,0
    65: 00006B   C011  RJMP ERROR
    66: 00006C   2EB0  MOV R11,R16	;Записали минуты в R11
    67: 
    68: 	TWI_READ_B_NACK
    69: 000077   FCE0  SBRC R14,0
    70: 000078   C004  RJMP ERROR
    71: 000079   2EC0  MOV R12,R16	;Записали Часы в R12
    72: 
    73: 	TWI_STOP
    74: 
    75: 
    76: 00007C   C004  rjmp Begin
    77: 
    78: 00007D   2D0E  Mov R16,R14
    79: 00007E   D010  rcall uart_snt
    80: 00007F   24EE  CLR R14
    81: 000080   CF95  RJMP ReadTime
    82: 
    83: 
    84: 
    85: 
    86: 000081   D011  rcall TimeToASCII
    87: 000082   E6E0  ldi ZL,Low(TimeInASCII)
    88: 000083   E0F0  ldi ZH,High(TimeInASCII)  ;загрузка начального адреса массива
    89: 000084   E028  LDI R18,8
    90: 
    91: 
    92: 000085   9101  LD	R16, Z+
    93: 000086   D008  rcall uart_snt
    94: 000087   952A  DEC R18
    95: 000088   2322  TST R18
    96: 000089   F7D9  brne Risuy
    97: 00008A   E00A  LDI R16, 0x0A	;На новую строку
    98: 00008B   D003  rcall uart_snt
    99: 00008C   E00D  LDI R16, 0x0D	;в начало строки
   100: 00008D   D001  rcall uart_snt
   101: 
   102: 00008E   CF87  RJMP ReadTime
   103: 
   104: 
   105: ; Процедура отправки байта
   106: 00008F   9B5D  SBIS 	UCSRA,UDRE	; Пропуск если нет флага готовности
   107: 000090   CFFE  RJMP	uart_snt 	; ждем готовности - флага UDRE
   108:  
   109: 000091   B90C  OUT	UDR, R16	; шлем байт
   110: 000092   9508  RET
   111: 
   112: 
   113: 
   114: ;|---------------------------------------------------------------------------
   115: ;| Процедура преобразования времени в ASCII
   116: ;| На входе: секунды в R10
   117: ;|            минуты в R11
   118: ;|              часы в R12
   119: ;| На выходе: В TimeInASCII и TimeInASCII+1 - Часы,
   120: ;| В TimeInASCII+3 и TimeInASCII+4 - Минуты,
   121: ;| В TimeInASCII+6 и TimeInASCII+7 - Секунды,
   122: ;| В TimeInASCII+2 и TimeInASCII+5 - Двоеточие
   123: ;|---------------------------------------------------------------------------
   124: 000093   930F  PUSH R16
   125: 	
   126: 000094   2D0C  MOV R16,R12
   127: 000095   9506  LSR R16
   128: 000096   9506  LSR R16
   129: 000097   9506  LSR R16
   130: 000098   9506  LSR R16
   131: 000099   5D00  SUBI R16, (-48)	; Прибавляем 48 для получения символа
   132: 00009A   9300  STS TimeInASCII, R16
        00009B   0060
   133: 
   134: 00009C   2D0C  MOV R16,R12
   135: 00009D   700F  ANDI R16,0x0F
   136: 00009E   5D00  SUBI R16, (-48)	; Прибавляем 48 для получения символа
   137: 00009F   9300  STS TimeInASCII+1, R16
        0000A0   0061
   138: 
   139: 0000A1   2D0B  MOV R16,R11
   140: 0000A2   9506  LSR R16
   141: 0000A3   9506  LSR R16
   142: 0000A4   9506  LSR R16
   143: 0000A5   9506  LSR R16
   144: 0000A6   5D00  SUBI R16, (-48)	; Прибавляем 48 для получения символа
   145: 0000A7   9300  STS TimeInASCII+3, R16
        0000A8   0063
   146: 
   147: 0000A9   2D0B  MOV R16,R11
   148: 0000AA   700F  ANDI R16,0x0F
   149: 0000AB   5D00  SUBI R16, (-48)	; Прибавляем 48 для получения символа
   150: 0000AC   9300  STS TimeInASCII+4, R16
        0000AD   0064
   151: 
   152: 0000AE   2D0A  MOV R16,R10
   153: 0000AF   9506  LSR R16
   154: 0000B0   9506  LSR R16
   155: 0000B1   9506  LSR R16
   156: 0000B2   9506  LSR R16
   157: 0000B3   5D00  SUBI R16, (-48)	; Прибавляем 48 для получения символа
   158: 0000B4   9300  STS TimeInASCII+6, R16
        0000B5   0066
   159: 
   160: 0000B6   2D0A  MOV R16,R10
   161: 0000B7   700F  ANDI R16,0x0F
   162: 0000B8   5D00  SUBI R16, (-48)	; Прибавляем 48 для получения символа
   163: 0000B9   9300  STS TimeInASCII+7, R16
        0000BA   0067
   164: 
   165: 0000BB   E30A  LDI R16, 0x3A
   166: 0000BC   9300  STS TimeInASCII+2, R16
        0000BD   0062
   167: 0000BE   9300  STS TimeInASCII+5, R16
        0000BF   0065
   168: 
   169: 0000C0   910F  POP R16
   170: 0000C1   9508  RET
   171: ;|---------------------------------------------------------------------------
   172: ;|                               END
   173: :|---------------------------------------------------------------------------
   174: 
   175: 
   176: 
   177: .DSEG
   178: TimeInASCII:	.byte	8
   179: 
 -> Warning 011: C-style instructions in file, lines ignored!

Program             :      194 words.
Constants           :        0 words.
Total program memory:      194 words.
Eeprom space        :        0 bytes.
Data segment        :        8 bytes.
Compilation completed, no errors.
Compilation endet 02.02.2015, 19:08:57
